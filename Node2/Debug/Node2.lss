
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  000005b6  0000064a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800206  00800206  00000650  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000104c  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008be  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b8a  00000000  00000000  00002136  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000360  00000000  00000000  00002cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f6  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000074a  00000000  00000000  00003416  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00003b60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 eb       	ldi	r30, 0xB6	; 182
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 31       	cpi	r26, 0x12	; 18
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	37 d0       	rcall	.+110    	; 0x18e <main>
 120:	48 c2       	rjmp	.+1168   	; 0x5b2 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <ADC_read>:

uint16_t ADC_read()
{
	uint16_t data = 0;
	
	ADMUX |= (1 << MUX1);
 124:	ec e7       	ldi	r30, 0x7C	; 124
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADSC);
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 64       	ori	r24, 0x40	; 64
 136:	80 83       	st	Z, r24
	
	loop_until_bit_is_set(ADCSRA,ADIF);
 138:	80 81       	ld	r24, Z
 13a:	84 ff       	sbrs	r24, 4
 13c:	fd cf       	rjmp	.-6      	; 0x138 <ADC_read+0x14>
	
	uint8_t data_low = ADCL;
 13e:	20 91 78 00 	lds	r18, 0x0078
	uint16_t data_high = ADCH;
 142:	80 91 79 00 	lds	r24, 0x0079
 146:	90 e0       	ldi	r25, 0x00	; 0
	data = data_low + data_high*0b100000000;
 148:	98 2f       	mov	r25, r24
 14a:	88 27       	eor	r24, r24
		
	return data;
}
 14c:	82 0f       	add	r24, r18
 14e:	91 1d       	adc	r25, r1
 150:	08 95       	ret

00000152 <CAN_init>:

void CAN_init(void)
{
		/*SPI_MasterInit();
		SPI_SlaveInit();*/
		MCP_init();
 152:	2c d0       	rcall	.+88     	; 0x1ac <MCP_init>


		MCP_write(MCP_CANCTRL, MODE_CONFIG);		
 154:	60 e8       	ldi	r22, 0x80	; 128
 156:	8f e0       	ldi	r24, 0x0F	; 15
 158:	2e d0       	rcall	.+92     	; 0x1b6 <MCP_write>

		/*MCP_write(MCP_CNF1, 0x20); // Write config 1
		MCP_write(MCP_CNF2, 0x92); // Write config 2
		MCP_write(MCP_CNF3, 0xC2); // Write config 3*/
		
		MCP_write(MCP_CANINTE, 0x03);	//
 15a:	63 e0       	ldi	r22, 0x03	; 3
 15c:	8b e2       	ldi	r24, 0x2B	; 43
 15e:	2b d0       	rcall	.+86     	; 0x1b6 <MCP_write>
		MCP_write(MCP_CANINTF, 0x00);	//
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	8c e2       	ldi	r24, 0x2C	; 44
 164:	28 d0       	rcall	.+80     	; 0x1b6 <MCP_write>
		MCP_write(MCP_EFLG, 0x00);		//
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	8d e2       	ldi	r24, 0x2D	; 45
 16a:	25 d0       	rcall	.+74     	; 0x1b6 <MCP_write>
		
		MCP_write(0x0C, 0x00);			 // Disable all interrupts
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	8c e0       	ldi	r24, 0x0C	; 12
 170:	22 d0       	rcall	.+68     	; 0x1b6 <MCP_write>
		MCP_write(0x0D, 0x00);			// Clear TXRTSCTRL
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	8d e0       	ldi	r24, 0x0D	; 13
 176:	1f d0       	rcall	.+62     	; 0x1b6 <MCP_write>
		
		
		MCP_write(MCP_RXB0CTRL, 0x60);		// Receive buffer 0 control (turn mask/filters off, receive any message) 
 178:	60 e6       	ldi	r22, 0x60	; 96
 17a:	80 e6       	ldi	r24, 0x60	; 96
 17c:	1c d0       	rcall	.+56     	; 0x1b6 <MCP_write>
		MCP_write(MCP_RXB1CTRL, 0x60);		// Receive buffer 1 control (turn mask/filters off, receive any message)
 17e:	60 e6       	ldi	r22, 0x60	; 96
 180:	80 e7       	ldi	r24, 0x70	; 112
 182:	19 d0       	rcall	.+50     	; 0x1b6 <MCP_write>

		//MCP_write(MCP_CANCTRL, 0x44);		// Enable can controller
		MCP_bit_mod(MCP_CANCTRL,MODE_MASK,MODE_NORMAL);
 184:	40 e0       	ldi	r20, 0x00	; 0
 186:	60 ee       	ldi	r22, 0xE0	; 224
 188:	8f e0       	ldi	r24, 0x0F	; 15
 18a:	24 c0       	rjmp	.+72     	; 0x1d4 <MCP_bit_mod>
 18c:	08 95       	ret

0000018e <main>:
	printf("AD1: %d \n",PINK & (1 << PINK0));
}

int main(void)
{
	MCP_init();
 18e:	0e d0       	rcall	.+28     	; 0x1ac <MCP_init>
	CAN_init();
 190:	e0 df       	rcall	.-64     	; 0x152 <CAN_init>
	PWM_init();	
 192:	36 d0       	rcall	.+108    	; 0x200 <PWM_init>
	USART_Init(MYUBRR);
 194:	87 e6       	ldi	r24, 0x67	; 103
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	69 d0       	rcall	.+210    	; 0x26c <USART_Init>
	
	//test_CAN_nodes();
	
	while(1)
	{
		ADC_read();
 19a:	c4 df       	rcall	.-120    	; 0x124 <ADC_read>
 19c:	fe cf       	rjmp	.-4      	; 0x19a <main+0xc>

0000019e <MCP_reset>:
	char status = SPI_SlaveReceive();
	
	PORTB |= (1 << SS);
	
	return status;
}
 19e:	2f 98       	cbi	0x05, 7	; 5
 1a0:	80 ec       	ldi	r24, 0xC0	; 192
 1a2:	4f d0       	rcall	.+158    	; 0x242 <SPI_MasterTransmit>
 1a4:	2f 9a       	sbi	0x05, 7	; 5
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	08 95       	ret

000001ac <MCP_init>:
 1ac:	41 d0       	rcall	.+130    	; 0x230 <SPI_MasterInit>
 1ae:	f7 df       	rcall	.-18     	; 0x19e <MCP_reset>
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	08 95       	ret

000001b6 <MCP_write>:
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	d8 2f       	mov	r29, r24
 1bc:	c6 2f       	mov	r28, r22
 1be:	2f 98       	cbi	0x05, 7	; 5
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	3f d0       	rcall	.+126    	; 0x242 <SPI_MasterTransmit>
 1c4:	8d 2f       	mov	r24, r29
 1c6:	3d d0       	rcall	.+122    	; 0x242 <SPI_MasterTransmit>
 1c8:	8c 2f       	mov	r24, r28
 1ca:	3b d0       	rcall	.+118    	; 0x242 <SPI_MasterTransmit>
 1cc:	2f 9a       	sbi	0x05, 7	; 5
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <MCP_bit_mod>:

void MCP_bit_mod(char address, char mask, char data)
{
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	18 2f       	mov	r17, r24
 1dc:	d6 2f       	mov	r29, r22
 1de:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << SS);
 1e0:	2f 98       	cbi	0x05, 7	; 5
	
	SPI_MasterTransmit(MCP_BITMOD);
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	2e d0       	rcall	.+92     	; 0x242 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
 1e6:	81 2f       	mov	r24, r17
 1e8:	2c d0       	rcall	.+88     	; 0x242 <SPI_MasterTransmit>
	SPI_MasterTransmit(mask);
 1ea:	8d 2f       	mov	r24, r29
 1ec:	2a d0       	rcall	.+84     	; 0x242 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
 1ee:	8c 2f       	mov	r24, r28
 1f0:	28 d0       	rcall	.+80     	; 0x242 <SPI_MasterTransmit>
	
	PORTB |= ~(1 << SS);
 1f2:	85 b1       	in	r24, 0x05	; 5
 1f4:	8f 67       	ori	r24, 0x7F	; 127
 1f6:	85 b9       	out	0x05, r24	; 5
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	08 95       	ret

00000200 <PWM_init>:
#include "define.h"

#define  TC_TOP 1249

void PWM_init(void){
	ICR1 = TC_TOP;
 200:	81 ee       	ldi	r24, 0xE1	; 225
 202:	94 e0       	ldi	r25, 0x04	; 4
 204:	90 93 87 00 	sts	0x0087, r25
 208:	80 93 86 00 	sts	0x0086, r24
	
	DDRB |= (1 << PB6);
 20c:	26 9a       	sbi	0x04, 6	; 4
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS12);
												
}

void PWM_duty(uint8_t duty_cycle){
	OCR1B = (uint16_t)((uint32_t)duty_cycle* TC_TOP / 1000);		//dividing by 10 for duty_cycle 75
 20e:	8e e3       	ldi	r24, 0x3E	; 62
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	90 93 8b 00 	sts	0x008B, r25
 216:	80 93 8a 00 	sts	0x008A, r24
	ICR1 = TC_TOP;
	
	DDRB |= (1 << PB6);
	PWM_duty(50);
	
	TCCR1A |= (1 << WGM11) | (1 << COM1B1)	| (0 << COM1B0); //Kanskje A eller B istedet
 21a:	e0 e8       	ldi	r30, 0x80	; 128
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	82 62       	ori	r24, 0x22	; 34
 222:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS12);
 224:	e1 e8       	ldi	r30, 0x81	; 129
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	8c 61       	ori	r24, 0x1C	; 28
 22c:	80 83       	st	Z, r24
 22e:	08 95       	ret

00000230 <SPI_MasterInit>:
#define MISO PB3
#define SS	PB7

void SPI_MasterInit(void)
{
	DDRB |= (1 << MOSI) | (1 << SS) | (1 << SCK) | (1 << SS_init);
 230:	84 b1       	in	r24, 0x04	; 4
 232:	87 68       	ori	r24, 0x87	; 135
 234:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << MISO);
 236:	23 98       	cbi	0x04, 3	; 4
	PORTB |= (1<<SS_init);
 238:	28 9a       	sbi	0x05, 0	; 5
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 23a:	8c b5       	in	r24, 0x2c	; 44
 23c:	81 65       	ori	r24, 0x51	; 81
 23e:	8c bd       	out	0x2c, r24	; 44
 240:	08 95       	ret

00000242 <SPI_MasterTransmit>:
}


void SPI_MasterTransmit(char cdata)
{
	SPDR = cdata;
 242:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1 << SPIF)));
 244:	0d b4       	in	r0, 0x2d	; 45
 246:	07 fe       	sbrs	r0, 7
 248:	fd cf       	rjmp	.-6      	; 0x244 <SPI_MasterTransmit+0x2>
}
 24a:	08 95       	ret

0000024c <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !(UCSR0A & (1 << UDRE0)) );
 24c:	e0 ec       	ldi	r30, 0xC0	; 192
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	90 81       	ld	r25, Z
 252:	95 ff       	sbrs	r25, 5
 254:	fd cf       	rjmp	.-6      	; 0x250 <USART_Transmit+0x4>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
 256:	80 93 c6 00 	sts	0x00C6, r24
 25a:	08 95       	ret

0000025c <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1 << RXC0)) );
 25c:	e0 ec       	ldi	r30, 0xC0	; 192
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	88 23       	and	r24, r24
 264:	ec f7       	brge	.-6      	; 0x260 <USART_Receive+0x4>
	
	/* Get and return received data from buffer */
	return UDR0;
 266:	80 91 c6 00 	lds	r24, 0x00C6
}
 26a:	08 95       	ret

0000026c <USART_Init>:

FILE *uart;

void USART_Init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr >> 8);
 26c:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 270:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 274:	88 e1       	ldi	r24, 0x18	; 24
 276:	80 93 c1 00 	sts	0x00C1, r24
	
	uart = fdevopen(&USART_Transmit, &USART_Receive);
 27a:	6e e2       	ldi	r22, 0x2E	; 46
 27c:	71 e0       	ldi	r23, 0x01	; 1
 27e:	86 e2       	ldi	r24, 0x26	; 38
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	2c d1       	rcall	.+600    	; 0x4dc <fdevopen>
 284:	90 93 07 02 	sts	0x0207, r25
 288:	80 93 06 02 	sts	0x0206, r24
 28c:	08 95       	ret

0000028e <malloc>:
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	82 30       	cpi	r24, 0x02	; 2
 294:	91 05       	cpc	r25, r1
 296:	10 f4       	brcc	.+4      	; 0x29c <malloc+0xe>
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	e0 91 0a 02 	lds	r30, 0x020A
 2a0:	f0 91 0b 02 	lds	r31, 0x020B
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	a0 e0       	ldi	r26, 0x00	; 0
 2aa:	b0 e0       	ldi	r27, 0x00	; 0
 2ac:	30 97       	sbiw	r30, 0x00	; 0
 2ae:	39 f1       	breq	.+78     	; 0x2fe <malloc+0x70>
 2b0:	40 81       	ld	r20, Z
 2b2:	51 81       	ldd	r21, Z+1	; 0x01
 2b4:	48 17       	cp	r20, r24
 2b6:	59 07       	cpc	r21, r25
 2b8:	b8 f0       	brcs	.+46     	; 0x2e8 <malloc+0x5a>
 2ba:	48 17       	cp	r20, r24
 2bc:	59 07       	cpc	r21, r25
 2be:	71 f4       	brne	.+28     	; 0x2dc <malloc+0x4e>
 2c0:	82 81       	ldd	r24, Z+2	; 0x02
 2c2:	93 81       	ldd	r25, Z+3	; 0x03
 2c4:	10 97       	sbiw	r26, 0x00	; 0
 2c6:	29 f0       	breq	.+10     	; 0x2d2 <malloc+0x44>
 2c8:	13 96       	adiw	r26, 0x03	; 3
 2ca:	9c 93       	st	X, r25
 2cc:	8e 93       	st	-X, r24
 2ce:	12 97       	sbiw	r26, 0x02	; 2
 2d0:	2c c0       	rjmp	.+88     	; 0x32a <malloc+0x9c>
 2d2:	90 93 0b 02 	sts	0x020B, r25
 2d6:	80 93 0a 02 	sts	0x020A, r24
 2da:	27 c0       	rjmp	.+78     	; 0x32a <malloc+0x9c>
 2dc:	21 15       	cp	r18, r1
 2de:	31 05       	cpc	r19, r1
 2e0:	31 f0       	breq	.+12     	; 0x2ee <malloc+0x60>
 2e2:	42 17       	cp	r20, r18
 2e4:	53 07       	cpc	r21, r19
 2e6:	18 f0       	brcs	.+6      	; 0x2ee <malloc+0x60>
 2e8:	a9 01       	movw	r20, r18
 2ea:	db 01       	movw	r26, r22
 2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <malloc+0x62>
 2ee:	ef 01       	movw	r28, r30
 2f0:	9a 01       	movw	r18, r20
 2f2:	bd 01       	movw	r22, r26
 2f4:	df 01       	movw	r26, r30
 2f6:	02 80       	ldd	r0, Z+2	; 0x02
 2f8:	f3 81       	ldd	r31, Z+3	; 0x03
 2fa:	e0 2d       	mov	r30, r0
 2fc:	d7 cf       	rjmp	.-82     	; 0x2ac <malloc+0x1e>
 2fe:	21 15       	cp	r18, r1
 300:	31 05       	cpc	r19, r1
 302:	f9 f0       	breq	.+62     	; 0x342 <malloc+0xb4>
 304:	28 1b       	sub	r18, r24
 306:	39 0b       	sbc	r19, r25
 308:	24 30       	cpi	r18, 0x04	; 4
 30a:	31 05       	cpc	r19, r1
 30c:	80 f4       	brcc	.+32     	; 0x32e <malloc+0xa0>
 30e:	8a 81       	ldd	r24, Y+2	; 0x02
 310:	9b 81       	ldd	r25, Y+3	; 0x03
 312:	61 15       	cp	r22, r1
 314:	71 05       	cpc	r23, r1
 316:	21 f0       	breq	.+8      	; 0x320 <malloc+0x92>
 318:	fb 01       	movw	r30, r22
 31a:	93 83       	std	Z+3, r25	; 0x03
 31c:	82 83       	std	Z+2, r24	; 0x02
 31e:	04 c0       	rjmp	.+8      	; 0x328 <malloc+0x9a>
 320:	90 93 0b 02 	sts	0x020B, r25
 324:	80 93 0a 02 	sts	0x020A, r24
 328:	fe 01       	movw	r30, r28
 32a:	32 96       	adiw	r30, 0x02	; 2
 32c:	44 c0       	rjmp	.+136    	; 0x3b6 <malloc+0x128>
 32e:	fe 01       	movw	r30, r28
 330:	e2 0f       	add	r30, r18
 332:	f3 1f       	adc	r31, r19
 334:	81 93       	st	Z+, r24
 336:	91 93       	st	Z+, r25
 338:	22 50       	subi	r18, 0x02	; 2
 33a:	31 09       	sbc	r19, r1
 33c:	39 83       	std	Y+1, r19	; 0x01
 33e:	28 83       	st	Y, r18
 340:	3a c0       	rjmp	.+116    	; 0x3b6 <malloc+0x128>
 342:	20 91 08 02 	lds	r18, 0x0208
 346:	30 91 09 02 	lds	r19, 0x0209
 34a:	23 2b       	or	r18, r19
 34c:	41 f4       	brne	.+16     	; 0x35e <malloc+0xd0>
 34e:	20 91 02 02 	lds	r18, 0x0202
 352:	30 91 03 02 	lds	r19, 0x0203
 356:	30 93 09 02 	sts	0x0209, r19
 35a:	20 93 08 02 	sts	0x0208, r18
 35e:	20 91 00 02 	lds	r18, 0x0200
 362:	30 91 01 02 	lds	r19, 0x0201
 366:	21 15       	cp	r18, r1
 368:	31 05       	cpc	r19, r1
 36a:	41 f4       	brne	.+16     	; 0x37c <malloc+0xee>
 36c:	2d b7       	in	r18, 0x3d	; 61
 36e:	3e b7       	in	r19, 0x3e	; 62
 370:	40 91 04 02 	lds	r20, 0x0204
 374:	50 91 05 02 	lds	r21, 0x0205
 378:	24 1b       	sub	r18, r20
 37a:	35 0b       	sbc	r19, r21
 37c:	e0 91 08 02 	lds	r30, 0x0208
 380:	f0 91 09 02 	lds	r31, 0x0209
 384:	e2 17       	cp	r30, r18
 386:	f3 07       	cpc	r31, r19
 388:	a0 f4       	brcc	.+40     	; 0x3b2 <malloc+0x124>
 38a:	2e 1b       	sub	r18, r30
 38c:	3f 0b       	sbc	r19, r31
 38e:	28 17       	cp	r18, r24
 390:	39 07       	cpc	r19, r25
 392:	78 f0       	brcs	.+30     	; 0x3b2 <malloc+0x124>
 394:	ac 01       	movw	r20, r24
 396:	4e 5f       	subi	r20, 0xFE	; 254
 398:	5f 4f       	sbci	r21, 0xFF	; 255
 39a:	24 17       	cp	r18, r20
 39c:	35 07       	cpc	r19, r21
 39e:	48 f0       	brcs	.+18     	; 0x3b2 <malloc+0x124>
 3a0:	4e 0f       	add	r20, r30
 3a2:	5f 1f       	adc	r21, r31
 3a4:	50 93 09 02 	sts	0x0209, r21
 3a8:	40 93 08 02 	sts	0x0208, r20
 3ac:	81 93       	st	Z+, r24
 3ae:	91 93       	st	Z+, r25
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <malloc+0x128>
 3b2:	e0 e0       	ldi	r30, 0x00	; 0
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	cf 01       	movw	r24, r30
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <free>:
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	00 97       	sbiw	r24, 0x00	; 0
 3c4:	09 f4       	brne	.+2      	; 0x3c8 <free+0xa>
 3c6:	87 c0       	rjmp	.+270    	; 0x4d6 <free+0x118>
 3c8:	fc 01       	movw	r30, r24
 3ca:	32 97       	sbiw	r30, 0x02	; 2
 3cc:	13 82       	std	Z+3, r1	; 0x03
 3ce:	12 82       	std	Z+2, r1	; 0x02
 3d0:	c0 91 0a 02 	lds	r28, 0x020A
 3d4:	d0 91 0b 02 	lds	r29, 0x020B
 3d8:	20 97       	sbiw	r28, 0x00	; 0
 3da:	81 f4       	brne	.+32     	; 0x3fc <free+0x3e>
 3dc:	20 81       	ld	r18, Z
 3de:	31 81       	ldd	r19, Z+1	; 0x01
 3e0:	28 0f       	add	r18, r24
 3e2:	39 1f       	adc	r19, r25
 3e4:	80 91 08 02 	lds	r24, 0x0208
 3e8:	90 91 09 02 	lds	r25, 0x0209
 3ec:	82 17       	cp	r24, r18
 3ee:	93 07       	cpc	r25, r19
 3f0:	79 f5       	brne	.+94     	; 0x450 <free+0x92>
 3f2:	f0 93 09 02 	sts	0x0209, r31
 3f6:	e0 93 08 02 	sts	0x0208, r30
 3fa:	6d c0       	rjmp	.+218    	; 0x4d6 <free+0x118>
 3fc:	de 01       	movw	r26, r28
 3fe:	20 e0       	ldi	r18, 0x00	; 0
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	ae 17       	cp	r26, r30
 404:	bf 07       	cpc	r27, r31
 406:	50 f4       	brcc	.+20     	; 0x41c <free+0x5e>
 408:	12 96       	adiw	r26, 0x02	; 2
 40a:	4d 91       	ld	r20, X+
 40c:	5c 91       	ld	r21, X
 40e:	13 97       	sbiw	r26, 0x03	; 3
 410:	9d 01       	movw	r18, r26
 412:	41 15       	cp	r20, r1
 414:	51 05       	cpc	r21, r1
 416:	09 f1       	breq	.+66     	; 0x45a <free+0x9c>
 418:	da 01       	movw	r26, r20
 41a:	f3 cf       	rjmp	.-26     	; 0x402 <free+0x44>
 41c:	b3 83       	std	Z+3, r27	; 0x03
 41e:	a2 83       	std	Z+2, r26	; 0x02
 420:	40 81       	ld	r20, Z
 422:	51 81       	ldd	r21, Z+1	; 0x01
 424:	84 0f       	add	r24, r20
 426:	95 1f       	adc	r25, r21
 428:	8a 17       	cp	r24, r26
 42a:	9b 07       	cpc	r25, r27
 42c:	71 f4       	brne	.+28     	; 0x44a <free+0x8c>
 42e:	8d 91       	ld	r24, X+
 430:	9c 91       	ld	r25, X
 432:	11 97       	sbiw	r26, 0x01	; 1
 434:	84 0f       	add	r24, r20
 436:	95 1f       	adc	r25, r21
 438:	02 96       	adiw	r24, 0x02	; 2
 43a:	91 83       	std	Z+1, r25	; 0x01
 43c:	80 83       	st	Z, r24
 43e:	12 96       	adiw	r26, 0x02	; 2
 440:	8d 91       	ld	r24, X+
 442:	9c 91       	ld	r25, X
 444:	13 97       	sbiw	r26, 0x03	; 3
 446:	93 83       	std	Z+3, r25	; 0x03
 448:	82 83       	std	Z+2, r24	; 0x02
 44a:	21 15       	cp	r18, r1
 44c:	31 05       	cpc	r19, r1
 44e:	29 f4       	brne	.+10     	; 0x45a <free+0x9c>
 450:	f0 93 0b 02 	sts	0x020B, r31
 454:	e0 93 0a 02 	sts	0x020A, r30
 458:	3e c0       	rjmp	.+124    	; 0x4d6 <free+0x118>
 45a:	d9 01       	movw	r26, r18
 45c:	13 96       	adiw	r26, 0x03	; 3
 45e:	fc 93       	st	X, r31
 460:	ee 93       	st	-X, r30
 462:	12 97       	sbiw	r26, 0x02	; 2
 464:	4d 91       	ld	r20, X+
 466:	5d 91       	ld	r21, X+
 468:	a4 0f       	add	r26, r20
 46a:	b5 1f       	adc	r27, r21
 46c:	ea 17       	cp	r30, r26
 46e:	fb 07       	cpc	r31, r27
 470:	79 f4       	brne	.+30     	; 0x490 <free+0xd2>
 472:	80 81       	ld	r24, Z
 474:	91 81       	ldd	r25, Z+1	; 0x01
 476:	84 0f       	add	r24, r20
 478:	95 1f       	adc	r25, r21
 47a:	02 96       	adiw	r24, 0x02	; 2
 47c:	d9 01       	movw	r26, r18
 47e:	11 96       	adiw	r26, 0x01	; 1
 480:	9c 93       	st	X, r25
 482:	8e 93       	st	-X, r24
 484:	82 81       	ldd	r24, Z+2	; 0x02
 486:	93 81       	ldd	r25, Z+3	; 0x03
 488:	13 96       	adiw	r26, 0x03	; 3
 48a:	9c 93       	st	X, r25
 48c:	8e 93       	st	-X, r24
 48e:	12 97       	sbiw	r26, 0x02	; 2
 490:	e0 e0       	ldi	r30, 0x00	; 0
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	8a 81       	ldd	r24, Y+2	; 0x02
 496:	9b 81       	ldd	r25, Y+3	; 0x03
 498:	00 97       	sbiw	r24, 0x00	; 0
 49a:	19 f0       	breq	.+6      	; 0x4a2 <free+0xe4>
 49c:	fe 01       	movw	r30, r28
 49e:	ec 01       	movw	r28, r24
 4a0:	f9 cf       	rjmp	.-14     	; 0x494 <free+0xd6>
 4a2:	ce 01       	movw	r24, r28
 4a4:	02 96       	adiw	r24, 0x02	; 2
 4a6:	28 81       	ld	r18, Y
 4a8:	39 81       	ldd	r19, Y+1	; 0x01
 4aa:	82 0f       	add	r24, r18
 4ac:	93 1f       	adc	r25, r19
 4ae:	20 91 08 02 	lds	r18, 0x0208
 4b2:	30 91 09 02 	lds	r19, 0x0209
 4b6:	28 17       	cp	r18, r24
 4b8:	39 07       	cpc	r19, r25
 4ba:	69 f4       	brne	.+26     	; 0x4d6 <free+0x118>
 4bc:	30 97       	sbiw	r30, 0x00	; 0
 4be:	29 f4       	brne	.+10     	; 0x4ca <free+0x10c>
 4c0:	10 92 0b 02 	sts	0x020B, r1
 4c4:	10 92 0a 02 	sts	0x020A, r1
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <free+0x110>
 4ca:	13 82       	std	Z+3, r1	; 0x03
 4cc:	12 82       	std	Z+2, r1	; 0x02
 4ce:	d0 93 09 02 	sts	0x0209, r29
 4d2:	c0 93 08 02 	sts	0x0208, r28
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <fdevopen>:
 4dc:	0f 93       	push	r16
 4de:	1f 93       	push	r17
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	ec 01       	movw	r28, r24
 4e6:	8b 01       	movw	r16, r22
 4e8:	00 97       	sbiw	r24, 0x00	; 0
 4ea:	31 f4       	brne	.+12     	; 0x4f8 <fdevopen+0x1c>
 4ec:	61 15       	cp	r22, r1
 4ee:	71 05       	cpc	r23, r1
 4f0:	19 f4       	brne	.+6      	; 0x4f8 <fdevopen+0x1c>
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	37 c0       	rjmp	.+110    	; 0x566 <fdevopen+0x8a>
 4f8:	6e e0       	ldi	r22, 0x0E	; 14
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	37 d0       	rcall	.+110    	; 0x570 <calloc>
 502:	fc 01       	movw	r30, r24
 504:	00 97       	sbiw	r24, 0x00	; 0
 506:	a9 f3       	breq	.-22     	; 0x4f2 <fdevopen+0x16>
 508:	80 e8       	ldi	r24, 0x80	; 128
 50a:	83 83       	std	Z+3, r24	; 0x03
 50c:	01 15       	cp	r16, r1
 50e:	11 05       	cpc	r17, r1
 510:	71 f0       	breq	.+28     	; 0x52e <fdevopen+0x52>
 512:	13 87       	std	Z+11, r17	; 0x0b
 514:	02 87       	std	Z+10, r16	; 0x0a
 516:	81 e8       	ldi	r24, 0x81	; 129
 518:	83 83       	std	Z+3, r24	; 0x03
 51a:	80 91 0c 02 	lds	r24, 0x020C
 51e:	90 91 0d 02 	lds	r25, 0x020D
 522:	89 2b       	or	r24, r25
 524:	21 f4       	brne	.+8      	; 0x52e <fdevopen+0x52>
 526:	f0 93 0d 02 	sts	0x020D, r31
 52a:	e0 93 0c 02 	sts	0x020C, r30
 52e:	20 97       	sbiw	r28, 0x00	; 0
 530:	c9 f0       	breq	.+50     	; 0x564 <fdevopen+0x88>
 532:	d1 87       	std	Z+9, r29	; 0x09
 534:	c0 87       	std	Z+8, r28	; 0x08
 536:	83 81       	ldd	r24, Z+3	; 0x03
 538:	82 60       	ori	r24, 0x02	; 2
 53a:	83 83       	std	Z+3, r24	; 0x03
 53c:	80 91 0e 02 	lds	r24, 0x020E
 540:	90 91 0f 02 	lds	r25, 0x020F
 544:	89 2b       	or	r24, r25
 546:	71 f4       	brne	.+28     	; 0x564 <fdevopen+0x88>
 548:	f0 93 0f 02 	sts	0x020F, r31
 54c:	e0 93 0e 02 	sts	0x020E, r30
 550:	80 91 10 02 	lds	r24, 0x0210
 554:	90 91 11 02 	lds	r25, 0x0211
 558:	89 2b       	or	r24, r25
 55a:	21 f4       	brne	.+8      	; 0x564 <fdevopen+0x88>
 55c:	f0 93 11 02 	sts	0x0211, r31
 560:	e0 93 10 02 	sts	0x0210, r30
 564:	cf 01       	movw	r24, r30
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	1f 91       	pop	r17
 56c:	0f 91       	pop	r16
 56e:	08 95       	ret

00000570 <calloc>:
 570:	0f 93       	push	r16
 572:	1f 93       	push	r17
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	86 9f       	mul	r24, r22
 57a:	80 01       	movw	r16, r0
 57c:	87 9f       	mul	r24, r23
 57e:	10 0d       	add	r17, r0
 580:	96 9f       	mul	r25, r22
 582:	10 0d       	add	r17, r0
 584:	11 24       	eor	r1, r1
 586:	c8 01       	movw	r24, r16
 588:	82 de       	rcall	.-764    	; 0x28e <malloc>
 58a:	ec 01       	movw	r28, r24
 58c:	00 97       	sbiw	r24, 0x00	; 0
 58e:	21 f0       	breq	.+8      	; 0x598 <calloc+0x28>
 590:	a8 01       	movw	r20, r16
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	06 d0       	rcall	.+12     	; 0x5a4 <memset>
 598:	ce 01       	movw	r24, r28
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	08 95       	ret

000005a4 <memset>:
 5a4:	dc 01       	movw	r26, r24
 5a6:	01 c0       	rjmp	.+2      	; 0x5aa <memset+0x6>
 5a8:	6d 93       	st	X+, r22
 5aa:	41 50       	subi	r20, 0x01	; 1
 5ac:	50 40       	sbci	r21, 0x00	; 0
 5ae:	e0 f7       	brcc	.-8      	; 0x5a8 <memset+0x4>
 5b0:	08 95       	ret

000005b2 <_exit>:
 5b2:	f8 94       	cli

000005b4 <__stop_program>:
 5b4:	ff cf       	rjmp	.-2      	; 0x5b4 <__stop_program>
