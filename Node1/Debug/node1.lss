
node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000c20  00000cb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800120  00800120  00000cd4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000210  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000021b2  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bde  00000000  00000000  000030f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bd1  00000000  00000000  00003cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000518  00000000  00000000  000048a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ab  00000000  00000000  00004dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001032  00000000  00000000  00005367  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000230  00000000  00000000  00006399  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "define.h"

void write_c(unsigned char out_com)
{
	volatile char *OLEDc = (char*)OLED_COMMAND_MEMORY_START;
	*OLEDc = out_com;
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
		uint8_t some_value = rand(); 
		ext_ram[i] = some_value; uint8_t retreived_value = ext_ram[i]; 
		
		if (retreived_value != some_value) 
		{ 
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value); 
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
			write_errors++; 
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
	// rand() stores some internal state, so calling this function in a loop will 
	// yield different seeds each time (unless srand() is called before this function) 
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored srand(seed); 
	
	for (uint16_t i = 0; i < ext_ram_size; i++) 
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
			write_errors++; 
		} 
	}
	
					// Retrieval phase: Check that no values were changed during or after the write phase 
	srand(seed);	// reset the PRNG to the state it had before the write phase 
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
	
	for (uint16_t i = 0; i < ext_ram_size; i++) 
  82:	e0 e2       	ldi	r30, 0x20	; 32
  84:	fc e0       	ldi	r31, 0x0C	; 12
{ 
	MCUCR |= (1 << SRE);
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM 
	uint16_t ext_ram_size = 0x800; 
	uint16_t write_errors = 0; 
	uint16_t retrieval_errors = 0;
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
		uint8_t some_value = rand(); 
		uint8_t retreived_value = ext_ram[i]; 
		
		if (retreived_value != some_value) 
		{ 
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value); 
  8a:	0d 92       	st	X+, r0
  8c:	a0 32       	cpi	r26, 0x20	; 32
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 e2       	ldi	r26, 0x20	; 32
					// Retrieval phase: Check that no values were changed during or after the write phase 
	srand(seed);	// reset the PRNG to the state it had before the write phase 
	
	for (uint16_t i = 0; i < ext_ram_size; i++) 
	{ 
		uint8_t some_value = rand(); 
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ac 32       	cpi	r26, 0x2C	; 44
		uint8_t retreived_value = ext_ram[i]; 
  9e:	b2 07       	cpc	r27, r18
		
		if (retreived_value != some_value) 
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 36 01 	call	0x26c	; 0x26c <main>
		{ 
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value); 
  a6:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <read_adc>:
  ae:	80 93 00 14 	sts	0x1400, r24
  b2:	86 e6       	ldi	r24, 0x66	; 102
  b4:	92 e0       	ldi	r25, 0x02	; 2
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <read_adc+0x8>
			retrieval_errors++; 
  ba:	00 00       	nop
  bc:	80 91 00 14 	lds	r24, 0x1400
  c0:	08 95       	ret

000000c2 <CAN_init>:
  c2:	0e 94 40 01 	call	0x280	; 0x280 <MCP_reset>
  c6:	60 e8       	ldi	r22, 0x80	; 128
  c8:	8f e0       	ldi	r24, 0x0F	; 15
  ca:	0e 94 4f 01 	call	0x29e	; 0x29e <MCP_write>
  ce:	63 e0       	ldi	r22, 0x03	; 3
	}
	
					// Retrieval phase: Check that no values were changed during or after the write phase 
	srand(seed);	// reset the PRNG to the state it had before the write phase 
	
	for (uint16_t i = 0; i < ext_ram_size; i++) 
  d0:	8b e2       	ldi	r24, 0x2B	; 43
  d2:	0e 94 4f 01 	call	0x29e	; 0x29e <MCP_write>
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	8c e2       	ldi	r24, 0x2C	; 44
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value); 
			retrieval_errors++; 
		} 
	} 
	
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors); 
  da:	0e 94 4f 01 	call	0x29e	; 0x29e <MCP_write>
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	8d e2       	ldi	r24, 0x2D	; 45
  e2:	0e 94 4f 01 	call	0x29e	; 0x29e <MCP_write>
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	8c e0       	ldi	r24, 0x0C	; 12
  ea:	0e 94 4f 01 	call	0x29e	; 0x29e <MCP_write>
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	8d e0       	ldi	r24, 0x0D	; 13
  f2:	0e 94 4f 01 	call	0x29e	; 0x29e <MCP_write>
  f6:	60 e6       	ldi	r22, 0x60	; 96
  f8:	80 e6       	ldi	r24, 0x60	; 96
  fa:	0e 94 4f 01 	call	0x29e	; 0x29e <MCP_write>
  fe:	60 e6       	ldi	r22, 0x60	; 96
 100:	80 e7       	ldi	r24, 0x70	; 112
 102:	0e 94 4f 01 	call	0x29e	; 0x29e <MCP_write>
 106:	40 e0       	ldi	r20, 0x00	; 0
 108:	60 ee       	ldi	r22, 0xE0	; 224
 10a:	8f e0       	ldi	r24, 0x0F	; 15
		
		MCP_write(MCP_RXB0CTRL, 0x60);		// Receive buffer 0 control (turn mask/filters off, receive any message) 
		MCP_write(MCP_RXB1CTRL, 0x60);		// Receive buffer 1 control (turn mask/filters off, receive any message)

		//MCP_write(MCP_CANCTRL, 0x44);		// Enable can controller
		MCP_bit_mod(MCP_CANCTRL,MODE_MASK,MODE_NORMAL);
 10c:	0e 94 66 01 	call	0x2cc	; 0x2cc <MCP_bit_mod>
 110:	08 95       	ret

00000112 <CAN_message_send>:

	
}

void CAN_message_send(msg can_tx)
{
 112:	cf 92       	push	r12
 114:	df 92       	push	r13
 116:	ef 92       	push	r14
 118:	ff 92       	push	r15
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	2b 97       	sbiw	r28, 0x0b	; 11
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	f8 94       	cli
 12c:	de bf       	out	0x3e, r29	; 62
 12e:	0f be       	out	0x3f, r0	; 63
 130:	cd bf       	out	0x3d, r28	; 61
 132:	e9 82       	std	Y+1, r14	; 0x01
 134:	fa 82       	std	Y+2, r15	; 0x02
 136:	0b 83       	std	Y+3, r16	; 0x03
 138:	1c 83       	std	Y+4, r17	; 0x04
 13a:	2d 83       	std	Y+5, r18	; 0x05
 13c:	3e 83       	std	Y+6, r19	; 0x06
 13e:	4f 83       	std	Y+7, r20	; 0x07
 140:	58 87       	std	Y+8, r21	; 0x08
 142:	69 87       	std	Y+9, r22	; 0x09
 144:	7a 87       	std	Y+10, r23	; 0x0a
 146:	8b 87       	std	Y+11, r24	; 0x0b
	//MCP_write(MCP_TXB0CTRL, 0x03);				
	printf("\nCan ID sent: %02x \n", can_tx.id);
 148:	ff 92       	push	r15
 14a:	ef 92       	push	r14
 14c:	8a e0       	ldi	r24, 0x0A	; 10
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	9f 93       	push	r25
 152:	8f 93       	push	r24
 154:	0e 94 01 02 	call	0x402	; 0x402 <printf>

	MCP_write(MCP_TXB0SIDH, can_tx.id);
 158:	6e 2d       	mov	r22, r14
 15a:	81 e3       	ldi	r24, 0x31	; 49
 15c:	0e 94 4f 01 	call	0x29e	; 0x29e <MCP_write>
	MCP_write(MCP_TXB0SIDH, can_tx.id);
 160:	6e 2d       	mov	r22, r14
 162:	81 e3       	ldi	r24, 0x31	; 49
 164:	0e 94 4f 01 	call	0x29e	; 0x29e <MCP_write>

	//MCP_write(MCP_TXB0SIDL, can_tx.id);

	MCP_write(MCP_TXB0DLC, (can_tx.length));
 168:	60 2f       	mov	r22, r16
 16a:	85 e3       	ldi	r24, 0x35	; 53
 16c:	0e 94 4f 01 	call	0x29e	; 0x29e <MCP_write>
	for(int i = 0; i < can_tx.length; i++)
 170:	c0 2e       	mov	r12, r16
 172:	d1 2c       	mov	r13, r1
 174:	0f 90       	pop	r0
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	1c 14       	cp	r1, r12
 17e:	1d 04       	cpc	r1, r13
 180:	94 f4       	brge	.+36     	; 0x1a6 <CAN_message_send+0x94>
 182:	7e 01       	movw	r14, r28
 184:	84 e0       	ldi	r24, 0x04	; 4
 186:	e8 0e       	add	r14, r24
 188:	f1 1c       	adc	r15, r1
 18a:	00 e0       	ldi	r16, 0x00	; 0
 18c:	10 e0       	ldi	r17, 0x00	; 0
	{
		MCP_write(MCP_TXB0D0 + i, can_tx.data[i]);
 18e:	f7 01       	movw	r30, r14
 190:	61 91       	ld	r22, Z+
 192:	7f 01       	movw	r14, r30
 194:	86 e3       	ldi	r24, 0x36	; 54
 196:	80 0f       	add	r24, r16
 198:	0e 94 4f 01 	call	0x29e	; 0x29e <MCP_write>
	MCP_write(MCP_TXB0SIDH, can_tx.id);

	//MCP_write(MCP_TXB0SIDL, can_tx.id);

	MCP_write(MCP_TXB0DLC, (can_tx.length));
	for(int i = 0; i < can_tx.length; i++)
 19c:	0f 5f       	subi	r16, 0xFF	; 255
 19e:	1f 4f       	sbci	r17, 0xFF	; 255
 1a0:	0c 15       	cp	r16, r12
 1a2:	1d 05       	cpc	r17, r13
 1a4:	a4 f3       	brlt	.-24     	; 0x18e <CAN_message_send+0x7c>
	{
		MCP_write(MCP_TXB0D0 + i, can_tx.data[i]);
	}
	MCP_rts(MCP_RTS_TX0);
 1a6:	81 e8       	ldi	r24, 0x81	; 129
 1a8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <MCP_rts>
}
 1ac:	2b 96       	adiw	r28, 0x0b	; 11
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	de bf       	out	0x3e, r29	; 62
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	cd bf       	out	0x3d, r28	; 61
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	ff 90       	pop	r15
 1c2:	ef 90       	pop	r14
 1c4:	df 90       	pop	r13
 1c6:	cf 90       	pop	r12
 1c8:	08 95       	ret

000001ca <test_CAN_joystick>:
				sub_menu = 0;
				break;
			}
		for (k = 0; k < 3; k++)
		{
			for (j = 0; j < 11; j++)
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	2b 97       	sbiw	r28, 0x0b	; 11
	}
	
}

void oled_menu()
{
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	de bf       	out	0x3e, r29	; 62
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	cd bf       	out	0x3d, r28	; 61
 1de:	0e 94 80 01 	call	0x300	; 0x300 <ram_init>
 1e2:	0e 94 48 01 	call	0x290	; 0x290 <MCP_init>
 1e6:	0e 94 61 00 	call	0xc2	; 0xc2 <CAN_init>
						oled_set_column(i+(j*5));
						write_d(pgm_read_byte(&font5[fotball[k][j] - ' '][i]));
					}
				}
			}
			oled_set_page(k+1);
 1ea:	87 b3       	in	r24, 0x17	; 23
 1ec:	88 7f       	andi	r24, 0xF8	; 248
 1ee:	87 bb       	out	0x17, r24	; 23
 1f0:	0f 2e       	mov	r0, r31
 1f2:	f0 e7       	ldi	r31, 0x70	; 112
 1f4:	af 2e       	mov	r10, r31
 1f6:	f0 2d       	mov	r31, r0
 1f8:	71 2c       	mov	r7, r1
 1fa:	0f 2e       	mov	r0, r31
		if(x_volt < 60)
			{
				sub_menu = 0;
				break;
			}
		for (k = 0; k < 3; k++)
 1fc:	f7 e0       	ldi	r31, 0x07	; 7
 1fe:	bf 2e       	mov	r11, r31
 200:	f0 2d       	mov	r31, r0
 202:	88 24       	eor	r8, r8
 204:	83 94       	inc	r8
 206:	85 e0       	ldi	r24, 0x05	; 5
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 20e:	18 2f       	mov	r17, r24
	}
	
}

void oled_menu()
{
 210:	84 e0       	ldi	r24, 0x04	; 4
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 218:	c8 2e       	mov	r12, r24
 21a:	87 e0       	ldi	r24, 0x07	; 7
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 222:	d8 2e       	mov	r13, r24
 224:	86 e0       	ldi	r24, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 22c:	46 b3       	in	r20, 0x16	; 22
 22e:	56 b3       	in	r21, 0x16	; 22
 230:	96 b2       	in	r9, 0x16	; 22
 232:	92 fa       	bst	r9, 2
 234:	99 24       	eor	r9, r9
 236:	90 f8       	bld	r9, 0
			
	int count_menu = 4;
	int select_menu = 1;
	int sub_menu = 0;
	while(1){
	while(sub_menu == 1)
 238:	ea 2c       	mov	r14, r10
 23a:	a9 82       	std	Y+1, r10	; 0x01
 23c:	7a 82       	std	Y+2, r7	; 0x02
 23e:	bb 82       	std	Y+3, r11	; 0x03
 240:	1c 83       	std	Y+4, r17	; 0x04
			oled_set_page(k+1);
		}
		_delay_ms(delay);
	}
	
	while (sub_menu == 0)
 242:	cd 82       	std	Y+5, r12	; 0x05
 244:	30 2f       	mov	r19, r16
 246:	38 25       	eor	r19, r8
	{
		int delay = 500; //delay in milliseconds
		oled_set_column(0);
 248:	3e 83       	std	Y+6, r19	; 0x06
 24a:	41 70       	andi	r20, 0x01	; 1
 24c:	4f 83       	std	Y+7, r20	; 0x07
 24e:	56 95       	lsr	r21
 250:	51 70       	andi	r21, 0x01	; 1
 252:	58 87       	std	Y+8, r21	; 0x08
 254:	89 87       	std	Y+9, r24	; 0x09
 256:	da 86       	std	Y+10, r13	; 0x0a
 258:	f7 2c       	mov	r15, r7
 25a:	0b 2d       	mov	r16, r11
 25c:	2c 2d       	mov	r18, r12
 25e:	68 2f       	mov	r22, r24
		oled_set_page(0);
 260:	7d 2d       	mov	r23, r13
 262:	8b 85       	ldd	r24, Y+11	; 0x0b
 264:	0e 94 89 00 	call	0x112	; 0x112 <CAN_message_send>
 268:	09 2d       	mov	r16, r9
 26a:	cd cf       	rjmp	.-102    	; 0x206 <test_CAN_joystick+0x3c>

0000026c <main>:
 26c:	8f e1       	ldi	r24, 0x1F	; 31
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 a7 01 	call	0x34e	; 0x34e <USART_Init>
 274:	0e 94 48 01 	call	0x290	; 0x290 <MCP_init>
		int i,j,k;
		
		unsigned int x_volt = read_adc(ADC_CHANNEL_JOY_X);
 278:	0e 94 61 00 	call	0xc2	; 0xc2 <CAN_init>
 27c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <test_CAN_joystick>

00000280 <MCP_reset>:
	return 0;
}

int MCP_reset(void)
{
	PORTB &= ~(1 << SS);
 280:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(MCP_RESET);
 282:	80 ec       	ldi	r24, 0xC0	; 192
 284:	0e 94 9b 01 	call	0x336	; 0x336 <SPI_MasterTransmit>
	
	PORTB |= (1 << SS);
 288:	c4 9a       	sbi	0x18, 4	; 24
	
	return 0;
}
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	08 95       	ret

00000290 <MCP_init>:
#include "SPI.h"
#include "MCP2515.h"

int MCP_init(void)
{
	SPI_MasterInit();
 290:	0e 94 93 01 	call	0x326	; 0x326 <SPI_MasterInit>
	MCP_reset();
 294:	0e 94 40 01 	call	0x280	; 0x280 <MCP_reset>
	
	return 0;
}
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	08 95       	ret

0000029e <MCP_write>:
	return data;

}

void MCP_write(char address, char data)
{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	d8 2f       	mov	r29, r24
 2a4:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << SS); 
 2a6:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(MCP_WRITE);
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	0e 94 9b 01 	call	0x336	; 0x336 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
 2ae:	8d 2f       	mov	r24, r29
 2b0:	0e 94 9b 01 	call	0x336	; 0x336 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
 2b4:	8c 2f       	mov	r24, r28
 2b6:	0e 94 9b 01 	call	0x336	; 0x336 <SPI_MasterTransmit>
	
	PORTB |= (1 << SS);
 2ba:	c4 9a       	sbi	0x18, 4	; 24
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <MCP_rts>:

void MCP_rts(char rts)
{
	PORTB &= ~(1 << SS);
 2c2:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(rts);
 2c4:	0e 94 9b 01 	call	0x336	; 0x336 <SPI_MasterTransmit>
	
	PORTB |= (1 << SS);
 2c8:	c4 9a       	sbi	0x18, 4	; 24
 2ca:	08 95       	ret

000002cc <MCP_bit_mod>:
	
	return status;
}

void MCP_bit_mod(char address, char mask, char data)
{
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	18 2f       	mov	r17, r24
 2d4:	d6 2f       	mov	r29, r22
 2d6:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << SS);
 2d8:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(MCP_BITMOD);
 2da:	85 e0       	ldi	r24, 0x05	; 5
 2dc:	0e 94 9b 01 	call	0x336	; 0x336 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
 2e0:	81 2f       	mov	r24, r17
 2e2:	0e 94 9b 01 	call	0x336	; 0x336 <SPI_MasterTransmit>
	SPI_MasterTransmit(mask);
 2e6:	8d 2f       	mov	r24, r29
 2e8:	0e 94 9b 01 	call	0x336	; 0x336 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
 2ec:	8c 2f       	mov	r24, r28
 2ee:	0e 94 9b 01 	call	0x336	; 0x336 <SPI_MasterTransmit>
	
	PORTB |= ~(1 << SS);
 2f2:	88 b3       	in	r24, 0x18	; 24
 2f4:	8f 6e       	ori	r24, 0xEF	; 239
 2f6:	88 bb       	out	0x18, r24	; 24
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	1f 91       	pop	r17
 2fe:	08 95       	ret

00000300 <ram_init>:
#include "define.h"

void ram_init(void)
{
	bit_set(MCUCR, SRE);
 300:	85 b7       	in	r24, 0x35	; 53
 302:	80 68       	ori	r24, 0x80	; 128
 304:	85 bf       	out	0x35, r24	; 53
	
	bit_set(SFIOR, XMM2);
 306:	80 b7       	in	r24, 0x30	; 48
 308:	80 62       	ori	r24, 0x20	; 32
 30a:	80 bf       	out	0x30, r24	; 48
	bit_clear(SFIOR, XMM1);
 30c:	80 b7       	in	r24, 0x30	; 48
 30e:	8f 7e       	andi	r24, 0xEF	; 239
 310:	80 bf       	out	0x30, r24	; 48
	bit_clear(SFIOR, XMM0);
 312:	80 b7       	in	r24, 0x30	; 48
 314:	87 7f       	andi	r24, 0xF7	; 247
 316:	80 bf       	out	0x30, r24	; 48

	bit_set(MCUCR, SRW11);
 318:	85 b7       	in	r24, 0x35	; 53
 31a:	82 60       	ori	r24, 0x02	; 2
 31c:	85 bf       	out	0x35, r24	; 53
	bit_clear(EMCUCR, SRW10);	
 31e:	86 b7       	in	r24, 0x36	; 54
 320:	8f 7b       	andi	r24, 0xBF	; 191
 322:	86 bf       	out	0x36, r24	; 54
 324:	08 95       	ret

00000326 <SPI_MasterInit>:
#define SCK PB7


void SPI_MasterInit(void)
{
	DDRB |= (1 << MOSI) | (1 << SS) | (1 << SCK);
 326:	87 b3       	in	r24, 0x17	; 23
 328:	80 6b       	ori	r24, 0xB0	; 176
 32a:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << MISO);
 32c:	be 98       	cbi	0x17, 6	; 23
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 32e:	8d b1       	in	r24, 0x0d	; 13
 330:	81 65       	ori	r24, 0x51	; 81
 332:	8d b9       	out	0x0d, r24	; 13
 334:	08 95       	ret

00000336 <SPI_MasterTransmit>:
}


void SPI_MasterTransmit(char cdata)
{
	SPDR = cdata;
 336:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
 338:	77 9b       	sbis	0x0e, 7	; 14
 33a:	fe cf       	rjmp	.-4      	; 0x338 <SPI_MasterTransmit+0x2>
}
 33c:	08 95       	ret

0000033e <USART_Transmit>:
			{
				for (i = 0; i < 5; i++)
				{
					if(select_menu==k)
					{
						oled_set_column(i+(j*5));
 33e:	5d 9b       	sbis	0x0b, 5	; 11
 340:	fe cf       	rjmp	.-4      	; 0x33e <USART_Transmit>
 342:	8c b9       	out	0x0c, r24	; 12
 344:	08 95       	ret

00000346 <USART_Receive>:
 346:	5f 9b       	sbis	0x0b, 7	; 11
						write_d(~pgm_read_byte(&font5[menu[k][j] - ' '][i]));
 348:	fe cf       	rjmp	.-4      	; 0x346 <USART_Receive>
 34a:	8c b1       	in	r24, 0x0c	; 12
 34c:	08 95       	ret

0000034e <USART_Init>:
 34e:	90 bd       	out	0x20, r25	; 32
 350:	89 b9       	out	0x09, r24	; 9
 352:	88 e1       	ldi	r24, 0x18	; 24
 354:	8a b9       	out	0x0a, r24	; 10
 356:	63 ea       	ldi	r22, 0xA3	; 163
 358:	71 e0       	ldi	r23, 0x01	; 1
 35a:	8f e9       	ldi	r24, 0x9F	; 159
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	0e 94 b6 01 	call	0x36c	; 0x36c <fdevopen>
 362:	90 93 21 01 	sts	0x0121, r25
 366:	80 93 20 01 	sts	0x0120, r24
 36a:	08 95       	ret

0000036c <fdevopen>:
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
					}
					else
					{
						oled_set_column(i+(j*5));
 372:	df 93       	push	r29
 374:	ec 01       	movw	r28, r24
 376:	8b 01       	movw	r16, r22
 378:	00 97       	sbiw	r24, 0x00	; 0
 37a:	31 f4       	brne	.+12     	; 0x388 <fdevopen+0x1c>
						write_d(pgm_read_byte(&font5[menu[k][j] - ' '][i]));
 37c:	61 15       	cp	r22, r1
 37e:	71 05       	cpc	r23, r1
 380:	19 f4       	brne	.+6      	; 0x388 <fdevopen+0x1c>
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	38 c0       	rjmp	.+112    	; 0x3f8 <fdevopen+0x8c>
 388:	6e e0       	ldi	r22, 0x0E	; 14
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 e7 03 	call	0x7ce	; 0x7ce <calloc>
 394:	fc 01       	movw	r30, r24
 396:	00 97       	sbiw	r24, 0x00	; 0
 398:	a1 f3       	breq	.-24     	; 0x382 <fdevopen+0x16>
 39a:	80 e8       	ldi	r24, 0x80	; 128
 39c:	83 83       	std	Z+3, r24	; 0x03
 39e:	01 15       	cp	r16, r1
		}
		for (k = 0; k < 5; k++)
		{
			for (j = 0; j < 13; j++)
			{
				for (i = 0; i < 5; i++)
 3a0:	11 05       	cpc	r17, r1
 3a2:	71 f0       	breq	.+28     	; 0x3c0 <fdevopen+0x54>
 3a4:	13 87       	std	Z+11, r17	; 0x0b
 3a6:	02 87       	std	Z+10, r16	; 0x0a
 3a8:	81 e8       	ldi	r24, 0x81	; 129
 3aa:	83 83       	std	Z+3, r24	; 0x03
 3ac:	80 91 22 01 	lds	r24, 0x0122
 3b0:	90 91 23 01 	lds	r25, 0x0123
 3b4:	89 2b       	or	r24, r25
			select_menu = 1;
			break;
		}
		for (k = 0; k < 5; k++)
		{
			for (j = 0; j < 13; j++)
 3b6:	21 f4       	brne	.+8      	; 0x3c0 <fdevopen+0x54>
 3b8:	f0 93 23 01 	sts	0x0123, r31
 3bc:	e0 93 22 01 	sts	0x0122, r30
 3c0:	20 97       	sbiw	r28, 0x00	; 0
 3c2:	c9 f0       	breq	.+50     	; 0x3f6 <fdevopen+0x8a>
 3c4:	d1 87       	std	Z+9, r29	; 0x09
 3c6:	c0 87       	std	Z+8, r28	; 0x08
		" Arsenal   ",
		" Man.Utd.  ",
	};
			
	int count_menu = 4;
	int select_menu = 1;
 3c8:	83 81       	ldd	r24, Z+3	; 0x03
 3ca:	82 60       	ori	r24, 0x02	; 2
 3cc:	83 83       	std	Z+3, r24	; 0x03
 3ce:	80 91 24 01 	lds	r24, 0x0124
 3d2:	90 91 25 01 	lds	r25, 0x0125
 3d6:	89 2b       	or	r24, r25
 3d8:	71 f4       	brne	.+28     	; 0x3f6 <fdevopen+0x8a>
 3da:	f0 93 25 01 	sts	0x0125, r31
						oled_set_column(i+(j*5));
						write_d(pgm_read_byte(&font5[menu[k][j] - ' '][i]));
					}
				}
			}			
			oled_set_page(k+1);
 3de:	e0 93 24 01 	sts	0x0124, r30
 3e2:	80 91 26 01 	lds	r24, 0x0126
 3e6:	90 91 27 01 	lds	r25, 0x0127
 3ea:	89 2b       	or	r24, r25
 3ec:	21 f4       	brne	.+8      	; 0x3f6 <fdevopen+0x8a>
 3ee:	f0 93 27 01 	sts	0x0127, r31
			sub_menu = 1;
			clear_oled();
			select_menu = 1;
			break;
		}
		for (k = 0; k < 5; k++)
 3f2:	e0 93 26 01 	sts	0x0126, r30
 3f6:	cf 01       	movw	r24, r30
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	0f 91       	pop	r16
 400:	08 95       	ret

00000402 <printf>:
 402:	a0 e0       	ldi	r26, 0x00	; 0
		" Arsenal   ",
		" Man.Utd.  ",
	};
			
	int count_menu = 4;
	int select_menu = 1;
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	e7 e0       	ldi	r30, 0x07	; 7
 408:	f2 e0       	ldi	r31, 0x02	; 2
 40a:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__prologue_saves__+0x20>
 40e:	fe 01       	movw	r30, r28
 410:	35 96       	adiw	r30, 0x05	; 5
 412:	61 91       	ld	r22, Z+
 414:	71 91       	ld	r23, Z+
 416:	af 01       	movw	r20, r30
 418:	80 91 24 01 	lds	r24, 0x0124
	
		if (y_volt < 125 && select_menu < count_menu-2)
		{
			select_menu++;
		}
		if (y_volt > 135 && select_menu > 1)
 41c:	90 91 25 01 	lds	r25, 0x0125
 420:	0e 94 15 02 	call	0x42a	; 0x42a <vfprintf>
 424:	e2 e0       	ldi	r30, 0x02	; 2
 426:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__epilogue_restores__+0x20>

0000042a <vfprintf>:
 42a:	ac e0       	ldi	r26, 0x0C	; 12
 42c:	b0 e0       	ldi	r27, 0x00	; 0
 42e:	eb e1       	ldi	r30, 0x1B	; 27
 430:	f2 e0       	ldi	r31, 0x02	; 2
 432:	0c 94 d7 05 	jmp	0xbae	; 0xbae <__prologue_saves__>
 436:	7c 01       	movw	r14, r24
 438:	6b 01       	movw	r12, r22
 43a:	8a 01       	movw	r16, r20
 43c:	fc 01       	movw	r30, r24
 43e:	17 82       	std	Z+7, r1	; 0x07
 440:	16 82       	std	Z+6, r1	; 0x06
 442:	83 81       	ldd	r24, Z+3	; 0x03
 444:	81 ff       	sbrs	r24, 1
 446:	bd c1       	rjmp	.+890    	; 0x7c2 <__stack+0x2c3>
 448:	ce 01       	movw	r24, r28
 44a:	01 96       	adiw	r24, 0x01	; 1
 44c:	4c 01       	movw	r8, r24
 44e:	f7 01       	movw	r30, r14
 450:	93 81       	ldd	r25, Z+3	; 0x03
 452:	f6 01       	movw	r30, r12
 454:	93 fd       	sbrc	r25, 3
 456:	85 91       	lpm	r24, Z+
 458:	93 ff       	sbrs	r25, 3
 45a:	81 91       	ld	r24, Z+
 45c:	6f 01       	movw	r12, r30
 45e:	88 23       	and	r24, r24
 460:	09 f4       	brne	.+2      	; 0x464 <vfprintf+0x3a>
 462:	ab c1       	rjmp	.+854    	; 0x7ba <__stack+0x2bb>
 464:	85 32       	cpi	r24, 0x25	; 37
 466:	39 f4       	brne	.+14     	; 0x476 <vfprintf+0x4c>
 468:	93 fd       	sbrc	r25, 3
 46a:	85 91       	lpm	r24, Z+
 46c:	93 ff       	sbrs	r25, 3
 46e:	81 91       	ld	r24, Z+
 470:	6f 01       	movw	r12, r30
 472:	85 32       	cpi	r24, 0x25	; 37
 474:	29 f4       	brne	.+10     	; 0x480 <vfprintf+0x56>
 476:	b7 01       	movw	r22, r14
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 47 05 	call	0xa8e	; 0xa8e <fputc>
 47e:	e7 cf       	rjmp	.-50     	; 0x44e <vfprintf+0x24>
 480:	51 2c       	mov	r5, r1
 482:	31 2c       	mov	r3, r1
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	20 32       	cpi	r18, 0x20	; 32
 488:	a0 f4       	brcc	.+40     	; 0x4b2 <vfprintf+0x88>
 48a:	8b 32       	cpi	r24, 0x2B	; 43
 48c:	69 f0       	breq	.+26     	; 0x4a8 <vfprintf+0x7e>
 48e:	30 f4       	brcc	.+12     	; 0x49c <vfprintf+0x72>
 490:	80 32       	cpi	r24, 0x20	; 32
 492:	59 f0       	breq	.+22     	; 0x4aa <vfprintf+0x80>
 494:	83 32       	cpi	r24, 0x23	; 35
 496:	69 f4       	brne	.+26     	; 0x4b2 <vfprintf+0x88>
 498:	20 61       	ori	r18, 0x10	; 16
 49a:	2c c0       	rjmp	.+88     	; 0x4f4 <vfprintf+0xca>
 49c:	8d 32       	cpi	r24, 0x2D	; 45
 49e:	39 f0       	breq	.+14     	; 0x4ae <vfprintf+0x84>
 4a0:	80 33       	cpi	r24, 0x30	; 48
 4a2:	39 f4       	brne	.+14     	; 0x4b2 <vfprintf+0x88>
 4a4:	21 60       	ori	r18, 0x01	; 1
 4a6:	26 c0       	rjmp	.+76     	; 0x4f4 <vfprintf+0xca>
 4a8:	22 60       	ori	r18, 0x02	; 2
 4aa:	24 60       	ori	r18, 0x04	; 4
 4ac:	23 c0       	rjmp	.+70     	; 0x4f4 <vfprintf+0xca>
 4ae:	28 60       	ori	r18, 0x08	; 8
 4b0:	21 c0       	rjmp	.+66     	; 0x4f4 <vfprintf+0xca>
 4b2:	27 fd       	sbrc	r18, 7
 4b4:	27 c0       	rjmp	.+78     	; 0x504 <__stack+0x5>
 4b6:	30 ed       	ldi	r19, 0xD0	; 208
 4b8:	38 0f       	add	r19, r24
 4ba:	3a 30       	cpi	r19, 0x0A	; 10
 4bc:	78 f4       	brcc	.+30     	; 0x4dc <vfprintf+0xb2>
 4be:	26 ff       	sbrs	r18, 6
 4c0:	06 c0       	rjmp	.+12     	; 0x4ce <vfprintf+0xa4>
 4c2:	fa e0       	ldi	r31, 0x0A	; 10
 4c4:	5f 9e       	mul	r5, r31
 4c6:	30 0d       	add	r19, r0
 4c8:	11 24       	eor	r1, r1
 4ca:	53 2e       	mov	r5, r19
 4cc:	13 c0       	rjmp	.+38     	; 0x4f4 <vfprintf+0xca>
 4ce:	8a e0       	ldi	r24, 0x0A	; 10
 4d0:	38 9e       	mul	r3, r24
 4d2:	30 0d       	add	r19, r0
 4d4:	11 24       	eor	r1, r1
 4d6:	33 2e       	mov	r3, r19
 4d8:	20 62       	ori	r18, 0x20	; 32
 4da:	0c c0       	rjmp	.+24     	; 0x4f4 <vfprintf+0xca>
 4dc:	8e 32       	cpi	r24, 0x2E	; 46
 4de:	21 f4       	brne	.+8      	; 0x4e8 <vfprintf+0xbe>
 4e0:	26 fd       	sbrc	r18, 6
 4e2:	6b c1       	rjmp	.+726    	; 0x7ba <__stack+0x2bb>
 4e4:	20 64       	ori	r18, 0x40	; 64
 4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <vfprintf+0xca>
 4e8:	8c 36       	cpi	r24, 0x6C	; 108
 4ea:	11 f4       	brne	.+4      	; 0x4f0 <vfprintf+0xc6>
 4ec:	20 68       	ori	r18, 0x80	; 128
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <vfprintf+0xca>
 4f0:	88 36       	cpi	r24, 0x68	; 104
 4f2:	41 f4       	brne	.+16     	; 0x504 <__stack+0x5>
 4f4:	f6 01       	movw	r30, r12
 4f6:	93 fd       	sbrc	r25, 3
 4f8:	85 91       	lpm	r24, Z+
 4fa:	93 ff       	sbrs	r25, 3
 4fc:	81 91       	ld	r24, Z+
 4fe:	6f 01       	movw	r12, r30
 500:	81 11       	cpse	r24, r1
 502:	c1 cf       	rjmp	.-126    	; 0x486 <vfprintf+0x5c>
 504:	98 2f       	mov	r25, r24
 506:	9f 7d       	andi	r25, 0xDF	; 223
 508:	95 54       	subi	r25, 0x45	; 69
 50a:	93 30       	cpi	r25, 0x03	; 3
 50c:	28 f4       	brcc	.+10     	; 0x518 <__stack+0x19>
 50e:	0c 5f       	subi	r16, 0xFC	; 252
 510:	1f 4f       	sbci	r17, 0xFF	; 255
 512:	ff e3       	ldi	r31, 0x3F	; 63
 514:	f9 83       	std	Y+1, r31	; 0x01
 516:	0d c0       	rjmp	.+26     	; 0x532 <__stack+0x33>
 518:	83 36       	cpi	r24, 0x63	; 99
 51a:	31 f0       	breq	.+12     	; 0x528 <__stack+0x29>
 51c:	83 37       	cpi	r24, 0x73	; 115
 51e:	71 f0       	breq	.+28     	; 0x53c <__stack+0x3d>
 520:	83 35       	cpi	r24, 0x53	; 83
 522:	09 f0       	breq	.+2      	; 0x526 <__stack+0x27>
 524:	5b c0       	rjmp	.+182    	; 0x5dc <__stack+0xdd>
 526:	22 c0       	rjmp	.+68     	; 0x56c <__stack+0x6d>
 528:	f8 01       	movw	r30, r16
 52a:	80 81       	ld	r24, Z
 52c:	89 83       	std	Y+1, r24	; 0x01
 52e:	0e 5f       	subi	r16, 0xFE	; 254
 530:	1f 4f       	sbci	r17, 0xFF	; 255
 532:	44 24       	eor	r4, r4
 534:	43 94       	inc	r4
 536:	51 2c       	mov	r5, r1
 538:	54 01       	movw	r10, r8
 53a:	15 c0       	rjmp	.+42     	; 0x566 <__stack+0x67>
 53c:	38 01       	movw	r6, r16
 53e:	f2 e0       	ldi	r31, 0x02	; 2
 540:	6f 0e       	add	r6, r31
 542:	71 1c       	adc	r7, r1
 544:	f8 01       	movw	r30, r16
 546:	a0 80       	ld	r10, Z
 548:	b1 80       	ldd	r11, Z+1	; 0x01
 54a:	26 ff       	sbrs	r18, 6
 54c:	03 c0       	rjmp	.+6      	; 0x554 <__stack+0x55>
 54e:	65 2d       	mov	r22, r5
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <__stack+0x59>
 554:	6f ef       	ldi	r22, 0xFF	; 255
 556:	7f ef       	ldi	r23, 0xFF	; 255
 558:	c5 01       	movw	r24, r10
 55a:	2c 87       	std	Y+12, r18	; 0x0c
 55c:	0e 94 3c 05 	call	0xa78	; 0xa78 <strnlen>
 560:	2c 01       	movw	r4, r24
 562:	83 01       	movw	r16, r6
 564:	2c 85       	ldd	r18, Y+12	; 0x0c
 566:	2f 77       	andi	r18, 0x7F	; 127
 568:	22 2e       	mov	r2, r18
 56a:	17 c0       	rjmp	.+46     	; 0x59a <__stack+0x9b>
 56c:	38 01       	movw	r6, r16
 56e:	f2 e0       	ldi	r31, 0x02	; 2
 570:	6f 0e       	add	r6, r31
 572:	71 1c       	adc	r7, r1
 574:	f8 01       	movw	r30, r16
 576:	a0 80       	ld	r10, Z
 578:	b1 80       	ldd	r11, Z+1	; 0x01
 57a:	26 ff       	sbrs	r18, 6
 57c:	03 c0       	rjmp	.+6      	; 0x584 <__stack+0x85>
 57e:	65 2d       	mov	r22, r5
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <__stack+0x89>
 584:	6f ef       	ldi	r22, 0xFF	; 255
 586:	7f ef       	ldi	r23, 0xFF	; 255
 588:	c5 01       	movw	r24, r10
 58a:	2c 87       	std	Y+12, r18	; 0x0c
 58c:	0e 94 2a 05 	call	0xa54	; 0xa54 <strnlen_P>
 590:	2c 01       	movw	r4, r24
 592:	2c 85       	ldd	r18, Y+12	; 0x0c
 594:	20 68       	ori	r18, 0x80	; 128
 596:	22 2e       	mov	r2, r18
 598:	83 01       	movw	r16, r6
 59a:	23 fc       	sbrc	r2, 3
 59c:	1b c0       	rjmp	.+54     	; 0x5d4 <__stack+0xd5>
 59e:	83 2d       	mov	r24, r3
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	48 16       	cp	r4, r24
 5a4:	59 06       	cpc	r5, r25
 5a6:	b0 f4       	brcc	.+44     	; 0x5d4 <__stack+0xd5>
 5a8:	b7 01       	movw	r22, r14
 5aa:	80 e2       	ldi	r24, 0x20	; 32
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 47 05 	call	0xa8e	; 0xa8e <fputc>
 5b2:	3a 94       	dec	r3
 5b4:	f4 cf       	rjmp	.-24     	; 0x59e <__stack+0x9f>
 5b6:	f5 01       	movw	r30, r10
 5b8:	27 fc       	sbrc	r2, 7
 5ba:	85 91       	lpm	r24, Z+
 5bc:	27 fe       	sbrs	r2, 7
 5be:	81 91       	ld	r24, Z+
 5c0:	5f 01       	movw	r10, r30
 5c2:	b7 01       	movw	r22, r14
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 47 05 	call	0xa8e	; 0xa8e <fputc>
 5ca:	31 10       	cpse	r3, r1
 5cc:	3a 94       	dec	r3
 5ce:	f1 e0       	ldi	r31, 0x01	; 1
 5d0:	4f 1a       	sub	r4, r31
 5d2:	51 08       	sbc	r5, r1
 5d4:	41 14       	cp	r4, r1
 5d6:	51 04       	cpc	r5, r1
 5d8:	71 f7       	brne	.-36     	; 0x5b6 <__stack+0xb7>
 5da:	e5 c0       	rjmp	.+458    	; 0x7a6 <__stack+0x2a7>
 5dc:	84 36       	cpi	r24, 0x64	; 100
 5de:	11 f0       	breq	.+4      	; 0x5e4 <__stack+0xe5>
 5e0:	89 36       	cpi	r24, 0x69	; 105
 5e2:	39 f5       	brne	.+78     	; 0x632 <__stack+0x133>
 5e4:	f8 01       	movw	r30, r16
 5e6:	27 ff       	sbrs	r18, 7
 5e8:	07 c0       	rjmp	.+14     	; 0x5f8 <__stack+0xf9>
 5ea:	60 81       	ld	r22, Z
 5ec:	71 81       	ldd	r23, Z+1	; 0x01
 5ee:	82 81       	ldd	r24, Z+2	; 0x02
 5f0:	93 81       	ldd	r25, Z+3	; 0x03
 5f2:	0c 5f       	subi	r16, 0xFC	; 252
 5f4:	1f 4f       	sbci	r17, 0xFF	; 255
 5f6:	08 c0       	rjmp	.+16     	; 0x608 <__stack+0x109>
 5f8:	60 81       	ld	r22, Z
 5fa:	71 81       	ldd	r23, Z+1	; 0x01
 5fc:	88 27       	eor	r24, r24
 5fe:	77 fd       	sbrc	r23, 7
 600:	80 95       	com	r24
 602:	98 2f       	mov	r25, r24
 604:	0e 5f       	subi	r16, 0xFE	; 254
 606:	1f 4f       	sbci	r17, 0xFF	; 255
 608:	2f 76       	andi	r18, 0x6F	; 111
 60a:	b2 2e       	mov	r11, r18
 60c:	97 ff       	sbrs	r25, 7
 60e:	09 c0       	rjmp	.+18     	; 0x622 <__stack+0x123>
 610:	90 95       	com	r25
 612:	80 95       	com	r24
 614:	70 95       	com	r23
 616:	61 95       	neg	r22
 618:	7f 4f       	sbci	r23, 0xFF	; 255
 61a:	8f 4f       	sbci	r24, 0xFF	; 255
 61c:	9f 4f       	sbci	r25, 0xFF	; 255
 61e:	20 68       	ori	r18, 0x80	; 128
 620:	b2 2e       	mov	r11, r18
 622:	2a e0       	ldi	r18, 0x0A	; 10
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	a4 01       	movw	r20, r8
 628:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__ultoa_invert>
 62c:	a8 2e       	mov	r10, r24
 62e:	a8 18       	sub	r10, r8
 630:	44 c0       	rjmp	.+136    	; 0x6ba <__stack+0x1bb>
 632:	85 37       	cpi	r24, 0x75	; 117
 634:	29 f4       	brne	.+10     	; 0x640 <__stack+0x141>
 636:	2f 7e       	andi	r18, 0xEF	; 239
 638:	b2 2e       	mov	r11, r18
 63a:	2a e0       	ldi	r18, 0x0A	; 10
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	25 c0       	rjmp	.+74     	; 0x68a <__stack+0x18b>
 640:	f2 2f       	mov	r31, r18
 642:	f9 7f       	andi	r31, 0xF9	; 249
 644:	bf 2e       	mov	r11, r31
 646:	8f 36       	cpi	r24, 0x6F	; 111
 648:	c1 f0       	breq	.+48     	; 0x67a <__stack+0x17b>
 64a:	18 f4       	brcc	.+6      	; 0x652 <__stack+0x153>
 64c:	88 35       	cpi	r24, 0x58	; 88
 64e:	79 f0       	breq	.+30     	; 0x66e <__stack+0x16f>
 650:	b4 c0       	rjmp	.+360    	; 0x7ba <__stack+0x2bb>
 652:	80 37       	cpi	r24, 0x70	; 112
 654:	19 f0       	breq	.+6      	; 0x65c <__stack+0x15d>
 656:	88 37       	cpi	r24, 0x78	; 120
 658:	21 f0       	breq	.+8      	; 0x662 <__stack+0x163>
 65a:	af c0       	rjmp	.+350    	; 0x7ba <__stack+0x2bb>
 65c:	2f 2f       	mov	r18, r31
 65e:	20 61       	ori	r18, 0x10	; 16
 660:	b2 2e       	mov	r11, r18
 662:	b4 fe       	sbrs	r11, 4
 664:	0d c0       	rjmp	.+26     	; 0x680 <__stack+0x181>
 666:	8b 2d       	mov	r24, r11
 668:	84 60       	ori	r24, 0x04	; 4
 66a:	b8 2e       	mov	r11, r24
 66c:	09 c0       	rjmp	.+18     	; 0x680 <__stack+0x181>
 66e:	24 ff       	sbrs	r18, 4
 670:	0a c0       	rjmp	.+20     	; 0x686 <__stack+0x187>
 672:	9f 2f       	mov	r25, r31
 674:	96 60       	ori	r25, 0x06	; 6
 676:	b9 2e       	mov	r11, r25
 678:	06 c0       	rjmp	.+12     	; 0x686 <__stack+0x187>
 67a:	28 e0       	ldi	r18, 0x08	; 8
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	05 c0       	rjmp	.+10     	; 0x68a <__stack+0x18b>
 680:	20 e1       	ldi	r18, 0x10	; 16
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	02 c0       	rjmp	.+4      	; 0x68a <__stack+0x18b>
 686:	20 e1       	ldi	r18, 0x10	; 16
 688:	32 e0       	ldi	r19, 0x02	; 2
 68a:	f8 01       	movw	r30, r16
 68c:	b7 fe       	sbrs	r11, 7
 68e:	07 c0       	rjmp	.+14     	; 0x69e <__stack+0x19f>
 690:	60 81       	ld	r22, Z
 692:	71 81       	ldd	r23, Z+1	; 0x01
 694:	82 81       	ldd	r24, Z+2	; 0x02
 696:	93 81       	ldd	r25, Z+3	; 0x03
 698:	0c 5f       	subi	r16, 0xFC	; 252
 69a:	1f 4f       	sbci	r17, 0xFF	; 255
 69c:	06 c0       	rjmp	.+12     	; 0x6aa <__stack+0x1ab>
 69e:	60 81       	ld	r22, Z
 6a0:	71 81       	ldd	r23, Z+1	; 0x01
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0e 5f       	subi	r16, 0xFE	; 254
 6a8:	1f 4f       	sbci	r17, 0xFF	; 255
 6aa:	a4 01       	movw	r20, r8
 6ac:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__ultoa_invert>
 6b0:	a8 2e       	mov	r10, r24
 6b2:	a8 18       	sub	r10, r8
 6b4:	fb 2d       	mov	r31, r11
 6b6:	ff 77       	andi	r31, 0x7F	; 127
 6b8:	bf 2e       	mov	r11, r31
 6ba:	b6 fe       	sbrs	r11, 6
 6bc:	0b c0       	rjmp	.+22     	; 0x6d4 <__stack+0x1d5>
 6be:	2b 2d       	mov	r18, r11
 6c0:	2e 7f       	andi	r18, 0xFE	; 254
 6c2:	a5 14       	cp	r10, r5
 6c4:	50 f4       	brcc	.+20     	; 0x6da <__stack+0x1db>
 6c6:	b4 fe       	sbrs	r11, 4
 6c8:	0a c0       	rjmp	.+20     	; 0x6de <__stack+0x1df>
 6ca:	b2 fc       	sbrc	r11, 2
 6cc:	08 c0       	rjmp	.+16     	; 0x6de <__stack+0x1df>
 6ce:	2b 2d       	mov	r18, r11
 6d0:	2e 7e       	andi	r18, 0xEE	; 238
 6d2:	05 c0       	rjmp	.+10     	; 0x6de <__stack+0x1df>
 6d4:	7a 2c       	mov	r7, r10
 6d6:	2b 2d       	mov	r18, r11
 6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <__stack+0x1e1>
 6da:	7a 2c       	mov	r7, r10
 6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <__stack+0x1e1>
 6de:	75 2c       	mov	r7, r5
 6e0:	24 ff       	sbrs	r18, 4
 6e2:	0d c0       	rjmp	.+26     	; 0x6fe <__stack+0x1ff>
 6e4:	fe 01       	movw	r30, r28
 6e6:	ea 0d       	add	r30, r10
 6e8:	f1 1d       	adc	r31, r1
 6ea:	80 81       	ld	r24, Z
 6ec:	80 33       	cpi	r24, 0x30	; 48
 6ee:	11 f4       	brne	.+4      	; 0x6f4 <__stack+0x1f5>
 6f0:	29 7e       	andi	r18, 0xE9	; 233
 6f2:	09 c0       	rjmp	.+18     	; 0x706 <__stack+0x207>
 6f4:	22 ff       	sbrs	r18, 2
 6f6:	06 c0       	rjmp	.+12     	; 0x704 <__stack+0x205>
 6f8:	73 94       	inc	r7
 6fa:	73 94       	inc	r7
 6fc:	04 c0       	rjmp	.+8      	; 0x706 <__stack+0x207>
 6fe:	82 2f       	mov	r24, r18
 700:	86 78       	andi	r24, 0x86	; 134
 702:	09 f0       	breq	.+2      	; 0x706 <__stack+0x207>
 704:	73 94       	inc	r7
 706:	23 fd       	sbrc	r18, 3
 708:	13 c0       	rjmp	.+38     	; 0x730 <__stack+0x231>
 70a:	20 ff       	sbrs	r18, 0
 70c:	06 c0       	rjmp	.+12     	; 0x71a <__stack+0x21b>
 70e:	5a 2c       	mov	r5, r10
 710:	73 14       	cp	r7, r3
 712:	18 f4       	brcc	.+6      	; 0x71a <__stack+0x21b>
 714:	53 0c       	add	r5, r3
 716:	57 18       	sub	r5, r7
 718:	73 2c       	mov	r7, r3
 71a:	73 14       	cp	r7, r3
 71c:	68 f4       	brcc	.+26     	; 0x738 <__stack+0x239>
 71e:	b7 01       	movw	r22, r14
 720:	80 e2       	ldi	r24, 0x20	; 32
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	2c 87       	std	Y+12, r18	; 0x0c
 726:	0e 94 47 05 	call	0xa8e	; 0xa8e <fputc>
 72a:	73 94       	inc	r7
 72c:	2c 85       	ldd	r18, Y+12	; 0x0c
 72e:	f5 cf       	rjmp	.-22     	; 0x71a <__stack+0x21b>
 730:	73 14       	cp	r7, r3
 732:	10 f4       	brcc	.+4      	; 0x738 <__stack+0x239>
 734:	37 18       	sub	r3, r7
 736:	01 c0       	rjmp	.+2      	; 0x73a <__stack+0x23b>
 738:	31 2c       	mov	r3, r1
 73a:	24 ff       	sbrs	r18, 4
 73c:	12 c0       	rjmp	.+36     	; 0x762 <__stack+0x263>
 73e:	b7 01       	movw	r22, r14
 740:	80 e3       	ldi	r24, 0x30	; 48
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	2c 87       	std	Y+12, r18	; 0x0c
 746:	0e 94 47 05 	call	0xa8e	; 0xa8e <fputc>
 74a:	2c 85       	ldd	r18, Y+12	; 0x0c
 74c:	22 ff       	sbrs	r18, 2
 74e:	17 c0       	rjmp	.+46     	; 0x77e <__stack+0x27f>
 750:	21 ff       	sbrs	r18, 1
 752:	03 c0       	rjmp	.+6      	; 0x75a <__stack+0x25b>
 754:	88 e5       	ldi	r24, 0x58	; 88
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	02 c0       	rjmp	.+4      	; 0x75e <__stack+0x25f>
 75a:	88 e7       	ldi	r24, 0x78	; 120
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	b7 01       	movw	r22, r14
 760:	0c c0       	rjmp	.+24     	; 0x77a <__stack+0x27b>
 762:	82 2f       	mov	r24, r18
 764:	86 78       	andi	r24, 0x86	; 134
 766:	59 f0       	breq	.+22     	; 0x77e <__stack+0x27f>
 768:	21 fd       	sbrc	r18, 1
 76a:	02 c0       	rjmp	.+4      	; 0x770 <__stack+0x271>
 76c:	80 e2       	ldi	r24, 0x20	; 32
 76e:	01 c0       	rjmp	.+2      	; 0x772 <__stack+0x273>
 770:	8b e2       	ldi	r24, 0x2B	; 43
 772:	27 fd       	sbrc	r18, 7
 774:	8d e2       	ldi	r24, 0x2D	; 45
 776:	b7 01       	movw	r22, r14
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 94 47 05 	call	0xa8e	; 0xa8e <fputc>
 77e:	a5 14       	cp	r10, r5
 780:	38 f4       	brcc	.+14     	; 0x790 <__stack+0x291>
 782:	b7 01       	movw	r22, r14
 784:	80 e3       	ldi	r24, 0x30	; 48
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 47 05 	call	0xa8e	; 0xa8e <fputc>
 78c:	5a 94       	dec	r5
 78e:	f7 cf       	rjmp	.-18     	; 0x77e <__stack+0x27f>
 790:	aa 94       	dec	r10
 792:	f4 01       	movw	r30, r8
 794:	ea 0d       	add	r30, r10
 796:	f1 1d       	adc	r31, r1
 798:	80 81       	ld	r24, Z
 79a:	b7 01       	movw	r22, r14
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	0e 94 47 05 	call	0xa8e	; 0xa8e <fputc>
 7a2:	a1 10       	cpse	r10, r1
 7a4:	f5 cf       	rjmp	.-22     	; 0x790 <__stack+0x291>
 7a6:	33 20       	and	r3, r3
 7a8:	09 f4       	brne	.+2      	; 0x7ac <__stack+0x2ad>
 7aa:	51 ce       	rjmp	.-862    	; 0x44e <vfprintf+0x24>
 7ac:	b7 01       	movw	r22, r14
 7ae:	80 e2       	ldi	r24, 0x20	; 32
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	0e 94 47 05 	call	0xa8e	; 0xa8e <fputc>
 7b6:	3a 94       	dec	r3
 7b8:	f6 cf       	rjmp	.-20     	; 0x7a6 <__stack+0x2a7>
 7ba:	f7 01       	movw	r30, r14
 7bc:	86 81       	ldd	r24, Z+6	; 0x06
 7be:	97 81       	ldd	r25, Z+7	; 0x07
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <__stack+0x2c7>
 7c2:	8f ef       	ldi	r24, 0xFF	; 255
 7c4:	9f ef       	ldi	r25, 0xFF	; 255
 7c6:	2c 96       	adiw	r28, 0x0c	; 12
 7c8:	e2 e1       	ldi	r30, 0x12	; 18
 7ca:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__epilogue_restores__>

000007ce <calloc>:
 7ce:	0f 93       	push	r16
 7d0:	1f 93       	push	r17
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	86 9f       	mul	r24, r22
 7d8:	80 01       	movw	r16, r0
 7da:	87 9f       	mul	r24, r23
 7dc:	10 0d       	add	r17, r0
 7de:	96 9f       	mul	r25, r22
 7e0:	10 0d       	add	r17, r0
 7e2:	11 24       	eor	r1, r1
 7e4:	c8 01       	movw	r24, r16
 7e6:	0e 94 03 04 	call	0x806	; 0x806 <malloc>
 7ea:	ec 01       	movw	r28, r24
 7ec:	00 97       	sbiw	r24, 0x00	; 0
 7ee:	29 f0       	breq	.+10     	; 0x7fa <calloc+0x2c>
 7f0:	a8 01       	movw	r20, r16
 7f2:	60 e0       	ldi	r22, 0x00	; 0
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	0e 94 35 05 	call	0xa6a	; 0xa6a <memset>
 7fa:	ce 01       	movw	r24, r28
 7fc:	df 91       	pop	r29
 7fe:	cf 91       	pop	r28
 800:	1f 91       	pop	r17
 802:	0f 91       	pop	r16
 804:	08 95       	ret

00000806 <malloc>:
 806:	cf 93       	push	r28
 808:	df 93       	push	r29
 80a:	82 30       	cpi	r24, 0x02	; 2
 80c:	91 05       	cpc	r25, r1
 80e:	10 f4       	brcc	.+4      	; 0x814 <malloc+0xe>
 810:	82 e0       	ldi	r24, 0x02	; 2
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	e0 91 2a 01 	lds	r30, 0x012A
 818:	f0 91 2b 01 	lds	r31, 0x012B
 81c:	20 e0       	ldi	r18, 0x00	; 0
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	a0 e0       	ldi	r26, 0x00	; 0
 822:	b0 e0       	ldi	r27, 0x00	; 0
 824:	30 97       	sbiw	r30, 0x00	; 0
 826:	39 f1       	breq	.+78     	; 0x876 <malloc+0x70>
 828:	40 81       	ld	r20, Z
 82a:	51 81       	ldd	r21, Z+1	; 0x01
 82c:	48 17       	cp	r20, r24
 82e:	59 07       	cpc	r21, r25
 830:	b8 f0       	brcs	.+46     	; 0x860 <malloc+0x5a>
 832:	48 17       	cp	r20, r24
 834:	59 07       	cpc	r21, r25
 836:	71 f4       	brne	.+28     	; 0x854 <malloc+0x4e>
 838:	82 81       	ldd	r24, Z+2	; 0x02
 83a:	93 81       	ldd	r25, Z+3	; 0x03
 83c:	10 97       	sbiw	r26, 0x00	; 0
 83e:	29 f0       	breq	.+10     	; 0x84a <malloc+0x44>
 840:	13 96       	adiw	r26, 0x03	; 3
 842:	9c 93       	st	X, r25
 844:	8e 93       	st	-X, r24
 846:	12 97       	sbiw	r26, 0x02	; 2
 848:	2c c0       	rjmp	.+88     	; 0x8a2 <malloc+0x9c>
 84a:	90 93 2b 01 	sts	0x012B, r25
 84e:	80 93 2a 01 	sts	0x012A, r24
 852:	27 c0       	rjmp	.+78     	; 0x8a2 <malloc+0x9c>
 854:	21 15       	cp	r18, r1
 856:	31 05       	cpc	r19, r1
 858:	31 f0       	breq	.+12     	; 0x866 <malloc+0x60>
 85a:	42 17       	cp	r20, r18
 85c:	53 07       	cpc	r21, r19
 85e:	18 f0       	brcs	.+6      	; 0x866 <malloc+0x60>
 860:	a9 01       	movw	r20, r18
 862:	db 01       	movw	r26, r22
 864:	01 c0       	rjmp	.+2      	; 0x868 <malloc+0x62>
 866:	ef 01       	movw	r28, r30
 868:	9a 01       	movw	r18, r20
 86a:	bd 01       	movw	r22, r26
 86c:	df 01       	movw	r26, r30
 86e:	02 80       	ldd	r0, Z+2	; 0x02
 870:	f3 81       	ldd	r31, Z+3	; 0x03
 872:	e0 2d       	mov	r30, r0
 874:	d7 cf       	rjmp	.-82     	; 0x824 <malloc+0x1e>
 876:	21 15       	cp	r18, r1
 878:	31 05       	cpc	r19, r1
 87a:	f9 f0       	breq	.+62     	; 0x8ba <malloc+0xb4>
 87c:	28 1b       	sub	r18, r24
 87e:	39 0b       	sbc	r19, r25
 880:	24 30       	cpi	r18, 0x04	; 4
 882:	31 05       	cpc	r19, r1
 884:	80 f4       	brcc	.+32     	; 0x8a6 <malloc+0xa0>
 886:	8a 81       	ldd	r24, Y+2	; 0x02
 888:	9b 81       	ldd	r25, Y+3	; 0x03
 88a:	61 15       	cp	r22, r1
 88c:	71 05       	cpc	r23, r1
 88e:	21 f0       	breq	.+8      	; 0x898 <malloc+0x92>
 890:	fb 01       	movw	r30, r22
 892:	93 83       	std	Z+3, r25	; 0x03
 894:	82 83       	std	Z+2, r24	; 0x02
 896:	04 c0       	rjmp	.+8      	; 0x8a0 <malloc+0x9a>
 898:	90 93 2b 01 	sts	0x012B, r25
 89c:	80 93 2a 01 	sts	0x012A, r24
 8a0:	fe 01       	movw	r30, r28
 8a2:	32 96       	adiw	r30, 0x02	; 2
 8a4:	44 c0       	rjmp	.+136    	; 0x92e <malloc+0x128>
 8a6:	fe 01       	movw	r30, r28
 8a8:	e2 0f       	add	r30, r18
 8aa:	f3 1f       	adc	r31, r19
 8ac:	81 93       	st	Z+, r24
 8ae:	91 93       	st	Z+, r25
 8b0:	22 50       	subi	r18, 0x02	; 2
 8b2:	31 09       	sbc	r19, r1
 8b4:	39 83       	std	Y+1, r19	; 0x01
 8b6:	28 83       	st	Y, r18
 8b8:	3a c0       	rjmp	.+116    	; 0x92e <malloc+0x128>
 8ba:	20 91 28 01 	lds	r18, 0x0128
 8be:	30 91 29 01 	lds	r19, 0x0129
 8c2:	23 2b       	or	r18, r19
 8c4:	41 f4       	brne	.+16     	; 0x8d6 <malloc+0xd0>
 8c6:	20 91 06 01 	lds	r18, 0x0106
 8ca:	30 91 07 01 	lds	r19, 0x0107
 8ce:	30 93 29 01 	sts	0x0129, r19
 8d2:	20 93 28 01 	sts	0x0128, r18
 8d6:	20 91 04 01 	lds	r18, 0x0104
 8da:	30 91 05 01 	lds	r19, 0x0105
 8de:	21 15       	cp	r18, r1
 8e0:	31 05       	cpc	r19, r1
 8e2:	41 f4       	brne	.+16     	; 0x8f4 <malloc+0xee>
 8e4:	2d b7       	in	r18, 0x3d	; 61
 8e6:	3e b7       	in	r19, 0x3e	; 62
 8e8:	40 91 08 01 	lds	r20, 0x0108
 8ec:	50 91 09 01 	lds	r21, 0x0109
 8f0:	24 1b       	sub	r18, r20
 8f2:	35 0b       	sbc	r19, r21
 8f4:	e0 91 28 01 	lds	r30, 0x0128
 8f8:	f0 91 29 01 	lds	r31, 0x0129
 8fc:	e2 17       	cp	r30, r18
 8fe:	f3 07       	cpc	r31, r19
 900:	a0 f4       	brcc	.+40     	; 0x92a <malloc+0x124>
 902:	2e 1b       	sub	r18, r30
 904:	3f 0b       	sbc	r19, r31
 906:	28 17       	cp	r18, r24
 908:	39 07       	cpc	r19, r25
 90a:	78 f0       	brcs	.+30     	; 0x92a <malloc+0x124>
 90c:	ac 01       	movw	r20, r24
 90e:	4e 5f       	subi	r20, 0xFE	; 254
 910:	5f 4f       	sbci	r21, 0xFF	; 255
 912:	24 17       	cp	r18, r20
 914:	35 07       	cpc	r19, r21
 916:	48 f0       	brcs	.+18     	; 0x92a <malloc+0x124>
 918:	4e 0f       	add	r20, r30
 91a:	5f 1f       	adc	r21, r31
 91c:	50 93 29 01 	sts	0x0129, r21
 920:	40 93 28 01 	sts	0x0128, r20
 924:	81 93       	st	Z+, r24
 926:	91 93       	st	Z+, r25
 928:	02 c0       	rjmp	.+4      	; 0x92e <malloc+0x128>
 92a:	e0 e0       	ldi	r30, 0x00	; 0
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	cf 01       	movw	r24, r30
 930:	df 91       	pop	r29
 932:	cf 91       	pop	r28
 934:	08 95       	ret

00000936 <free>:
 936:	cf 93       	push	r28
 938:	df 93       	push	r29
 93a:	00 97       	sbiw	r24, 0x00	; 0
 93c:	09 f4       	brne	.+2      	; 0x940 <free+0xa>
 93e:	87 c0       	rjmp	.+270    	; 0xa4e <free+0x118>
 940:	fc 01       	movw	r30, r24
 942:	32 97       	sbiw	r30, 0x02	; 2
 944:	13 82       	std	Z+3, r1	; 0x03
 946:	12 82       	std	Z+2, r1	; 0x02
 948:	c0 91 2a 01 	lds	r28, 0x012A
 94c:	d0 91 2b 01 	lds	r29, 0x012B
 950:	20 97       	sbiw	r28, 0x00	; 0
 952:	81 f4       	brne	.+32     	; 0x974 <free+0x3e>
 954:	20 81       	ld	r18, Z
 956:	31 81       	ldd	r19, Z+1	; 0x01
 958:	28 0f       	add	r18, r24
 95a:	39 1f       	adc	r19, r25
 95c:	80 91 28 01 	lds	r24, 0x0128
 960:	90 91 29 01 	lds	r25, 0x0129
 964:	82 17       	cp	r24, r18
 966:	93 07       	cpc	r25, r19
 968:	79 f5       	brne	.+94     	; 0x9c8 <free+0x92>
 96a:	f0 93 29 01 	sts	0x0129, r31
 96e:	e0 93 28 01 	sts	0x0128, r30
 972:	6d c0       	rjmp	.+218    	; 0xa4e <free+0x118>
 974:	de 01       	movw	r26, r28
 976:	20 e0       	ldi	r18, 0x00	; 0
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	ae 17       	cp	r26, r30
 97c:	bf 07       	cpc	r27, r31
 97e:	50 f4       	brcc	.+20     	; 0x994 <free+0x5e>
 980:	12 96       	adiw	r26, 0x02	; 2
 982:	4d 91       	ld	r20, X+
 984:	5c 91       	ld	r21, X
 986:	13 97       	sbiw	r26, 0x03	; 3
 988:	9d 01       	movw	r18, r26
 98a:	41 15       	cp	r20, r1
 98c:	51 05       	cpc	r21, r1
 98e:	09 f1       	breq	.+66     	; 0x9d2 <free+0x9c>
 990:	da 01       	movw	r26, r20
 992:	f3 cf       	rjmp	.-26     	; 0x97a <free+0x44>
 994:	b3 83       	std	Z+3, r27	; 0x03
 996:	a2 83       	std	Z+2, r26	; 0x02
 998:	40 81       	ld	r20, Z
 99a:	51 81       	ldd	r21, Z+1	; 0x01
 99c:	84 0f       	add	r24, r20
 99e:	95 1f       	adc	r25, r21
 9a0:	8a 17       	cp	r24, r26
 9a2:	9b 07       	cpc	r25, r27
 9a4:	71 f4       	brne	.+28     	; 0x9c2 <free+0x8c>
 9a6:	8d 91       	ld	r24, X+
 9a8:	9c 91       	ld	r25, X
 9aa:	11 97       	sbiw	r26, 0x01	; 1
 9ac:	84 0f       	add	r24, r20
 9ae:	95 1f       	adc	r25, r21
 9b0:	02 96       	adiw	r24, 0x02	; 2
 9b2:	91 83       	std	Z+1, r25	; 0x01
 9b4:	80 83       	st	Z, r24
 9b6:	12 96       	adiw	r26, 0x02	; 2
 9b8:	8d 91       	ld	r24, X+
 9ba:	9c 91       	ld	r25, X
 9bc:	13 97       	sbiw	r26, 0x03	; 3
 9be:	93 83       	std	Z+3, r25	; 0x03
 9c0:	82 83       	std	Z+2, r24	; 0x02
 9c2:	21 15       	cp	r18, r1
 9c4:	31 05       	cpc	r19, r1
 9c6:	29 f4       	brne	.+10     	; 0x9d2 <free+0x9c>
 9c8:	f0 93 2b 01 	sts	0x012B, r31
 9cc:	e0 93 2a 01 	sts	0x012A, r30
 9d0:	3e c0       	rjmp	.+124    	; 0xa4e <free+0x118>
 9d2:	d9 01       	movw	r26, r18
 9d4:	13 96       	adiw	r26, 0x03	; 3
 9d6:	fc 93       	st	X, r31
 9d8:	ee 93       	st	-X, r30
 9da:	12 97       	sbiw	r26, 0x02	; 2
 9dc:	4d 91       	ld	r20, X+
 9de:	5d 91       	ld	r21, X+
 9e0:	a4 0f       	add	r26, r20
 9e2:	b5 1f       	adc	r27, r21
 9e4:	ea 17       	cp	r30, r26
 9e6:	fb 07       	cpc	r31, r27
 9e8:	79 f4       	brne	.+30     	; 0xa08 <free+0xd2>
 9ea:	80 81       	ld	r24, Z
 9ec:	91 81       	ldd	r25, Z+1	; 0x01
 9ee:	84 0f       	add	r24, r20
 9f0:	95 1f       	adc	r25, r21
 9f2:	02 96       	adiw	r24, 0x02	; 2
 9f4:	d9 01       	movw	r26, r18
 9f6:	11 96       	adiw	r26, 0x01	; 1
 9f8:	9c 93       	st	X, r25
 9fa:	8e 93       	st	-X, r24
 9fc:	82 81       	ldd	r24, Z+2	; 0x02
 9fe:	93 81       	ldd	r25, Z+3	; 0x03
 a00:	13 96       	adiw	r26, 0x03	; 3
 a02:	9c 93       	st	X, r25
 a04:	8e 93       	st	-X, r24
 a06:	12 97       	sbiw	r26, 0x02	; 2
 a08:	e0 e0       	ldi	r30, 0x00	; 0
 a0a:	f0 e0       	ldi	r31, 0x00	; 0
 a0c:	8a 81       	ldd	r24, Y+2	; 0x02
 a0e:	9b 81       	ldd	r25, Y+3	; 0x03
 a10:	00 97       	sbiw	r24, 0x00	; 0
 a12:	19 f0       	breq	.+6      	; 0xa1a <free+0xe4>
 a14:	fe 01       	movw	r30, r28
 a16:	ec 01       	movw	r28, r24
 a18:	f9 cf       	rjmp	.-14     	; 0xa0c <free+0xd6>
 a1a:	ce 01       	movw	r24, r28
 a1c:	02 96       	adiw	r24, 0x02	; 2
 a1e:	28 81       	ld	r18, Y
 a20:	39 81       	ldd	r19, Y+1	; 0x01
 a22:	82 0f       	add	r24, r18
 a24:	93 1f       	adc	r25, r19
 a26:	20 91 28 01 	lds	r18, 0x0128
 a2a:	30 91 29 01 	lds	r19, 0x0129
 a2e:	28 17       	cp	r18, r24
 a30:	39 07       	cpc	r19, r25
 a32:	69 f4       	brne	.+26     	; 0xa4e <free+0x118>
 a34:	30 97       	sbiw	r30, 0x00	; 0
 a36:	29 f4       	brne	.+10     	; 0xa42 <free+0x10c>
 a38:	10 92 2b 01 	sts	0x012B, r1
 a3c:	10 92 2a 01 	sts	0x012A, r1
 a40:	02 c0       	rjmp	.+4      	; 0xa46 <free+0x110>
 a42:	13 82       	std	Z+3, r1	; 0x03
 a44:	12 82       	std	Z+2, r1	; 0x02
 a46:	d0 93 29 01 	sts	0x0129, r29
 a4a:	c0 93 28 01 	sts	0x0128, r28
 a4e:	df 91       	pop	r29
 a50:	cf 91       	pop	r28
 a52:	08 95       	ret

00000a54 <strnlen_P>:
 a54:	fc 01       	movw	r30, r24
 a56:	05 90       	lpm	r0, Z+
 a58:	61 50       	subi	r22, 0x01	; 1
 a5a:	70 40       	sbci	r23, 0x00	; 0
 a5c:	01 10       	cpse	r0, r1
 a5e:	d8 f7       	brcc	.-10     	; 0xa56 <strnlen_P+0x2>
 a60:	80 95       	com	r24
 a62:	90 95       	com	r25
 a64:	8e 0f       	add	r24, r30
 a66:	9f 1f       	adc	r25, r31
 a68:	08 95       	ret

00000a6a <memset>:
 a6a:	dc 01       	movw	r26, r24
 a6c:	01 c0       	rjmp	.+2      	; 0xa70 <memset+0x6>
 a6e:	6d 93       	st	X+, r22
 a70:	41 50       	subi	r20, 0x01	; 1
 a72:	50 40       	sbci	r21, 0x00	; 0
 a74:	e0 f7       	brcc	.-8      	; 0xa6e <memset+0x4>
 a76:	08 95       	ret

00000a78 <strnlen>:
 a78:	fc 01       	movw	r30, r24
 a7a:	61 50       	subi	r22, 0x01	; 1
 a7c:	70 40       	sbci	r23, 0x00	; 0
 a7e:	01 90       	ld	r0, Z+
 a80:	01 10       	cpse	r0, r1
 a82:	d8 f7       	brcc	.-10     	; 0xa7a <strnlen+0x2>
 a84:	80 95       	com	r24
 a86:	90 95       	com	r25
 a88:	8e 0f       	add	r24, r30
 a8a:	9f 1f       	adc	r25, r31
 a8c:	08 95       	ret

00000a8e <fputc>:
 a8e:	0f 93       	push	r16
 a90:	1f 93       	push	r17
 a92:	cf 93       	push	r28
 a94:	df 93       	push	r29
 a96:	18 2f       	mov	r17, r24
 a98:	09 2f       	mov	r16, r25
 a9a:	eb 01       	movw	r28, r22
 a9c:	8b 81       	ldd	r24, Y+3	; 0x03
 a9e:	81 fd       	sbrc	r24, 1
 aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <fputc+0x1a>
 aa2:	8f ef       	ldi	r24, 0xFF	; 255
 aa4:	9f ef       	ldi	r25, 0xFF	; 255
 aa6:	20 c0       	rjmp	.+64     	; 0xae8 <fputc+0x5a>
 aa8:	82 ff       	sbrs	r24, 2
 aaa:	10 c0       	rjmp	.+32     	; 0xacc <fputc+0x3e>
 aac:	4e 81       	ldd	r20, Y+6	; 0x06
 aae:	5f 81       	ldd	r21, Y+7	; 0x07
 ab0:	2c 81       	ldd	r18, Y+4	; 0x04
 ab2:	3d 81       	ldd	r19, Y+5	; 0x05
 ab4:	42 17       	cp	r20, r18
 ab6:	53 07       	cpc	r21, r19
 ab8:	7c f4       	brge	.+30     	; 0xad8 <fputc+0x4a>
 aba:	e8 81       	ld	r30, Y
 abc:	f9 81       	ldd	r31, Y+1	; 0x01
 abe:	9f 01       	movw	r18, r30
 ac0:	2f 5f       	subi	r18, 0xFF	; 255
 ac2:	3f 4f       	sbci	r19, 0xFF	; 255
 ac4:	39 83       	std	Y+1, r19	; 0x01
 ac6:	28 83       	st	Y, r18
 ac8:	10 83       	st	Z, r17
 aca:	06 c0       	rjmp	.+12     	; 0xad8 <fputc+0x4a>
 acc:	e8 85       	ldd	r30, Y+8	; 0x08
 ace:	f9 85       	ldd	r31, Y+9	; 0x09
 ad0:	81 2f       	mov	r24, r17
 ad2:	09 95       	icall
 ad4:	89 2b       	or	r24, r25
 ad6:	29 f7       	brne	.-54     	; 0xaa2 <fputc+0x14>
 ad8:	2e 81       	ldd	r18, Y+6	; 0x06
 ada:	3f 81       	ldd	r19, Y+7	; 0x07
 adc:	2f 5f       	subi	r18, 0xFF	; 255
 ade:	3f 4f       	sbci	r19, 0xFF	; 255
 ae0:	3f 83       	std	Y+7, r19	; 0x07
 ae2:	2e 83       	std	Y+6, r18	; 0x06
 ae4:	81 2f       	mov	r24, r17
 ae6:	90 2f       	mov	r25, r16
 ae8:	df 91       	pop	r29
 aea:	cf 91       	pop	r28
 aec:	1f 91       	pop	r17
 aee:	0f 91       	pop	r16
 af0:	08 95       	ret

00000af2 <__ultoa_invert>:
 af2:	fa 01       	movw	r30, r20
 af4:	aa 27       	eor	r26, r26
 af6:	28 30       	cpi	r18, 0x08	; 8
 af8:	51 f1       	breq	.+84     	; 0xb4e <__ultoa_invert+0x5c>
 afa:	20 31       	cpi	r18, 0x10	; 16
 afc:	81 f1       	breq	.+96     	; 0xb5e <__ultoa_invert+0x6c>
 afe:	e8 94       	clt
 b00:	6f 93       	push	r22
 b02:	6e 7f       	andi	r22, 0xFE	; 254
 b04:	6e 5f       	subi	r22, 0xFE	; 254
 b06:	7f 4f       	sbci	r23, 0xFF	; 255
 b08:	8f 4f       	sbci	r24, 0xFF	; 255
 b0a:	9f 4f       	sbci	r25, 0xFF	; 255
 b0c:	af 4f       	sbci	r26, 0xFF	; 255
 b0e:	b1 e0       	ldi	r27, 0x01	; 1
 b10:	3e d0       	rcall	.+124    	; 0xb8e <__ultoa_invert+0x9c>
 b12:	b4 e0       	ldi	r27, 0x04	; 4
 b14:	3c d0       	rcall	.+120    	; 0xb8e <__ultoa_invert+0x9c>
 b16:	67 0f       	add	r22, r23
 b18:	78 1f       	adc	r23, r24
 b1a:	89 1f       	adc	r24, r25
 b1c:	9a 1f       	adc	r25, r26
 b1e:	a1 1d       	adc	r26, r1
 b20:	68 0f       	add	r22, r24
 b22:	79 1f       	adc	r23, r25
 b24:	8a 1f       	adc	r24, r26
 b26:	91 1d       	adc	r25, r1
 b28:	a1 1d       	adc	r26, r1
 b2a:	6a 0f       	add	r22, r26
 b2c:	71 1d       	adc	r23, r1
 b2e:	81 1d       	adc	r24, r1
 b30:	91 1d       	adc	r25, r1
 b32:	a1 1d       	adc	r26, r1
 b34:	20 d0       	rcall	.+64     	; 0xb76 <__ultoa_invert+0x84>
 b36:	09 f4       	brne	.+2      	; 0xb3a <__ultoa_invert+0x48>
 b38:	68 94       	set
 b3a:	3f 91       	pop	r19
 b3c:	2a e0       	ldi	r18, 0x0A	; 10
 b3e:	26 9f       	mul	r18, r22
 b40:	11 24       	eor	r1, r1
 b42:	30 19       	sub	r19, r0
 b44:	30 5d       	subi	r19, 0xD0	; 208
 b46:	31 93       	st	Z+, r19
 b48:	de f6       	brtc	.-74     	; 0xb00 <__ultoa_invert+0xe>
 b4a:	cf 01       	movw	r24, r30
 b4c:	08 95       	ret
 b4e:	46 2f       	mov	r20, r22
 b50:	47 70       	andi	r20, 0x07	; 7
 b52:	40 5d       	subi	r20, 0xD0	; 208
 b54:	41 93       	st	Z+, r20
 b56:	b3 e0       	ldi	r27, 0x03	; 3
 b58:	0f d0       	rcall	.+30     	; 0xb78 <__ultoa_invert+0x86>
 b5a:	c9 f7       	brne	.-14     	; 0xb4e <__ultoa_invert+0x5c>
 b5c:	f6 cf       	rjmp	.-20     	; 0xb4a <__ultoa_invert+0x58>
 b5e:	46 2f       	mov	r20, r22
 b60:	4f 70       	andi	r20, 0x0F	; 15
 b62:	40 5d       	subi	r20, 0xD0	; 208
 b64:	4a 33       	cpi	r20, 0x3A	; 58
 b66:	18 f0       	brcs	.+6      	; 0xb6e <__ultoa_invert+0x7c>
 b68:	49 5d       	subi	r20, 0xD9	; 217
 b6a:	31 fd       	sbrc	r19, 1
 b6c:	40 52       	subi	r20, 0x20	; 32
 b6e:	41 93       	st	Z+, r20
 b70:	02 d0       	rcall	.+4      	; 0xb76 <__ultoa_invert+0x84>
 b72:	a9 f7       	brne	.-22     	; 0xb5e <__ultoa_invert+0x6c>
 b74:	ea cf       	rjmp	.-44     	; 0xb4a <__ultoa_invert+0x58>
 b76:	b4 e0       	ldi	r27, 0x04	; 4
 b78:	a6 95       	lsr	r26
 b7a:	97 95       	ror	r25
 b7c:	87 95       	ror	r24
 b7e:	77 95       	ror	r23
 b80:	67 95       	ror	r22
 b82:	ba 95       	dec	r27
 b84:	c9 f7       	brne	.-14     	; 0xb78 <__ultoa_invert+0x86>
 b86:	00 97       	sbiw	r24, 0x00	; 0
 b88:	61 05       	cpc	r22, r1
 b8a:	71 05       	cpc	r23, r1
 b8c:	08 95       	ret
 b8e:	9b 01       	movw	r18, r22
 b90:	ac 01       	movw	r20, r24
 b92:	0a 2e       	mov	r0, r26
 b94:	06 94       	lsr	r0
 b96:	57 95       	ror	r21
 b98:	47 95       	ror	r20
 b9a:	37 95       	ror	r19
 b9c:	27 95       	ror	r18
 b9e:	ba 95       	dec	r27
 ba0:	c9 f7       	brne	.-14     	; 0xb94 <__ultoa_invert+0xa2>
 ba2:	62 0f       	add	r22, r18
 ba4:	73 1f       	adc	r23, r19
 ba6:	84 1f       	adc	r24, r20
 ba8:	95 1f       	adc	r25, r21
 baa:	a0 1d       	adc	r26, r0
 bac:	08 95       	ret

00000bae <__prologue_saves__>:
 bae:	2f 92       	push	r2
 bb0:	3f 92       	push	r3
 bb2:	4f 92       	push	r4
 bb4:	5f 92       	push	r5
 bb6:	6f 92       	push	r6
 bb8:	7f 92       	push	r7
 bba:	8f 92       	push	r8
 bbc:	9f 92       	push	r9
 bbe:	af 92       	push	r10
 bc0:	bf 92       	push	r11
 bc2:	cf 92       	push	r12
 bc4:	df 92       	push	r13
 bc6:	ef 92       	push	r14
 bc8:	ff 92       	push	r15
 bca:	0f 93       	push	r16
 bcc:	1f 93       	push	r17
 bce:	cf 93       	push	r28
 bd0:	df 93       	push	r29
 bd2:	cd b7       	in	r28, 0x3d	; 61
 bd4:	de b7       	in	r29, 0x3e	; 62
 bd6:	ca 1b       	sub	r28, r26
 bd8:	db 0b       	sbc	r29, r27
 bda:	0f b6       	in	r0, 0x3f	; 63
 bdc:	f8 94       	cli
 bde:	de bf       	out	0x3e, r29	; 62
 be0:	0f be       	out	0x3f, r0	; 63
 be2:	cd bf       	out	0x3d, r28	; 61
 be4:	09 94       	ijmp

00000be6 <__epilogue_restores__>:
 be6:	2a 88       	ldd	r2, Y+18	; 0x12
 be8:	39 88       	ldd	r3, Y+17	; 0x11
 bea:	48 88       	ldd	r4, Y+16	; 0x10
 bec:	5f 84       	ldd	r5, Y+15	; 0x0f
 bee:	6e 84       	ldd	r6, Y+14	; 0x0e
 bf0:	7d 84       	ldd	r7, Y+13	; 0x0d
 bf2:	8c 84       	ldd	r8, Y+12	; 0x0c
 bf4:	9b 84       	ldd	r9, Y+11	; 0x0b
 bf6:	aa 84       	ldd	r10, Y+10	; 0x0a
 bf8:	b9 84       	ldd	r11, Y+9	; 0x09
 bfa:	c8 84       	ldd	r12, Y+8	; 0x08
 bfc:	df 80       	ldd	r13, Y+7	; 0x07
 bfe:	ee 80       	ldd	r14, Y+6	; 0x06
 c00:	fd 80       	ldd	r15, Y+5	; 0x05
 c02:	0c 81       	ldd	r16, Y+4	; 0x04
 c04:	1b 81       	ldd	r17, Y+3	; 0x03
 c06:	aa 81       	ldd	r26, Y+2	; 0x02
 c08:	b9 81       	ldd	r27, Y+1	; 0x01
 c0a:	ce 0f       	add	r28, r30
 c0c:	d1 1d       	adc	r29, r1
 c0e:	0f b6       	in	r0, 0x3f	; 63
 c10:	f8 94       	cli
 c12:	de bf       	out	0x3e, r29	; 62
 c14:	0f be       	out	0x3f, r0	; 63
 c16:	cd bf       	out	0x3d, r28	; 61
 c18:	ed 01       	movw	r28, r26
 c1a:	08 95       	ret

00000c1c <_exit>:
 c1c:	f8 94       	cli

00000c1e <__stop_program>:
 c1e:	ff cf       	rjmp	.-2      	; 0xc1e <__stop_program>
