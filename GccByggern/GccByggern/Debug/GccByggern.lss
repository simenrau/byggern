
GccByggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000152  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e2  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000013f  00000000  00000000  000003aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000173  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000041  00000000  00000000  00000683  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 44 00 	call	0x88	; 0x88 <main>
  80:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <main>:
#include <avr/interrupt.h>
#include <stdint.h>

int main(void)
{
	DDRA |= (1 << PA0) | (1 << PA2);
  88:	8a b3       	in	r24, 0x1a	; 26
  8a:	85 60       	ori	r24, 0x05	; 5
  8c:	8a bb       	out	0x1a, r24	; 26
  8e:	85 e0       	ldi	r24, 0x05	; 5
  90:	90 e0       	ldi	r25, 0x00	; 0
	int i = 0;
	
    while(i < 5)
    {
        PORTA &= ~((1<<PA0)|(1<<PA2));
  92:	2b b3       	in	r18, 0x1b	; 27
  94:	2a 7f       	andi	r18, 0xFA	; 250
  96:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f e3       	ldi	r18, 0x3F	; 63
  9a:	32 e4       	ldi	r19, 0x42	; 66
  9c:	4f e0       	ldi	r20, 0x0F	; 15
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	30 40       	sbci	r19, 0x00	; 0
  a2:	40 40       	sbci	r20, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x16>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x20>
  a8:	00 00       	nop
		_delay_ms(1000);
		PORTA |= (1<<PA0)|(1<<PA2);
  aa:	2b b3       	in	r18, 0x1b	; 27
  ac:	25 60       	ori	r18, 0x05	; 5
  ae:	2b bb       	out	0x1b, r18	; 27
  b0:	2f e3       	ldi	r18, 0x3F	; 63
  b2:	32 e4       	ldi	r19, 0x42	; 66
  b4:	4f e0       	ldi	r20, 0x0F	; 15
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
  ba:	40 40       	sbci	r20, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x2e>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x38>
  c0:	00 00       	nop
  c2:	01 97       	sbiw	r24, 0x01	; 1
int main(void)
{
	DDRA |= (1 << PA0) | (1 << PA2);
	int i = 0;
	
    while(i < 5)
  c4:	00 97       	sbiw	r24, 0x00	; 0
  c6:	29 f7       	brne	.-54     	; 0x92 <main+0xa>
		_delay_ms(1000);
		PORTA |= (1<<PA0)|(1<<PA2);
		_delay_ms(1000);
		i = i+1;
    }
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	08 95       	ret

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
