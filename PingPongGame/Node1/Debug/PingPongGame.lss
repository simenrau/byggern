
PingPongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000148  00800100  00001c28  00001cbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800248  00800248  00001e04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e04  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001b0  00000000  00000000  00001e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002428  00000000  00000000  00001fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ae9  00000000  00000000  0000440c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c9a  00000000  00000000  00004ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000033c  00000000  00000000  00005b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ef  00000000  00000000  00005ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000019fa  00000000  00000000  000063bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000250  00000000  00000000  00007db5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 01 	jmp	0x262	; 0x262 <__ctors_end>
       4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
       8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
       c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      10:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      14:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      18:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      1c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      20:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      24:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      28:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      2c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      30:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      34:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      38:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      3c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      40:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      44:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      48:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      4c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      50:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      54:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      58:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      5c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      60:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      64:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      68:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      6c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 0e       	add	r0, r16
      72:	3b 21       	and	r19, r11
      74:	63 c6       	rjmp	.+3270   	; 0xd3c <__stack+0x83d>
      76:	63 21       	and	r22, r3
      78:	3b 0e       	add	r3, r27
      7a:	00 00       	nop
      7c:	0e 3f       	cpi	r16, 0xFE	; 254
      7e:	3f 7f       	andi	r19, 0xFF	; 255
      80:	fe 7f       	andi	r31, 0xFE	; 254
      82:	3f 3f       	cpi	r19, 0xFF	; 255
      84:	0e 00       	.word	0x000e	; ????

00000086 <font5>:
      86:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      96:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      a6:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      b6:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
      c6:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      d6:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      e6:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      f6:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     106:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     116:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     126:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     136:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     146:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     156:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     166:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     176:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     186:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     196:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     1a6:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     1b6:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     1c6:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1d6:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1e6:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     1f6:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     206:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     216:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     226:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     236:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     246:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     256:	00 00 41 36 08 00 02 01 03 02 01 00                 ..A6........

00000262 <__ctors_end>:
     262:	11 24       	eor	r1, r1
     264:	1f be       	out	0x3f, r1	; 63
     266:	cf ef       	ldi	r28, 0xFF	; 255
     268:	d4 e0       	ldi	r29, 0x04	; 4
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	cd bf       	out	0x3d, r28	; 61

0000026e <__do_copy_data>:
     26e:	12 e0       	ldi	r17, 0x02	; 2
     270:	a0 e0       	ldi	r26, 0x00	; 0
     272:	b1 e0       	ldi	r27, 0x01	; 1
     274:	e8 e2       	ldi	r30, 0x28	; 40
     276:	fc e1       	ldi	r31, 0x1C	; 28
     278:	02 c0       	rjmp	.+4      	; 0x27e <__do_copy_data+0x10>
     27a:	05 90       	lpm	r0, Z+
     27c:	0d 92       	st	X+, r0
     27e:	a8 34       	cpi	r26, 0x48	; 72
     280:	b1 07       	cpc	r27, r17
     282:	d9 f7       	brne	.-10     	; 0x27a <__do_copy_data+0xc>

00000284 <__do_clear_bss>:
     284:	22 e0       	ldi	r18, 0x02	; 2
     286:	a8 e4       	ldi	r26, 0x48	; 72
     288:	b2 e0       	ldi	r27, 0x02	; 2
     28a:	01 c0       	rjmp	.+2      	; 0x28e <.do_clear_bss_start>

0000028c <.do_clear_bss_loop>:
     28c:	1d 92       	st	X+, r1

0000028e <.do_clear_bss_start>:
     28e:	a4 35       	cpi	r26, 0x54	; 84
     290:	b2 07       	cpc	r27, r18
     292:	e1 f7       	brne	.-8      	; 0x28c <.do_clear_bss_loop>
     294:	0e 94 11 0a 	call	0x1422	; 0x1422 <main>
     298:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <_exit>

0000029c <__bad_interrupt>:
     29c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a0 <read_adc>:

uint8_t read_adc(int channel)
{
	volatile uint8_t *ADC = (uint8_t*)0x1400;
	uint8_t mux_adress = channel;
	ADC[0] = mux_adress;
     2a0:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a4:	86 e6       	ldi	r24, 0x66	; 102
     2a6:	92 e0       	ldi	r25, 0x02	; 2
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <read_adc+0x8>
     2ac:	00 00       	nop
	_delay_us(500);
	uint8_t val = ADC[0];
     2ae:	80 91 00 14 	lds	r24, 0x1400
	return val;
     2b2:	08 95       	ret

000002b4 <CAN_init>:
#include "CAN.h"
#include "MCP2515.h"

void CAN_init(void)
{
		MCP_reset();
     2b4:	0e 94 21 0a 	call	0x1442	; 0x1442 <MCP_reset>
     2b8:	82 e5       	ldi	r24, 0x52	; 82
     2ba:	8a 95       	dec	r24
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <CAN_init+0x6>
		_delay_us(50);

		MCP_write(MCP_CANCTRL, MODE_CONFIG);		
     2be:	60 e8       	ldi	r22, 0x80	; 128
     2c0:	8f e0       	ldi	r24, 0x0F	; 15
     2c2:	0e 94 3e 0a 	call	0x147c	; 0x147c <MCP_write>


		MCP_write(MCP_CANINTE, 0x03);	
     2c6:	63 e0       	ldi	r22, 0x03	; 3
     2c8:	8b e2       	ldi	r24, 0x2B	; 43
     2ca:	0e 94 3e 0a 	call	0x147c	; 0x147c <MCP_write>
		MCP_write(MCP_CANINTF, 0x00);	
     2ce:	60 e0       	ldi	r22, 0x00	; 0
     2d0:	8c e2       	ldi	r24, 0x2C	; 44
     2d2:	0e 94 3e 0a 	call	0x147c	; 0x147c <MCP_write>
		MCP_write(MCP_EFLG, 0x00);		
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	8d e2       	ldi	r24, 0x2D	; 45
     2da:	0e 94 3e 0a 	call	0x147c	; 0x147c <MCP_write>
		
		MCP_write(0x0C, 0x00);			 // Disable all interrupts
     2de:	60 e0       	ldi	r22, 0x00	; 0
     2e0:	8c e0       	ldi	r24, 0x0C	; 12
     2e2:	0e 94 3e 0a 	call	0x147c	; 0x147c <MCP_write>
		MCP_write(0x0D, 0x00);			// Clear TXRTSCTRL
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	8d e0       	ldi	r24, 0x0D	; 13
     2ea:	0e 94 3e 0a 	call	0x147c	; 0x147c <MCP_write>
		
		
		MCP_write(MCP_RXB0CTRL, 0x60);		// Receive buffer 0 control (turn mask/filters off, receive any message) 
     2ee:	60 e6       	ldi	r22, 0x60	; 96
     2f0:	80 e6       	ldi	r24, 0x60	; 96
     2f2:	0e 94 3e 0a 	call	0x147c	; 0x147c <MCP_write>
		MCP_write(MCP_RXB1CTRL, 0x60);		// Receive buffer 1 control (turn mask/filters off, receive any message)
     2f6:	60 e6       	ldi	r22, 0x60	; 96
     2f8:	80 e7       	ldi	r24, 0x70	; 112
     2fa:	0e 94 3e 0a 	call	0x147c	; 0x147c <MCP_write>


		MCP_write(MCP_CANCTRL,MODE_NORMAL);
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	8f e0       	ldi	r24, 0x0F	; 15
     302:	0e 94 3e 0a 	call	0x147c	; 0x147c <MCP_write>
     306:	08 95       	ret

00000308 <CAN_message_send>:
		
	
}

void CAN_message_send(msg can_tx)
{
     308:	cf 92       	push	r12
     30a:	df 92       	push	r13
     30c:	ef 92       	push	r14
     30e:	ff 92       	push	r15
     310:	0f 93       	push	r16
     312:	1f 93       	push	r17
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	2b 97       	sbiw	r28, 0x0b	; 11
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
     328:	e9 82       	std	Y+1, r14	; 0x01
     32a:	fa 82       	std	Y+2, r15	; 0x02
     32c:	0b 83       	std	Y+3, r16	; 0x03
     32e:	1c 83       	std	Y+4, r17	; 0x04
     330:	2d 83       	std	Y+5, r18	; 0x05
     332:	3e 83       	std	Y+6, r19	; 0x06
     334:	4f 83       	std	Y+7, r20	; 0x07
     336:	58 87       	std	Y+8, r21	; 0x08
     338:	69 87       	std	Y+9, r22	; 0x09
     33a:	7a 87       	std	Y+10, r23	; 0x0a
     33c:	8b 87       	std	Y+11, r24	; 0x0b
	MCP_write(MCP_TXB0SIDH, can_tx.id);
     33e:	6e 2d       	mov	r22, r14
     340:	81 e3       	ldi	r24, 0x31	; 49
     342:	0e 94 3e 0a 	call	0x147c	; 0x147c <MCP_write>
	MCP_write(MCP_TXB0SIDH, can_tx.id);
     346:	6e 2d       	mov	r22, r14
     348:	81 e3       	ldi	r24, 0x31	; 49
     34a:	0e 94 3e 0a 	call	0x147c	; 0x147c <MCP_write>

	MCP_write(MCP_TXB0DLC, (can_tx.length));
     34e:	60 2f       	mov	r22, r16
     350:	85 e3       	ldi	r24, 0x35	; 53
     352:	0e 94 3e 0a 	call	0x147c	; 0x147c <MCP_write>
	for(int i = 0; i < can_tx.length; i++)
     356:	c0 2e       	mov	r12, r16
     358:	d1 2c       	mov	r13, r1
     35a:	1c 14       	cp	r1, r12
     35c:	1d 04       	cpc	r1, r13
     35e:	94 f4       	brge	.+36     	; 0x384 <CAN_message_send+0x7c>
     360:	7e 01       	movw	r14, r28
     362:	84 e0       	ldi	r24, 0x04	; 4
     364:	e8 0e       	add	r14, r24
     366:	f1 1c       	adc	r15, r1
     368:	00 e0       	ldi	r16, 0x00	; 0
     36a:	10 e0       	ldi	r17, 0x00	; 0
	{
		MCP_write(MCP_TXB0D0 + i, can_tx.data[i]);
     36c:	f7 01       	movw	r30, r14
     36e:	61 91       	ld	r22, Z+
     370:	7f 01       	movw	r14, r30
     372:	86 e3       	ldi	r24, 0x36	; 54
     374:	80 0f       	add	r24, r16
     376:	0e 94 3e 0a 	call	0x147c	; 0x147c <MCP_write>
{
	MCP_write(MCP_TXB0SIDH, can_tx.id);
	MCP_write(MCP_TXB0SIDH, can_tx.id);

	MCP_write(MCP_TXB0DLC, (can_tx.length));
	for(int i = 0; i < can_tx.length; i++)
     37a:	0f 5f       	subi	r16, 0xFF	; 255
     37c:	1f 4f       	sbci	r17, 0xFF	; 255
     37e:	0c 15       	cp	r16, r12
     380:	1d 05       	cpc	r17, r13
     382:	a4 f3       	brlt	.-24     	; 0x36c <CAN_message_send+0x64>
	{
		MCP_write(MCP_TXB0D0 + i, can_tx.data[i]);
	}
	MCP_rts(MCP_RTS_TX0);
     384:	81 e8       	ldi	r24, 0x81	; 129
     386:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <MCP_rts>
	

}
     38a:	2b 96       	adiw	r28, 0x0b	; 11
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	f8 94       	cli
     390:	de bf       	out	0x3e, r29	; 62
     392:	0f be       	out	0x3f, r0	; 63
     394:	cd bf       	out	0x3d, r28	; 61
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	df 90       	pop	r13
     3a4:	cf 90       	pop	r12
     3a6:	08 95       	ret

000003a8 <CAN_data_receive>:

void CAN_data_receive(msg *message)
{
     3a8:	ef 92       	push	r14
     3aa:	ff 92       	push	r15
     3ac:	0f 93       	push	r16
     3ae:	1f 93       	push	r17
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	7c 01       	movw	r14, r24
	message->id = (MCP_read(MCP_RXB0SIDH));
     3b6:	81 e6       	ldi	r24, 0x61	; 97
     3b8:	0e 94 30 0a 	call	0x1460	; 0x1460 <MCP_read>
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	f7 01       	movw	r30, r14
     3c0:	91 83       	std	Z+1, r25	; 0x01
     3c2:	80 83       	st	Z, r24
	message->length = MCP_read(MCP_RXB0DLC);
     3c4:	85 e6       	ldi	r24, 0x65	; 101
     3c6:	0e 94 30 0a 	call	0x1460	; 0x1460 <MCP_read>
     3ca:	f7 01       	movw	r30, r14
     3cc:	82 83       	std	Z+2, r24	; 0x02

	for(int i = 0; i < message->length; i++) 
     3ce:	88 23       	and	r24, r24
     3d0:	99 f0       	breq	.+38     	; 0x3f8 <CAN_data_receive+0x50>
     3d2:	87 01       	movw	r16, r14
     3d4:	0d 5f       	subi	r16, 0xFD	; 253
     3d6:	1f 4f       	sbci	r17, 0xFF	; 255
     3d8:	c0 e0       	ldi	r28, 0x00	; 0
     3da:	d0 e0       	ldi	r29, 0x00	; 0
	{
		message->data[i] = MCP_read(MCP_RXB0DM + i);
     3dc:	8c 2f       	mov	r24, r28
     3de:	8a 59       	subi	r24, 0x9A	; 154
     3e0:	0e 94 30 0a 	call	0x1460	; 0x1460 <MCP_read>
     3e4:	f8 01       	movw	r30, r16
     3e6:	81 93       	st	Z+, r24
     3e8:	8f 01       	movw	r16, r30
void CAN_data_receive(msg *message)
{
	message->id = (MCP_read(MCP_RXB0SIDH));
	message->length = MCP_read(MCP_RXB0DLC);

	for(int i = 0; i < message->length; i++) 
     3ea:	21 96       	adiw	r28, 0x01	; 1
     3ec:	f7 01       	movw	r30, r14
     3ee:	22 81       	ldd	r18, Z+2	; 0x02
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	c2 17       	cp	r28, r18
     3f4:	d3 07       	cpc	r29, r19
     3f6:	94 f3       	brlt	.-28     	; 0x3dc <CAN_data_receive+0x34>
	{
		message->data[i] = MCP_read(MCP_RXB0DM + i);
	}

	MCP_write(MCP_CANINTF,0);
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	8c e2       	ldi	r24, 0x2C	; 44
     3fc:	0e 94 3e 0a 	call	0x147c	; 0x147c <MCP_write>
}
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	ff 90       	pop	r15
     40a:	ef 90       	pop	r14
     40c:	08 95       	ret

0000040e <game>:
#include "CAN.h"
#include "hearts.h"


void game()
{
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	c6 57       	subi	r28, 0x76	; 118
     418:	d1 40       	sbci	r29, 0x01	; 1
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	de bf       	out	0x3e, r29	; 62
     420:	0f be       	out	0x3f, r0	; 63
     422:	cd bf       	out	0x3d, r28	; 61
	//MENU CONSTANTS
	const char menu[4][13] = { // menu 1
     424:	de 01       	movw	r26, r28
     426:	11 96       	adiw	r26, 0x01	; 1
     428:	84 e3       	ldi	r24, 0x34	; 52
     42a:	fd 01       	movw	r30, r26
     42c:	11 92       	st	Z+, r1
     42e:	8a 95       	dec	r24
     430:	e9 f7       	brne	.-6      	; 0x42c <game+0x1e>
     432:	8d e0       	ldi	r24, 0x0D	; 13
     434:	e6 e0       	ldi	r30, 0x06	; 6
     436:	f1 e0       	ldi	r31, 0x01	; 1
     438:	01 90       	ld	r0, Z+
     43a:	0d 92       	st	X+, r0
     43c:	8a 95       	dec	r24
     43e:	e1 f7       	brne	.-8      	; 0x438 <game+0x2a>
     440:	8d e0       	ldi	r24, 0x0D	; 13
     442:	e4 e1       	ldi	r30, 0x14	; 20
     444:	f1 e0       	ldi	r31, 0x01	; 1
     446:	de 01       	movw	r26, r28
     448:	1e 96       	adiw	r26, 0x0e	; 14
     44a:	01 90       	ld	r0, Z+
     44c:	0d 92       	st	X+, r0
     44e:	8a 95       	dec	r24
     450:	e1 f7       	brne	.-8      	; 0x44a <game+0x3c>
     452:	8d e0       	ldi	r24, 0x0D	; 13
     454:	e2 e2       	ldi	r30, 0x22	; 34
     456:	f1 e0       	ldi	r31, 0x01	; 1
     458:	de 01       	movw	r26, r28
     45a:	5b 96       	adiw	r26, 0x1b	; 27
     45c:	01 90       	ld	r0, Z+
     45e:	0d 92       	st	X+, r0
     460:	8a 95       	dec	r24
     462:	e1 f7       	brne	.-8      	; 0x45c <game+0x4e>
		"--HOVEDMENY--",
		" Choose Team ",
		" Gamemodes   ",
	};
	const char team[5][18] = {  // menu 2
     464:	8a e5       	ldi	r24, 0x5A	; 90
     466:	e0 e3       	ldi	r30, 0x30	; 48
     468:	f1 e0       	ldi	r31, 0x01	; 1
     46a:	de 01       	movw	r26, r28
     46c:	d5 96       	adiw	r26, 0x35	; 53
     46e:	01 90       	ld	r0, Z+
     470:	0d 92       	st	X+, r0
     472:	8a 95       	dec	r24
     474:	e1 f7       	brne	.-8      	; 0x46e <game+0x60>
		" German           ",
		" Allied           ",
		" Soviet           ",
		" Sweden (cowards) ",
	};
	const char games[4][13] = {  // menu 3
     476:	84 e3       	ldi	r24, 0x34	; 52
     478:	ea e8       	ldi	r30, 0x8A	; 138
     47a:	f1 e0       	ldi	r31, 0x01	; 1
     47c:	de 01       	movw	r26, r28
     47e:	a1 57       	subi	r26, 0x71	; 113
     480:	bf 4f       	sbci	r27, 0xFF	; 255
     482:	01 90       	ld	r0, Z+
     484:	0d 92       	st	X+, r0
     486:	8a 95       	dec	r24
     488:	e1 f7       	brne	.-8      	; 0x482 <game+0x74>
		"--GAMEMODES--",
		" Normal      ",
		" Hard-mode   ",
		" Dark souls  ",
	};
	const char team_print[4][20] = {  // print team
     48a:	80 e5       	ldi	r24, 0x50	; 80
     48c:	ee eb       	ldi	r30, 0xBE	; 190
     48e:	f1 e0       	ldi	r31, 0x01	; 1
     490:	de 01       	movw	r26, r28
     492:	ad 53       	subi	r26, 0x3D	; 61
     494:	bf 4f       	sbci	r27, 0xFF	; 255
     496:	01 90       	ld	r0, Z+
     498:	0d 92       	st	X+, r0
     49a:	8a 95       	dec	r24
     49c:	e1 f7       	brne	.-8      	; 0x496 <game+0x88>
		"Team chosen: German ",
		"Team chosen: Allied ",
		"Team chosen: Soviet ",
		"Team chosen: Sweden ",
	};
	const char game_over[1][22] = {  // game over
     49e:	86 e1       	ldi	r24, 0x16	; 22
     4a0:	ee e0       	ldi	r30, 0x0E	; 14
     4a2:	f2 e0       	ldi	r31, 0x02	; 2
     4a4:	de 01       	movw	r26, r28
     4a6:	ad 5e       	subi	r26, 0xED	; 237
     4a8:	be 4f       	sbci	r27, 0xFE	; 254
     4aa:	01 90       	ld	r0, Z+
     4ac:	0d 92       	st	X+, r0
     4ae:	8a 95       	dec	r24
     4b0:	e1 f7       	brne	.-8      	; 0x4aa <game+0x9c>
	};
	const char hearts[2][1] = {  // hearts
		" ", //empty heart -- space ---
		"!", //full heart  --- ! ---
	};
	const char gameOn[1][17] = {  // menu  -- game on--,
     4b2:	81 e1       	ldi	r24, 0x11	; 17
     4b4:	e4 e2       	ldi	r30, 0x24	; 36
     4b6:	f2 e0       	ldi	r31, 0x02	; 2
     4b8:	de 01       	movw	r26, r28
     4ba:	a7 5d       	subi	r26, 0xD7	; 215
     4bc:	be 4f       	sbci	r27, 0xFE	; 254
     4be:	01 90       	ld	r0, Z+
     4c0:	0d 92       	st	X+, r0
     4c2:	8a 95       	dec	r24
     4c4:	e1 f7       	brne	.-8      	; 0x4be <game+0xb0>
		"-- G A M I N G --",
	};
	const char score[1][9] = {  
     4c6:	89 e0       	ldi	r24, 0x09	; 9
     4c8:	e5 e3       	ldi	r30, 0x35	; 53
     4ca:	f2 e0       	ldi	r31, 0x02	; 2
     4cc:	de 01       	movw	r26, r28
     4ce:	a6 5c       	subi	r26, 0xC6	; 198
     4d0:	be 4f       	sbci	r27, 0xFE	; 254
     4d2:	01 90       	ld	r0, Z+
     4d4:	0d 92       	st	X+, r0
     4d6:	8a 95       	dec	r24
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <game+0xc4>
			"S C O R E",
	};
	const char numbers[10][1] = {  
     4da:	8a e0       	ldi	r24, 0x0A	; 10
     4dc:	ee e3       	ldi	r30, 0x3E	; 62
     4de:	f2 e0       	ldi	r31, 0x02	; 2
     4e0:	de 01       	movw	r26, r28
     4e2:	ad 5b       	subi	r26, 0xBD	; 189
     4e4:	be 4f       	sbci	r27, 0xFE	; 254
     4e6:	01 90       	ld	r0, Z+
     4e8:	0d 92       	st	X+, r0
     4ea:	8a 95       	dec	r24
     4ec:	e1 f7       	brne	.-8      	; 0x4e6 <game+0xd8>
	
	
	// SETTING NOED 2 TO WAITING STATE
	msg can_message;
	
	can_message.id = 0x70;
     4ee:	80 e7       	ldi	r24, 0x70	; 112
     4f0:	e8 2e       	mov	r14, r24
     4f2:	c3 5b       	subi	r28, 0xB3	; 179
     4f4:	de 4f       	sbci	r29, 0xFE	; 254
     4f6:	88 83       	st	Y, r24
     4f8:	cd 54       	subi	r28, 0x4D	; 77
     4fa:	d1 40       	sbci	r29, 0x01	; 1
     4fc:	c2 5b       	subi	r28, 0xB2	; 178
     4fe:	de 4f       	sbci	r29, 0xFE	; 254
     500:	18 82       	st	Y, r1
     502:	ce 54       	subi	r28, 0x4E	; 78
     504:	d1 40       	sbci	r29, 0x01	; 1
	can_message.length = 7;				
     506:	87 e0       	ldi	r24, 0x07	; 7
     508:	c1 5b       	subi	r28, 0xB1	; 177
     50a:	de 4f       	sbci	r29, 0xFE	; 254
     50c:	88 83       	st	Y, r24
     50e:	cf 54       	subi	r28, 0x4F	; 79
     510:	d1 40       	sbci	r29, 0x01	; 1
	can_message.data[2] = 10;
     512:	8a e0       	ldi	r24, 0x0A	; 10
     514:	ce 5a       	subi	r28, 0xAE	; 174
     516:	de 4f       	sbci	r29, 0xFE	; 254
     518:	88 83       	st	Y, r24
     51a:	c2 55       	subi	r28, 0x52	; 82
     51c:	d1 40       	sbci	r29, 0x01	; 1
	
	CAN_message_send(can_message);
     51e:	f1 2c       	mov	r15, r1
     520:	07 e0       	ldi	r16, 0x07	; 7
     522:	c0 5b       	subi	r28, 0xB0	; 176
     524:	de 4f       	sbci	r29, 0xFE	; 254
     526:	18 81       	ld	r17, Y
     528:	c0 55       	subi	r28, 0x50	; 80
     52a:	d1 40       	sbci	r29, 0x01	; 1
     52c:	cf 5a       	subi	r28, 0xAF	; 175
     52e:	de 4f       	sbci	r29, 0xFE	; 254
     530:	28 81       	ld	r18, Y
     532:	c1 55       	subi	r28, 0x51	; 81
     534:	d1 40       	sbci	r29, 0x01	; 1
     536:	3a e0       	ldi	r19, 0x0A	; 10
     538:	cd 5a       	subi	r28, 0xAD	; 173
     53a:	de 4f       	sbci	r29, 0xFE	; 254
     53c:	48 81       	ld	r20, Y
     53e:	c3 55       	subi	r28, 0x53	; 83
     540:	d1 40       	sbci	r29, 0x01	; 1
     542:	cc 5a       	subi	r28, 0xAC	; 172
     544:	de 4f       	sbci	r29, 0xFE	; 254
     546:	58 81       	ld	r21, Y
     548:	c4 55       	subi	r28, 0x54	; 84
     54a:	d1 40       	sbci	r29, 0x01	; 1
     54c:	cb 5a       	subi	r28, 0xAB	; 171
     54e:	de 4f       	sbci	r29, 0xFE	; 254
     550:	68 81       	ld	r22, Y
     552:	c5 55       	subi	r28, 0x55	; 85
     554:	d1 40       	sbci	r29, 0x01	; 1
     556:	ca 5a       	subi	r28, 0xAA	; 170
     558:	de 4f       	sbci	r29, 0xFE	; 254
     55a:	78 81       	ld	r23, Y
     55c:	c6 55       	subi	r28, 0x56	; 86
     55e:	d1 40       	sbci	r29, 0x01	; 1
     560:	c9 5a       	subi	r28, 0xA9	; 169
     562:	de 4f       	sbci	r29, 0xFE	; 254
     564:	88 81       	ld	r24, Y
     566:	c7 55       	subi	r28, 0x57	; 87
     568:	d1 40       	sbci	r29, 0x01	; 1
     56a:	0e 94 84 01 	call	0x308	; 0x308 <CAN_message_send>
	int select_menu = 1;		// place in menu
	int sub_menu = 1;			//which menu
	int delay = 200;		
	int team_chosen = 0;		//default germany
	int gamemode_chosen;	
	char lives = 0;
     56e:	c7 59       	subi	r28, 0x97	; 151
     570:	de 4f       	sbci	r29, 0xFE	; 254
     572:	18 82       	st	Y, r1
     574:	c9 56       	subi	r28, 0x69	; 105
     576:	d1 40       	sbci	r29, 0x01	; 1
	
	//CONSTANTS
	int select_menu = 1;		// place in menu
	int sub_menu = 1;			//which menu
	int delay = 200;		
	int team_chosen = 0;		//default germany
     578:	cd 58       	subi	r28, 0x8D	; 141
     57a:	de 4f       	sbci	r29, 0xFE	; 254
     57c:	19 82       	std	Y+1, r1	; 0x01
     57e:	18 82       	st	Y, r1
     580:	c3 57       	subi	r28, 0x73	; 115
     582:	d1 40       	sbci	r29, 0x01	; 1
	};

	
	//CONSTANTS
	int select_menu = 1;		// place in menu
	int sub_menu = 1;			//which menu
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	90 e0       	ldi	r25, 0x00	; 0
			while(n >= 1){
				n /= 10;
				++count;
			}

			char arr[count];
     588:	c2 59       	subi	r28, 0x92	; 146
     58a:	de 4f       	sbci	r29, 0xFE	; 254
     58c:	18 82       	st	Y, r1
     58e:	ce 56       	subi	r28, 0x6E	; 110
     590:	d1 40       	sbci	r29, 0x01	; 1
     592:	c1 59       	subi	r28, 0x91	; 145
     594:	de 4f       	sbci	r29, 0xFE	; 254
     596:	18 82       	st	Y, r1
     598:	cf 56       	subi	r28, 0x6F	; 111
     59a:	d1 40       	sbci	r29, 0x01	; 1
			
			//READ MULTIFUNCTION CARD VALUES
			DDRB &= ~(1 << PB2);
			bool val_joystick;
			bool joystick_pressed = val_joystick;
			val_joystick = (PINB & (1 << PB2));
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	cf 58       	subi	r28, 0x8F	; 143
     5a0:	de 4f       	sbci	r29, 0xFE	; 254
     5a2:	f8 83       	st	Y, r31
     5a4:	c1 57       	subi	r28, 0x71	; 113
     5a6:	d1 40       	sbci	r29, 0x01	; 1
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	ce 58       	subi	r28, 0x8E	; 142
     5ac:	de 4f       	sbci	r29, 0xFE	; 254
     5ae:	28 83       	st	Y, r18
     5b0:	c2 57       	subi	r28, 0x72	; 114
     5b2:	d1 40       	sbci	r29, 0x01	; 1
     5b4:	cd 59       	subi	r28, 0x9D	; 157
     5b6:	de 4f       	sbci	r29, 0xFE	; 254
     5b8:	f8 83       	st	Y, r31
     5ba:	c3 56       	subi	r28, 0x63	; 99
     5bc:	d1 40       	sbci	r29, 0x01	; 1
     5be:	cc 59       	subi	r28, 0x9C	; 156
     5c0:	de 4f       	sbci	r29, 0xFE	; 254
     5c2:	28 83       	st	Y, r18
     5c4:	c4 56       	subi	r28, 0x64	; 100
     5c6:	d1 40       	sbci	r29, 0x01	; 1
	while(1){
		
		select_menu = 1;  // setting the menu to the first choice every time
		
		// MAIN MENU
		while (sub_menu == 1){ 
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	91 05       	cpc	r25, r1
     5cc:	09 f0       	breq	.+2      	; 0x5d0 <__stack+0xd1>
     5ce:	0c c2       	rjmp	.+1048   	; 0x9e8 <__stack+0x4e9>
	CAN_message_send(can_message);
	
	//START PROGRAM
	while(1){
		
		select_menu = 1;  // setting the menu to the first choice every time
     5d0:	22 24       	eor	r2, r2
     5d2:	23 94       	inc	r2
     5d4:	31 2c       	mov	r3, r1
		
		// MAIN MENU
		while (sub_menu == 1){ 

			unsigned int x_volt = read_adc(ADC_CHANNEL_JOY_X);
     5d6:	85 e0       	ldi	r24, 0x05	; 5
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 50 01 	call	0x2a0	; 0x2a0 <read_adc>
     5de:	18 2f       	mov	r17, r24
			unsigned int y_volt = read_adc(ADC_CHANNEL_JOY_Y);
     5e0:	84 e0       	ldi	r24, 0x04	; 4
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <read_adc>
     5e8:	28 2f       	mov	r18, r24
     5ea:	30 e0       	ldi	r19, 0x00	; 0
			
			if (y_volt < 125 && select_menu < 2){
     5ec:	2d 37       	cpi	r18, 0x7D	; 125
     5ee:	31 05       	cpc	r19, r1
     5f0:	40 f4       	brcc	.+16     	; 0x602 <__stack+0x103>
     5f2:	42 e0       	ldi	r20, 0x02	; 2
     5f4:	24 16       	cp	r2, r20
     5f6:	31 04       	cpc	r3, r1
     5f8:	0c f0       	brlt	.+2      	; 0x5fc <__stack+0xfd>
     5fa:	cd c6       	rjmp	.+3482   	; 0x1396 <__stack+0xe97>
				select_menu++;
     5fc:	5f ef       	ldi	r21, 0xFF	; 255
     5fe:	25 1a       	sub	r2, r21
     600:	35 0a       	sbc	r3, r21
			}
			if (y_volt > 130 && select_menu > 1){
     602:	23 38       	cpi	r18, 0x83	; 131
     604:	31 05       	cpc	r19, r1
     606:	38 f0       	brcs	.+14     	; 0x616 <__stack+0x117>
     608:	82 e0       	ldi	r24, 0x02	; 2
     60a:	28 16       	cp	r2, r24
     60c:	31 04       	cpc	r3, r1
     60e:	1c f0       	brlt	.+6      	; 0x616 <__stack+0x117>
				select_menu--;
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	29 1a       	sub	r2, r25
     614:	31 08       	sbc	r3, r1
			}
			
			if(x_volt > 135){
     616:	18 38       	cpi	r17, 0x88	; 136
     618:	50 f0       	brcs	.+20     	; 0x62e <__stack+0x12f>
				if(select_menu == 1){ 	//go to teams menu
     61a:	a1 e0       	ldi	r26, 0x01	; 1
     61c:	2a 16       	cp	r2, r26
     61e:	31 04       	cpc	r3, r1
     620:	09 f4       	brne	.+2      	; 0x624 <__stack+0x125>
     622:	c3 c0       	rjmp	.+390    	; 0x7aa <__stack+0x2ab>
					sub_menu = 2;

					break;
				}
				if(select_menu == 2){ 	 // go to gamemodes menu
     624:	b2 e0       	ldi	r27, 0x02	; 2
     626:	2b 16       	cp	r2, r27
     628:	31 04       	cpc	r3, r1
     62a:	09 f4       	brne	.+2      	; 0x62e <__stack+0x12f>
     62c:	e5 c1       	rjmp	.+970    	; 0x9f8 <__stack+0x4f9>

					break;
				}
			}
			
			clear_oled();
     62e:	0e 94 a7 0a 	call	0x154e	; 0x154e <clear_oled>
			oled_set_column(0);
     632:	c2 59       	subi	r28, 0x92	; 146
     634:	de 4f       	sbci	r29, 0xFE	; 254
     636:	88 81       	ld	r24, Y
     638:	ce 56       	subi	r28, 0x6E	; 110
     63a:	d1 40       	sbci	r29, 0x01	; 1
     63c:	c1 59       	subi	r28, 0x91	; 145
     63e:	de 4f       	sbci	r29, 0xFE	; 254
     640:	98 81       	ld	r25, Y
     642:	cf 56       	subi	r28, 0x6F	; 111
     644:	d1 40       	sbci	r29, 0x01	; 1
     646:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
			oled_set_page(0);
     64a:	c2 59       	subi	r28, 0x92	; 146
     64c:	de 4f       	sbci	r29, 0xFE	; 254
     64e:	88 81       	ld	r24, Y
     650:	ce 56       	subi	r28, 0x6E	; 110
     652:	d1 40       	sbci	r29, 0x01	; 1
     654:	c1 59       	subi	r28, 0x91	; 145
     656:	de 4f       	sbci	r29, 0xFE	; 254
     658:	98 81       	ld	r25, Y
     65a:	cf 56       	subi	r28, 0x6F	; 111
     65c:	d1 40       	sbci	r29, 0x01	; 1
     65e:	0e 94 a3 0a 	call	0x1546	; 0x1546 <oled_set_page>
     662:	43 ef       	ldi	r20, 0xF3	; 243
     664:	91 01       	movw	r18, r2
     666:	42 03       	mulsu	r20, r18
     668:	20 01       	movw	r4, r0
     66a:	43 9f       	mul	r20, r19
     66c:	50 0c       	add	r5, r0
     66e:	11 24       	eor	r1, r1
     670:	c2 59       	subi	r28, 0x92	; 146
     672:	de 4f       	sbci	r29, 0xFE	; 254
     674:	68 80       	ld	r6, Y
     676:	ce 56       	subi	r28, 0x6E	; 110
     678:	d1 40       	sbci	r29, 0x01	; 1
     67a:	c1 59       	subi	r28, 0x91	; 145
     67c:	de 4f       	sbci	r29, 0xFE	; 254
     67e:	78 80       	ld	r7, Y
     680:	cf 56       	subi	r28, 0x6F	; 111
     682:	d1 40       	sbci	r29, 0x01	; 1
			
			for (k = 0; k < 3; k++){
     684:	86 2c       	mov	r8, r6
     686:	97 2c       	mov	r9, r7
     688:	5d e0       	ldi	r21, 0x0D	; 13
     68a:	52 9d       	mul	r21, r2
     68c:	c0 01       	movw	r24, r0
     68e:	53 9d       	mul	r21, r3
     690:	90 0d       	add	r25, r0
     692:	11 24       	eor	r1, r1
     694:	a1 e0       	ldi	r26, 0x01	; 1
     696:	b0 e0       	ldi	r27, 0x00	; 0
     698:	ac 0f       	add	r26, r28
     69a:	bd 1f       	adc	r27, r29
     69c:	a8 0f       	add	r26, r24
     69e:	b9 1f       	adc	r27, r25
     6a0:	cb 59       	subi	r28, 0x9B	; 155
     6a2:	de 4f       	sbci	r29, 0xFE	; 254
     6a4:	b9 83       	std	Y+1, r27	; 0x01
     6a6:	a8 83       	st	Y, r26
     6a8:	c5 56       	subi	r28, 0x65	; 101
     6aa:	d1 40       	sbci	r29, 0x01	; 1
     6ac:	60 c0       	rjmp	.+192    	; 0x76e <__stack+0x26f>
				for (j = 0; j < 13; j++){
					for (i = 0; i < 5; i++){
						if(select_menu==k){
     6ae:	28 14       	cp	r2, r8
     6b0:	39 04       	cpc	r3, r9
     6b2:	d1 f4       	brne	.+52     	; 0x6e8 <__stack+0x1e9>
							oled_set_column(i+(j*5));
     6b4:	c7 01       	movw	r24, r14
     6b6:	80 0f       	add	r24, r16
     6b8:	91 1f       	adc	r25, r17
     6ba:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
							write_d(~pgm_read_byte(&font5[menu[k][j] - ' '][i]));
     6be:	f5 01       	movw	r30, r10
     6c0:	80 81       	ld	r24, Z
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	80 97       	sbiw	r24, 0x20	; 32
     6c6:	9c 01       	movw	r18, r24
     6c8:	22 0f       	add	r18, r18
     6ca:	33 1f       	adc	r19, r19
     6cc:	22 0f       	add	r18, r18
     6ce:	33 1f       	adc	r19, r19
     6d0:	82 0f       	add	r24, r18
     6d2:	93 1f       	adc	r25, r19
     6d4:	fc 01       	movw	r30, r24
     6d6:	e0 0f       	add	r30, r16
     6d8:	f1 1f       	adc	r31, r17
     6da:	ea 57       	subi	r30, 0x7A	; 122
     6dc:	ff 4f       	sbci	r31, 0xFF	; 255
     6de:	84 91       	lpm	r24, Z
     6e0:	80 95       	com	r24
     6e2:	0e 94 55 0a 	call	0x14aa	; 0x14aa <write_d>
     6e6:	17 c0       	rjmp	.+46     	; 0x716 <__stack+0x217>
						}
						else{
							oled_set_column(i+(j*5));
     6e8:	c8 01       	movw	r24, r16
     6ea:	8e 0d       	add	r24, r14
     6ec:	9f 1d       	adc	r25, r15
     6ee:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
							write_d(pgm_read_byte(&font5[menu[k][j] - ' '][i]));
     6f2:	d6 01       	movw	r26, r12
     6f4:	8c 91       	ld	r24, X
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	80 97       	sbiw	r24, 0x20	; 32
     6fa:	fc 01       	movw	r30, r24
     6fc:	ee 0f       	add	r30, r30
     6fe:	ff 1f       	adc	r31, r31
     700:	ee 0f       	add	r30, r30
     702:	ff 1f       	adc	r31, r31
     704:	e8 0f       	add	r30, r24
     706:	f9 1f       	adc	r31, r25
     708:	e0 0f       	add	r30, r16
     70a:	f1 1f       	adc	r31, r17
     70c:	ea 57       	subi	r30, 0x7A	; 122
     70e:	ff 4f       	sbci	r31, 0xFF	; 255
     710:	84 91       	lpm	r24, Z
     712:	0e 94 55 0a 	call	0x14aa	; 0x14aa <write_d>
			oled_set_column(0);
			oled_set_page(0);
			
			for (k = 0; k < 3; k++){
				for (j = 0; j < 13; j++){
					for (i = 0; i < 5; i++){
     716:	0f 5f       	subi	r16, 0xFF	; 255
     718:	1f 4f       	sbci	r17, 0xFF	; 255
     71a:	05 30       	cpi	r16, 0x05	; 5
     71c:	11 05       	cpc	r17, r1
     71e:	39 f6       	brne	.-114    	; 0x6ae <__stack+0x1af>
     720:	b5 e0       	ldi	r27, 0x05	; 5
     722:	eb 0e       	add	r14, r27
     724:	f1 1c       	adc	r15, r1
     726:	ef ef       	ldi	r30, 0xFF	; 255
     728:	ae 1a       	sub	r10, r30
     72a:	be 0a       	sbc	r11, r30
			clear_oled();
			oled_set_column(0);
			oled_set_page(0);
			
			for (k = 0; k < 3; k++){
				for (j = 0; j < 13; j++){
     72c:	f1 e4       	ldi	r31, 0x41	; 65
     72e:	ef 16       	cp	r14, r31
     730:	f1 04       	cpc	r15, r1
     732:	81 f0       	breq	.+32     	; 0x754 <__stack+0x255>
     734:	65 01       	movw	r12, r10
     736:	c4 0c       	add	r12, r4
     738:	d5 1c       	adc	r13, r5
     73a:	c6 0c       	add	r12, r6
     73c:	d7 1c       	adc	r13, r7
	CAN_message_send(can_message);
	
	//START PROGRAM
	while(1){
		
		select_menu = 1;  // setting the menu to the first choice every time
     73e:	cd 59       	subi	r28, 0x9D	; 157
     740:	de 4f       	sbci	r29, 0xFE	; 254
     742:	08 81       	ld	r16, Y
     744:	c3 56       	subi	r28, 0x63	; 99
     746:	d1 40       	sbci	r29, 0x01	; 1
     748:	cc 59       	subi	r28, 0x9C	; 156
     74a:	de 4f       	sbci	r29, 0xFE	; 254
     74c:	18 81       	ld	r17, Y
     74e:	c4 56       	subi	r28, 0x64	; 100
     750:	d1 40       	sbci	r29, 0x01	; 1
     752:	ad cf       	rjmp	.-166    	; 0x6ae <__stack+0x1af>
							oled_set_column(i+(j*5));
							write_d(pgm_read_byte(&font5[menu[k][j] - ' '][i]));
						}
					}
				}
				oled_set_page(k+1);
     754:	2f ef       	ldi	r18, 0xFF	; 255
     756:	82 1a       	sub	r8, r18
     758:	92 0a       	sbc	r9, r18
     75a:	c4 01       	movw	r24, r8
     75c:	0e 94 a3 0a 	call	0x1546	; 0x1546 <oled_set_page>
     760:	3d e0       	ldi	r19, 0x0D	; 13
     762:	63 0e       	add	r6, r19
     764:	71 1c       	adc	r7, r1
			
			clear_oled();
			oled_set_column(0);
			oled_set_page(0);
			
			for (k = 0; k < 3; k++){
     766:	43 e0       	ldi	r20, 0x03	; 3
     768:	84 16       	cp	r8, r20
     76a:	91 04       	cpc	r9, r1
     76c:	89 f0       	breq	.+34     	; 0x790 <__stack+0x291>
     76e:	cb 59       	subi	r28, 0x9B	; 155
     770:	de 4f       	sbci	r29, 0xFE	; 254
     772:	a8 80       	ld	r10, Y
     774:	b9 80       	ldd	r11, Y+1	; 0x01
     776:	c5 56       	subi	r28, 0x65	; 101
     778:	d1 40       	sbci	r29, 0x01	; 1
	CAN_message_send(can_message);
	
	//START PROGRAM
	while(1){
		
		select_menu = 1;  // setting the menu to the first choice every time
     77a:	cf 58       	subi	r28, 0x8F	; 143
     77c:	de 4f       	sbci	r29, 0xFE	; 254
     77e:	e8 80       	ld	r14, Y
     780:	c1 57       	subi	r28, 0x71	; 113
     782:	d1 40       	sbci	r29, 0x01	; 1
     784:	ce 58       	subi	r28, 0x8E	; 142
     786:	de 4f       	sbci	r29, 0xFE	; 254
     788:	f8 80       	ld	r15, Y
     78a:	c2 57       	subi	r28, 0x72	; 114
     78c:	d1 40       	sbci	r29, 0x01	; 1
     78e:	d2 cf       	rjmp	.-92     	; 0x734 <__stack+0x235>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     790:	5f ef       	ldi	r21, 0xFF	; 255
     792:	8f ef       	ldi	r24, 0xFF	; 255
     794:	92 e0       	ldi	r25, 0x02	; 2
     796:	51 50       	subi	r21, 0x01	; 1
     798:	80 40       	sbci	r24, 0x00	; 0
     79a:	90 40       	sbci	r25, 0x00	; 0
     79c:	e1 f7       	brne	.-8      	; 0x796 <__stack+0x297>
     79e:	00 c0       	rjmp	.+0      	; 0x7a0 <__stack+0x2a1>
     7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <__stack+0x2a3>
     7a2:	19 cf       	rjmp	.-462    	; 0x5d6 <__stack+0xd7>
     7a4:	22 24       	eor	r2, r2
     7a6:	23 94       	inc	r2
     7a8:	31 2c       	mov	r3, r1
			_delay_ms(delay);
		}
		
		// TEAM MENU
		while(sub_menu == 2){	
			clear_oled();
     7aa:	0e 94 a7 0a 	call	0x154e	; 0x154e <clear_oled>
			oled_set_column(0);
     7ae:	c2 59       	subi	r28, 0x92	; 146
     7b0:	de 4f       	sbci	r29, 0xFE	; 254
     7b2:	88 81       	ld	r24, Y
     7b4:	ce 56       	subi	r28, 0x6E	; 110
     7b6:	d1 40       	sbci	r29, 0x01	; 1
     7b8:	c1 59       	subi	r28, 0x91	; 145
     7ba:	de 4f       	sbci	r29, 0xFE	; 254
     7bc:	98 81       	ld	r25, Y
     7be:	cf 56       	subi	r28, 0x6F	; 111
     7c0:	d1 40       	sbci	r29, 0x01	; 1
     7c2:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
			oled_set_page(0);
     7c6:	c2 59       	subi	r28, 0x92	; 146
     7c8:	de 4f       	sbci	r29, 0xFE	; 254
     7ca:	88 81       	ld	r24, Y
     7cc:	ce 56       	subi	r28, 0x6E	; 110
     7ce:	d1 40       	sbci	r29, 0x01	; 1
     7d0:	c1 59       	subi	r28, 0x91	; 145
     7d2:	de 4f       	sbci	r29, 0xFE	; 254
     7d4:	98 81       	ld	r25, Y
     7d6:	cf 56       	subi	r28, 0x6F	; 111
     7d8:	d1 40       	sbci	r29, 0x01	; 1
     7da:	0e 94 a3 0a 	call	0x1546	; 0x1546 <oled_set_page>
     7de:	4e ee       	ldi	r20, 0xEE	; 238
     7e0:	91 01       	movw	r18, r2
     7e2:	42 03       	mulsu	r20, r18
     7e4:	20 01       	movw	r4, r0
     7e6:	43 9f       	mul	r20, r19
     7e8:	50 0c       	add	r5, r0
     7ea:	11 24       	eor	r1, r1
     7ec:	c2 59       	subi	r28, 0x92	; 146
     7ee:	de 4f       	sbci	r29, 0xFE	; 254
     7f0:	68 80       	ld	r6, Y
     7f2:	ce 56       	subi	r28, 0x6E	; 110
     7f4:	d1 40       	sbci	r29, 0x01	; 1
     7f6:	c1 59       	subi	r28, 0x91	; 145
     7f8:	de 4f       	sbci	r29, 0xFE	; 254
     7fa:	78 80       	ld	r7, Y
     7fc:	cf 56       	subi	r28, 0x6F	; 111
     7fe:	d1 40       	sbci	r29, 0x01	; 1
			
			for (k = 0; k < 5; k++){
     800:	a6 2c       	mov	r10, r6
     802:	b7 2c       	mov	r11, r7
     804:	c1 01       	movw	r24, r2
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	9c 01       	movw	r18, r24
     80c:	22 0f       	add	r18, r18
     80e:	33 1f       	adc	r19, r19
     810:	22 0f       	add	r18, r18
     812:	33 1f       	adc	r19, r19
     814:	22 0f       	add	r18, r18
     816:	33 1f       	adc	r19, r19
     818:	82 0f       	add	r24, r18
     81a:	93 1f       	adc	r25, r19
     81c:	a5 e3       	ldi	r26, 0x35	; 53
     81e:	b0 e0       	ldi	r27, 0x00	; 0
     820:	ac 0f       	add	r26, r28
     822:	bd 1f       	adc	r27, r29
     824:	a8 0f       	add	r26, r24
     826:	b9 1f       	adc	r27, r25
     828:	cb 59       	subi	r28, 0x9B	; 155
     82a:	de 4f       	sbci	r29, 0xFE	; 254
     82c:	b9 83       	std	Y+1, r27	; 0x01
     82e:	a8 83       	st	Y, r26
     830:	c5 56       	subi	r28, 0x65	; 101
     832:	d1 40       	sbci	r29, 0x01	; 1
     834:	60 c0       	rjmp	.+192    	; 0x8f6 <__stack+0x3f7>
				for (j = 0; j < 18; j++){
					for (i = 0; i < 5; i++){
						if(select_menu==k){
     836:	2a 14       	cp	r2, r10
     838:	3b 04       	cpc	r3, r11
     83a:	d1 f4       	brne	.+52     	; 0x870 <__stack+0x371>
							oled_set_column(i+(j*5));
     83c:	c8 01       	movw	r24, r16
     83e:	8e 0d       	add	r24, r14
     840:	9f 1d       	adc	r25, r15
     842:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
							write_d(~pgm_read_byte(&font5[team[k][j] - ' '][i]));
     846:	f4 01       	movw	r30, r8
     848:	80 81       	ld	r24, Z
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	80 97       	sbiw	r24, 0x20	; 32
     84e:	9c 01       	movw	r18, r24
     850:	22 0f       	add	r18, r18
     852:	33 1f       	adc	r19, r19
     854:	22 0f       	add	r18, r18
     856:	33 1f       	adc	r19, r19
     858:	82 0f       	add	r24, r18
     85a:	93 1f       	adc	r25, r19
     85c:	fc 01       	movw	r30, r24
     85e:	e0 0f       	add	r30, r16
     860:	f1 1f       	adc	r31, r17
     862:	ea 57       	subi	r30, 0x7A	; 122
     864:	ff 4f       	sbci	r31, 0xFF	; 255
     866:	84 91       	lpm	r24, Z
     868:	80 95       	com	r24
     86a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <write_d>
     86e:	17 c0       	rjmp	.+46     	; 0x89e <__stack+0x39f>
						}
						else{
							oled_set_column(i+(j*5));
     870:	c8 01       	movw	r24, r16
     872:	8e 0d       	add	r24, r14
     874:	9f 1d       	adc	r25, r15
     876:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
							write_d(pgm_read_byte(&font5[team[k][j] - ' '][i]));
     87a:	d6 01       	movw	r26, r12
     87c:	8c 91       	ld	r24, X
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	80 97       	sbiw	r24, 0x20	; 32
     882:	fc 01       	movw	r30, r24
     884:	ee 0f       	add	r30, r30
     886:	ff 1f       	adc	r31, r31
     888:	ee 0f       	add	r30, r30
     88a:	ff 1f       	adc	r31, r31
     88c:	e8 0f       	add	r30, r24
     88e:	f9 1f       	adc	r31, r25
     890:	e0 0f       	add	r30, r16
     892:	f1 1f       	adc	r31, r17
     894:	ea 57       	subi	r30, 0x7A	; 122
     896:	ff 4f       	sbci	r31, 0xFF	; 255
     898:	84 91       	lpm	r24, Z
     89a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <write_d>
			oled_set_column(0);
			oled_set_page(0);
			
			for (k = 0; k < 5; k++){
				for (j = 0; j < 18; j++){
					for (i = 0; i < 5; i++){
     89e:	0f 5f       	subi	r16, 0xFF	; 255
     8a0:	1f 4f       	sbci	r17, 0xFF	; 255
     8a2:	05 30       	cpi	r16, 0x05	; 5
     8a4:	11 05       	cpc	r17, r1
     8a6:	39 f6       	brne	.-114    	; 0x836 <__stack+0x337>
     8a8:	b5 e0       	ldi	r27, 0x05	; 5
     8aa:	eb 0e       	add	r14, r27
     8ac:	f1 1c       	adc	r15, r1
     8ae:	ef ef       	ldi	r30, 0xFF	; 255
     8b0:	8e 1a       	sub	r8, r30
     8b2:	9e 0a       	sbc	r9, r30
			clear_oled();
			oled_set_column(0);
			oled_set_page(0);
			
			for (k = 0; k < 5; k++){
				for (j = 0; j < 18; j++){
     8b4:	fa e5       	ldi	r31, 0x5A	; 90
     8b6:	ef 16       	cp	r14, r31
     8b8:	f1 04       	cpc	r15, r1
     8ba:	81 f0       	breq	.+32     	; 0x8dc <__stack+0x3dd>
     8bc:	64 01       	movw	r12, r8
     8be:	c4 0c       	add	r12, r4
     8c0:	d5 1c       	adc	r13, r5
     8c2:	c6 0c       	add	r12, r6
     8c4:	d7 1c       	adc	r13, r7
			unsigned int x_volt = read_adc(ADC_CHANNEL_JOY_X);
			unsigned int y_volt = read_adc(ADC_CHANNEL_JOY_Y);
			DDRB &= ~(1 << PB2);
			bool val_joystick;
			bool joystick_pressed = val_joystick;
			val_joystick = (PINB & (1 << PB2));
     8c6:	cd 59       	subi	r28, 0x9D	; 157
     8c8:	de 4f       	sbci	r29, 0xFE	; 254
     8ca:	08 81       	ld	r16, Y
     8cc:	c3 56       	subi	r28, 0x63	; 99
     8ce:	d1 40       	sbci	r29, 0x01	; 1
     8d0:	cc 59       	subi	r28, 0x9C	; 156
     8d2:	de 4f       	sbci	r29, 0xFE	; 254
     8d4:	18 81       	ld	r17, Y
     8d6:	c4 56       	subi	r28, 0x64	; 100
     8d8:	d1 40       	sbci	r29, 0x01	; 1
     8da:	ad cf       	rjmp	.-166    	; 0x836 <__stack+0x337>
							oled_set_column(i+(j*5));
							write_d(pgm_read_byte(&font5[team[k][j] - ' '][i]));
						}
					}
				}
				oled_set_page(k+1);
     8dc:	2f ef       	ldi	r18, 0xFF	; 255
     8de:	a2 1a       	sub	r10, r18
     8e0:	b2 0a       	sbc	r11, r18
     8e2:	c5 01       	movw	r24, r10
     8e4:	0e 94 a3 0a 	call	0x1546	; 0x1546 <oled_set_page>
     8e8:	32 e1       	ldi	r19, 0x12	; 18
     8ea:	63 0e       	add	r6, r19
     8ec:	71 1c       	adc	r7, r1
		while(sub_menu == 2){	
			clear_oled();
			oled_set_column(0);
			oled_set_page(0);
			
			for (k = 0; k < 5; k++){
     8ee:	45 e0       	ldi	r20, 0x05	; 5
     8f0:	a4 16       	cp	r10, r20
     8f2:	b1 04       	cpc	r11, r1
     8f4:	89 f0       	breq	.+34     	; 0x918 <__stack+0x419>
     8f6:	cb 59       	subi	r28, 0x9B	; 155
     8f8:	de 4f       	sbci	r29, 0xFE	; 254
     8fa:	88 80       	ld	r8, Y
     8fc:	99 80       	ldd	r9, Y+1	; 0x01
     8fe:	c5 56       	subi	r28, 0x65	; 101
     900:	d1 40       	sbci	r29, 0x01	; 1
			unsigned int x_volt = read_adc(ADC_CHANNEL_JOY_X);
			unsigned int y_volt = read_adc(ADC_CHANNEL_JOY_Y);
			DDRB &= ~(1 << PB2);
			bool val_joystick;
			bool joystick_pressed = val_joystick;
			val_joystick = (PINB & (1 << PB2));
     902:	cf 58       	subi	r28, 0x8F	; 143
     904:	de 4f       	sbci	r29, 0xFE	; 254
     906:	e8 80       	ld	r14, Y
     908:	c1 57       	subi	r28, 0x71	; 113
     90a:	d1 40       	sbci	r29, 0x01	; 1
     90c:	ce 58       	subi	r28, 0x8E	; 142
     90e:	de 4f       	sbci	r29, 0xFE	; 254
     910:	f8 80       	ld	r15, Y
     912:	c2 57       	subi	r28, 0x72	; 114
     914:	d1 40       	sbci	r29, 0x01	; 1
     916:	d2 cf       	rjmp	.-92     	; 0x8bc <__stack+0x3bd>
     918:	5f ef       	ldi	r21, 0xFF	; 255
     91a:	8f ef       	ldi	r24, 0xFF	; 255
     91c:	92 e0       	ldi	r25, 0x02	; 2
     91e:	51 50       	subi	r21, 0x01	; 1
     920:	80 40       	sbci	r24, 0x00	; 0
     922:	90 40       	sbci	r25, 0x00	; 0
     924:	e1 f7       	brne	.-8      	; 0x91e <__stack+0x41f>
     926:	00 c0       	rjmp	.+0      	; 0x928 <__stack+0x429>
     928:	00 c0       	rjmp	.+0      	; 0x92a <__stack+0x42b>
				oled_set_page(k+1);
			}
			_delay_ms(delay);
			
			//READ MULTIFUNCTION CARD VALUES
			unsigned int x_volt = read_adc(ADC_CHANNEL_JOY_X);
     92a:	85 e0       	ldi	r24, 0x05	; 5
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <read_adc>
     932:	18 2f       	mov	r17, r24
			unsigned int y_volt = read_adc(ADC_CHANNEL_JOY_Y);
     934:	84 e0       	ldi	r24, 0x04	; 4
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 50 01 	call	0x2a0	; 0x2a0 <read_adc>
     93c:	48 2f       	mov	r20, r24
     93e:	50 e0       	ldi	r21, 0x00	; 0
			DDRB &= ~(1 << PB2);
     940:	ba 98       	cbi	0x17, 2	; 23
			bool val_joystick;
			bool joystick_pressed = val_joystick;
			val_joystick = (PINB & (1 << PB2));
     942:	26 b3       	in	r18, 0x16	; 22
     944:	22 fb       	bst	r18, 2
     946:	22 27       	eor	r18, r18
     948:	20 f9       	bld	r18, 0
			else{
				joystick_pressed = 0;
			}

			
			if (y_volt < 125 && select_menu < 4){	//5 lines
     94a:	4d 37       	cpi	r20, 0x7D	; 125
     94c:	51 05       	cpc	r21, r1
     94e:	38 f4       	brcc	.+14     	; 0x95e <__stack+0x45f>
     950:	a4 e0       	ldi	r26, 0x04	; 4
     952:	2a 16       	cp	r2, r26
     954:	31 04       	cpc	r3, r1
     956:	1c f4       	brge	.+6      	; 0x95e <__stack+0x45f>
				select_menu++;
     958:	bf ef       	ldi	r27, 0xFF	; 255
     95a:	2b 1a       	sub	r2, r27
     95c:	3b 0a       	sbc	r3, r27
			}
			if (y_volt > 135 && select_menu > 1){
     95e:	48 38       	cpi	r20, 0x88	; 136
     960:	51 05       	cpc	r21, r1
     962:	38 f0       	brcs	.+14     	; 0x972 <__stack+0x473>
     964:	e2 e0       	ldi	r30, 0x02	; 2
     966:	2e 16       	cp	r2, r30
     968:	31 04       	cpc	r3, r1
     96a:	1c f0       	brlt	.+6      	; 0x972 <__stack+0x473>
				select_menu--;
     96c:	f1 e0       	ldi	r31, 0x01	; 1
     96e:	2f 1a       	sub	r2, r31
     970:	31 08       	sbc	r3, r1
			}
			if(x_volt < 60){
     972:	1c 33       	cpi	r17, 0x3C	; 60
     974:	08 f4       	brcc	.+2      	; 0x978 <__stack+0x479>
     976:	14 c5       	rjmp	.+2600   	; 0x13a0 <__stack+0xea1>
				sub_menu = 1;
				break;
			}
			if(joystick_pressed==1){
     978:	ca 58       	subi	r28, 0x8A	; 138
     97a:	de 4f       	sbci	r29, 0xFE	; 254
     97c:	38 81       	ld	r19, Y
     97e:	c6 57       	subi	r28, 0x76	; 118
     980:	d1 40       	sbci	r29, 0x01	; 1
     982:	33 23       	and	r19, r19
     984:	31 f0       	breq	.+12     	; 0x992 <__stack+0x493>
			unsigned int x_volt = read_adc(ADC_CHANNEL_JOY_X);
			unsigned int y_volt = read_adc(ADC_CHANNEL_JOY_Y);
			DDRB &= ~(1 << PB2);
			bool val_joystick;
			bool joystick_pressed = val_joystick;
			val_joystick = (PINB & (1 << PB2));
     986:	ca 58       	subi	r28, 0x8A	; 138
     988:	de 4f       	sbci	r29, 0xFE	; 254
     98a:	28 83       	st	Y, r18
     98c:	c6 57       	subi	r28, 0x76	; 118
     98e:	d1 40       	sbci	r29, 0x01	; 1
     990:	0c cf       	rjmp	.-488    	; 0x7aa <__stack+0x2ab>
			if(x_volt < 60){
				sub_menu = 1;
				break;
			}
			if(joystick_pressed==1){
				if (select_menu == 1){
     992:	41 e0       	ldi	r20, 0x01	; 1
     994:	24 16       	cp	r2, r20
     996:	31 04       	cpc	r3, r1
     998:	49 f0       	breq	.+18     	; 0x9ac <__stack+0x4ad>
					team_chosen = 0;
				}
				if (select_menu == 2){	
     99a:	52 e0       	ldi	r21, 0x02	; 2
     99c:	25 16       	cp	r2, r21
     99e:	31 04       	cpc	r3, r1
     9a0:	a1 f0       	breq	.+40     	; 0x9ca <__stack+0x4cb>
					team_chosen = 1;
				}
				if (select_menu == 3){	
     9a2:	83 e0       	ldi	r24, 0x03	; 3
     9a4:	28 16       	cp	r2, r24
     9a6:	31 04       	cpc	r3, r1
     9a8:	59 f4       	brne	.+22     	; 0x9c0 <__stack+0x4c1>
     9aa:	fd c4       	rjmp	.+2554   	; 0x13a6 <__stack+0xea7>
				sub_menu = 1;
				break;
			}
			if(joystick_pressed==1){
				if (select_menu == 1){
					team_chosen = 0;
     9ac:	cd 58       	subi	r28, 0x8D	; 141
     9ae:	de 4f       	sbci	r29, 0xFE	; 254
     9b0:	18 82       	st	Y, r1
     9b2:	c3 57       	subi	r28, 0x73	; 115
     9b4:	d1 40       	sbci	r29, 0x01	; 1
     9b6:	cc 58       	subi	r28, 0x8C	; 140
     9b8:	de 4f       	sbci	r29, 0xFE	; 254
     9ba:	18 82       	st	Y, r1
     9bc:	c4 57       	subi	r28, 0x74	; 116
     9be:	d1 40       	sbci	r29, 0x01	; 1
					team_chosen = 1;
				}
				if (select_menu == 3){	
					team_chosen = 2;
				}
				if (select_menu == 4){	
     9c0:	94 e0       	ldi	r25, 0x04	; 4
     9c2:	29 16       	cp	r2, r25
     9c4:	31 04       	cpc	r3, r1
     9c6:	49 f4       	brne	.+18     	; 0x9da <__stack+0x4db>
     9c8:	f9 c4       	rjmp	.+2546   	; 0x13bc <__stack+0xebd>
			if(joystick_pressed==1){
				if (select_menu == 1){
					team_chosen = 0;
				}
				if (select_menu == 2){	
					team_chosen = 1;
     9ca:	a1 e0       	ldi	r26, 0x01	; 1
     9cc:	b0 e0       	ldi	r27, 0x00	; 0
     9ce:	cd 58       	subi	r28, 0x8D	; 141
     9d0:	de 4f       	sbci	r29, 0xFE	; 254
     9d2:	b9 83       	std	Y+1, r27	; 0x01
     9d4:	a8 83       	st	Y, r26
     9d6:	c3 57       	subi	r28, 0x73	; 115
     9d8:	d1 40       	sbci	r29, 0x01	; 1
					team_chosen = 2;
				}
				if (select_menu == 4){	
					team_chosen = 3;
				}
				sub_menu = 4;	// Go to print chosen team
     9da:	84 e0       	ldi	r24, 0x04	; 4
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	f8 c4       	rjmp	.+2544   	; 0x13d0 <__stack+0xed1>
			

		}
		
		//GAMEMODES MENU
		while (sub_menu == 3){ 	
     9e0:	83 30       	cpi	r24, 0x03	; 3
     9e2:	91 05       	cpc	r25, r1
     9e4:	31 f0       	breq	.+12     	; 0x9f2 <__stack+0x4f3>
     9e6:	18 c1       	rjmp	.+560    	; 0xc18 <__stack+0x719>
			}
			_delay_ms(delay);
		}
		
		// TEAM MENU
		while(sub_menu == 2){	
     9e8:	82 30       	cpi	r24, 0x02	; 2
     9ea:	91 05       	cpc	r25, r1
     9ec:	09 f4       	brne	.+2      	; 0x9f0 <__stack+0x4f1>
     9ee:	da ce       	rjmp	.-588    	; 0x7a4 <__stack+0x2a5>
     9f0:	f7 cf       	rjmp	.-18     	; 0x9e0 <__stack+0x4e1>
	CAN_message_send(can_message);
	
	//START PROGRAM
	while(1){
		
		select_menu = 1;  // setting the menu to the first choice every time
     9f2:	22 24       	eor	r2, r2
     9f4:	23 94       	inc	r2
     9f6:	31 2c       	mov	r3, r1
			
			//READ MULTIFUNCTION CARD VALUES
			DDRB &= ~(1 << PB2);
			bool val_joystick;
			bool joystick_pressed = val_joystick;
			val_joystick = (PINB & (1 << PB2));
     9f8:	cb 58       	subi	r28, 0x8B	; 139
     9fa:	de 4f       	sbci	r29, 0xFE	; 254
     9fc:	b8 81       	ld	r27, Y
     9fe:	c5 57       	subi	r28, 0x75	; 117
     a00:	d1 40       	sbci	r29, 0x01	; 1
     a02:	c9 59       	subi	r28, 0x99	; 153
     a04:	de 4f       	sbci	r29, 0xFE	; 254
     a06:	b8 83       	st	Y, r27
     a08:	c7 56       	subi	r28, 0x67	; 103
     a0a:	d1 40       	sbci	r29, 0x01	; 1
		}
		
		//GAMEMODES MENU
		while (sub_menu == 3){ 	
			
			clear_oled();
     a0c:	0e 94 a7 0a 	call	0x154e	; 0x154e <clear_oled>
			oled_set_column(0);
     a10:	c2 59       	subi	r28, 0x92	; 146
     a12:	de 4f       	sbci	r29, 0xFE	; 254
     a14:	88 81       	ld	r24, Y
     a16:	ce 56       	subi	r28, 0x6E	; 110
     a18:	d1 40       	sbci	r29, 0x01	; 1
     a1a:	c1 59       	subi	r28, 0x91	; 145
     a1c:	de 4f       	sbci	r29, 0xFE	; 254
     a1e:	98 81       	ld	r25, Y
     a20:	cf 56       	subi	r28, 0x6F	; 111
     a22:	d1 40       	sbci	r29, 0x01	; 1
     a24:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
			oled_set_page(0);
     a28:	c2 59       	subi	r28, 0x92	; 146
     a2a:	de 4f       	sbci	r29, 0xFE	; 254
     a2c:	88 81       	ld	r24, Y
     a2e:	ce 56       	subi	r28, 0x6E	; 110
     a30:	d1 40       	sbci	r29, 0x01	; 1
     a32:	c1 59       	subi	r28, 0x91	; 145
     a34:	de 4f       	sbci	r29, 0xFE	; 254
     a36:	98 81       	ld	r25, Y
     a38:	cf 56       	subi	r28, 0x6F	; 111
     a3a:	d1 40       	sbci	r29, 0x01	; 1
     a3c:	0e 94 a3 0a 	call	0x1546	; 0x1546 <oled_set_page>
     a40:	43 ef       	ldi	r20, 0xF3	; 243
     a42:	91 01       	movw	r18, r2
     a44:	42 03       	mulsu	r20, r18
     a46:	20 01       	movw	r4, r0
     a48:	43 9f       	mul	r20, r19
     a4a:	50 0c       	add	r5, r0
     a4c:	11 24       	eor	r1, r1
     a4e:	c2 59       	subi	r28, 0x92	; 146
     a50:	de 4f       	sbci	r29, 0xFE	; 254
     a52:	68 80       	ld	r6, Y
     a54:	ce 56       	subi	r28, 0x6E	; 110
     a56:	d1 40       	sbci	r29, 0x01	; 1
     a58:	c1 59       	subi	r28, 0x91	; 145
     a5a:	de 4f       	sbci	r29, 0xFE	; 254
     a5c:	78 80       	ld	r7, Y
     a5e:	cf 56       	subi	r28, 0x6F	; 111
     a60:	d1 40       	sbci	r29, 0x01	; 1
						
			for (k = 0; k < 4; k++){
     a62:	86 2c       	mov	r8, r6
     a64:	97 2c       	mov	r9, r7
     a66:	5d e0       	ldi	r21, 0x0D	; 13
     a68:	52 9d       	mul	r21, r2
     a6a:	c0 01       	movw	r24, r0
     a6c:	53 9d       	mul	r21, r3
     a6e:	90 0d       	add	r25, r0
     a70:	11 24       	eor	r1, r1
     a72:	af e8       	ldi	r26, 0x8F	; 143
     a74:	b0 e0       	ldi	r27, 0x00	; 0
     a76:	ac 0f       	add	r26, r28
     a78:	bd 1f       	adc	r27, r29
     a7a:	a8 0f       	add	r26, r24
     a7c:	b9 1f       	adc	r27, r25
     a7e:	cb 59       	subi	r28, 0x9B	; 155
     a80:	de 4f       	sbci	r29, 0xFE	; 254
     a82:	b9 83       	std	Y+1, r27	; 0x01
     a84:	a8 83       	st	Y, r26
     a86:	c5 56       	subi	r28, 0x65	; 101
     a88:	d1 40       	sbci	r29, 0x01	; 1
     a8a:	60 c0       	rjmp	.+192    	; 0xb4c <__stack+0x64d>
				for (j = 0; j < 13; j++){
					for (i = 0; i < 5; i++)	{
						if(select_menu==k)		{
     a8c:	28 14       	cp	r2, r8
     a8e:	39 04       	cpc	r3, r9
     a90:	d1 f4       	brne	.+52     	; 0xac6 <__stack+0x5c7>
							oled_set_column(i+(j*5));
     a92:	c7 01       	movw	r24, r14
     a94:	80 0f       	add	r24, r16
     a96:	91 1f       	adc	r25, r17
     a98:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
							write_d(~pgm_read_byte(&font5[games[k][j] - ' '][i]));
     a9c:	f5 01       	movw	r30, r10
     a9e:	80 81       	ld	r24, Z
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	80 97       	sbiw	r24, 0x20	; 32
     aa4:	9c 01       	movw	r18, r24
     aa6:	22 0f       	add	r18, r18
     aa8:	33 1f       	adc	r19, r19
     aaa:	22 0f       	add	r18, r18
     aac:	33 1f       	adc	r19, r19
     aae:	82 0f       	add	r24, r18
     ab0:	93 1f       	adc	r25, r19
     ab2:	fc 01       	movw	r30, r24
     ab4:	e0 0f       	add	r30, r16
     ab6:	f1 1f       	adc	r31, r17
     ab8:	ea 57       	subi	r30, 0x7A	; 122
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	84 91       	lpm	r24, Z
     abe:	80 95       	com	r24
     ac0:	0e 94 55 0a 	call	0x14aa	; 0x14aa <write_d>
     ac4:	17 c0       	rjmp	.+46     	; 0xaf4 <__stack+0x5f5>
						}
						else{
							oled_set_column(i+(j*5));
     ac6:	c8 01       	movw	r24, r16
     ac8:	8e 0d       	add	r24, r14
     aca:	9f 1d       	adc	r25, r15
     acc:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
							write_d(pgm_read_byte(&font5[games[k][j] - ' '][i]));
     ad0:	d6 01       	movw	r26, r12
     ad2:	8c 91       	ld	r24, X
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	80 97       	sbiw	r24, 0x20	; 32
     ad8:	fc 01       	movw	r30, r24
     ada:	ee 0f       	add	r30, r30
     adc:	ff 1f       	adc	r31, r31
     ade:	ee 0f       	add	r30, r30
     ae0:	ff 1f       	adc	r31, r31
     ae2:	e8 0f       	add	r30, r24
     ae4:	f9 1f       	adc	r31, r25
     ae6:	e0 0f       	add	r30, r16
     ae8:	f1 1f       	adc	r31, r17
     aea:	ea 57       	subi	r30, 0x7A	; 122
     aec:	ff 4f       	sbci	r31, 0xFF	; 255
     aee:	84 91       	lpm	r24, Z
     af0:	0e 94 55 0a 	call	0x14aa	; 0x14aa <write_d>
			oled_set_column(0);
			oled_set_page(0);
						
			for (k = 0; k < 4; k++){
				for (j = 0; j < 13; j++){
					for (i = 0; i < 5; i++)	{
     af4:	0f 5f       	subi	r16, 0xFF	; 255
     af6:	1f 4f       	sbci	r17, 0xFF	; 255
     af8:	05 30       	cpi	r16, 0x05	; 5
     afa:	11 05       	cpc	r17, r1
     afc:	39 f6       	brne	.-114    	; 0xa8c <__stack+0x58d>
     afe:	b5 e0       	ldi	r27, 0x05	; 5
     b00:	eb 0e       	add	r14, r27
     b02:	f1 1c       	adc	r15, r1
     b04:	ef ef       	ldi	r30, 0xFF	; 255
     b06:	ae 1a       	sub	r10, r30
     b08:	be 0a       	sbc	r11, r30
			clear_oled();
			oled_set_column(0);
			oled_set_page(0);
						
			for (k = 0; k < 4; k++){
				for (j = 0; j < 13; j++){
     b0a:	f1 e4       	ldi	r31, 0x41	; 65
     b0c:	ef 16       	cp	r14, r31
     b0e:	f1 04       	cpc	r15, r1
     b10:	81 f0       	breq	.+32     	; 0xb32 <__stack+0x633>
     b12:	65 01       	movw	r12, r10
     b14:	c4 0c       	add	r12, r4
     b16:	d5 1c       	adc	r13, r5
     b18:	c6 0c       	add	r12, r6
     b1a:	d7 1c       	adc	r13, r7
			
			//READ MULTIFUNCTION CARD VALUES
			DDRB &= ~(1 << PB2);
			bool val_joystick;
			bool joystick_pressed = val_joystick;
			val_joystick = (PINB & (1 << PB2));
     b1c:	cd 59       	subi	r28, 0x9D	; 157
     b1e:	de 4f       	sbci	r29, 0xFE	; 254
     b20:	08 81       	ld	r16, Y
     b22:	c3 56       	subi	r28, 0x63	; 99
     b24:	d1 40       	sbci	r29, 0x01	; 1
     b26:	cc 59       	subi	r28, 0x9C	; 156
     b28:	de 4f       	sbci	r29, 0xFE	; 254
     b2a:	18 81       	ld	r17, Y
     b2c:	c4 56       	subi	r28, 0x64	; 100
     b2e:	d1 40       	sbci	r29, 0x01	; 1
     b30:	ad cf       	rjmp	.-166    	; 0xa8c <__stack+0x58d>
							oled_set_column(i+(j*5));
							write_d(pgm_read_byte(&font5[games[k][j] - ' '][i]));
						}
					}
				}
				oled_set_page(k+1);
     b32:	2f ef       	ldi	r18, 0xFF	; 255
     b34:	82 1a       	sub	r8, r18
     b36:	92 0a       	sbc	r9, r18
     b38:	c4 01       	movw	r24, r8
     b3a:	0e 94 a3 0a 	call	0x1546	; 0x1546 <oled_set_page>
     b3e:	3d e0       	ldi	r19, 0x0D	; 13
     b40:	63 0e       	add	r6, r19
     b42:	71 1c       	adc	r7, r1
			
			clear_oled();
			oled_set_column(0);
			oled_set_page(0);
						
			for (k = 0; k < 4; k++){
     b44:	44 e0       	ldi	r20, 0x04	; 4
     b46:	84 16       	cp	r8, r20
     b48:	91 04       	cpc	r9, r1
     b4a:	89 f0       	breq	.+34     	; 0xb6e <__stack+0x66f>
     b4c:	cb 59       	subi	r28, 0x9B	; 155
     b4e:	de 4f       	sbci	r29, 0xFE	; 254
     b50:	a8 80       	ld	r10, Y
     b52:	b9 80       	ldd	r11, Y+1	; 0x01
     b54:	c5 56       	subi	r28, 0x65	; 101
     b56:	d1 40       	sbci	r29, 0x01	; 1
			
			//READ MULTIFUNCTION CARD VALUES
			DDRB &= ~(1 << PB2);
			bool val_joystick;
			bool joystick_pressed = val_joystick;
			val_joystick = (PINB & (1 << PB2));
     b58:	cf 58       	subi	r28, 0x8F	; 143
     b5a:	de 4f       	sbci	r29, 0xFE	; 254
     b5c:	e8 80       	ld	r14, Y
     b5e:	c1 57       	subi	r28, 0x71	; 113
     b60:	d1 40       	sbci	r29, 0x01	; 1
     b62:	ce 58       	subi	r28, 0x8E	; 142
     b64:	de 4f       	sbci	r29, 0xFE	; 254
     b66:	f8 80       	ld	r15, Y
     b68:	c2 57       	subi	r28, 0x72	; 114
     b6a:	d1 40       	sbci	r29, 0x01	; 1
     b6c:	d2 cf       	rjmp	.-92     	; 0xb12 <__stack+0x613>
     b6e:	5f ef       	ldi	r21, 0xFF	; 255
     b70:	8f ef       	ldi	r24, 0xFF	; 255
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	51 50       	subi	r21, 0x01	; 1
     b76:	80 40       	sbci	r24, 0x00	; 0
     b78:	90 40       	sbci	r25, 0x00	; 0
     b7a:	e1 f7       	brne	.-8      	; 0xb74 <__stack+0x675>
     b7c:	00 c0       	rjmp	.+0      	; 0xb7e <__stack+0x67f>
     b7e:	00 c0       	rjmp	.+0      	; 0xb80 <__stack+0x681>
			}

			_delay_ms(delay);
			
			//READ MULTIFUNCTION CARD VALUES
			DDRB &= ~(1 << PB2);
     b80:	ba 98       	cbi	0x17, 2	; 23
			bool val_joystick;
			bool joystick_pressed = val_joystick;
			val_joystick = (PINB & (1 << PB2));
     b82:	16 b3       	in	r17, 0x16	; 22
     b84:	12 fb       	bst	r17, 2
     b86:	11 27       	eor	r17, r17
     b88:	10 f9       	bld	r17, 0
				joystick_pressed = 1;
			}
			else{
				joystick_pressed = 0;
			}
			unsigned int x_volt = read_adc(ADC_CHANNEL_JOY_X);
     b8a:	85 e0       	ldi	r24, 0x05	; 5
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <read_adc>
     b92:	08 2f       	mov	r16, r24
			unsigned int y_volt = read_adc(ADC_CHANNEL_JOY_Y);
     b94:	84 e0       	ldi	r24, 0x04	; 4
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 50 01 	call	0x2a0	; 0x2a0 <read_adc>
     b9c:	28 2f       	mov	r18, r24
     b9e:	30 e0       	ldi	r19, 0x00	; 0

			
			if (y_volt < 125 && select_menu < 3){
     ba0:	2d 37       	cpi	r18, 0x7D	; 125
     ba2:	31 05       	cpc	r19, r1
     ba4:	38 f4       	brcc	.+14     	; 0xbb4 <__stack+0x6b5>
     ba6:	a3 e0       	ldi	r26, 0x03	; 3
     ba8:	2a 16       	cp	r2, r26
     baa:	31 04       	cpc	r3, r1
     bac:	1c f4       	brge	.+6      	; 0xbb4 <__stack+0x6b5>
				select_menu++;
     bae:	bf ef       	ldi	r27, 0xFF	; 255
     bb0:	2b 1a       	sub	r2, r27
     bb2:	3b 0a       	sbc	r3, r27
			}
			if (y_volt > 135 && select_menu > 1){
     bb4:	28 38       	cpi	r18, 0x88	; 136
     bb6:	31 05       	cpc	r19, r1
     bb8:	38 f0       	brcs	.+14     	; 0xbc8 <__stack+0x6c9>
     bba:	e2 e0       	ldi	r30, 0x02	; 2
     bbc:	2e 16       	cp	r2, r30
     bbe:	31 04       	cpc	r3, r1
     bc0:	1c f0       	brlt	.+6      	; 0xbc8 <__stack+0x6c9>
				select_menu--;
     bc2:	f1 e0       	ldi	r31, 0x01	; 1
     bc4:	2f 1a       	sub	r2, r31
     bc6:	31 08       	sbc	r3, r1
			}
			if(x_volt < 60){
     bc8:	0c 33       	cpi	r16, 0x3C	; 60
     bca:	08 f4       	brcc	.+2      	; 0xbce <__stack+0x6cf>
     bcc:	07 c4       	rjmp	.+2062   	; 0x13dc <__stack+0xedd>
				sub_menu = 1;			//Go to main manu
				break;
			}
			if(joystick_pressed == 1){
     bce:	c9 59       	subi	r28, 0x99	; 153
     bd0:	de 4f       	sbci	r29, 0xFE	; 254
     bd2:	28 81       	ld	r18, Y
     bd4:	c7 56       	subi	r28, 0x67	; 103
     bd6:	d1 40       	sbci	r29, 0x01	; 1
     bd8:	21 11       	cpse	r18, r1
     bda:	22 c0       	rjmp	.+68     	; 0xc20 <__stack+0x721>
     bdc:	cb 58       	subi	r28, 0x8B	; 139
     bde:	de 4f       	sbci	r29, 0xFE	; 254
     be0:	18 83       	st	Y, r17
     be2:	c5 57       	subi	r28, 0x75	; 117
     be4:	d1 40       	sbci	r29, 0x01	; 1
				if (select_menu == 1){	
     be6:	31 e0       	ldi	r19, 0x01	; 1
     be8:	23 16       	cp	r2, r19
     bea:	31 04       	cpc	r3, r1
     bec:	69 f0       	breq	.+26     	; 0xc08 <__stack+0x709>
					lives =  5;
					sub_menu = 6;
				}
				if (select_menu == 2){	
     bee:	42 e0       	ldi	r20, 0x02	; 2
     bf0:	24 16       	cp	r2, r20
     bf2:	31 04       	cpc	r3, r1
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <__stack+0x6f9>
     bf6:	0c c4       	rjmp	.+2072   	; 0x1410 <__stack+0xf11>
					lives = 3;
					sub_menu =6;
				}
				if (select_menu == 3){
     bf8:	53 e0       	ldi	r21, 0x03	; 3
     bfa:	25 16       	cp	r2, r21
     bfc:	31 04       	cpc	r3, r1
     bfe:	09 f4       	brne	.+2      	; 0xc02 <__stack+0x703>
     c00:	f5 c3       	rjmp	.+2026   	; 0x13ec <__stack+0xeed>
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	08 c0       	rjmp	.+16     	; 0xc18 <__stack+0x719>
				sub_menu = 1;			//Go to main manu
				break;
			}
			if(joystick_pressed == 1){
				if (select_menu == 1){	
					lives =  5;
     c08:	85 e0       	ldi	r24, 0x05	; 5
     c0a:	c7 59       	subi	r28, 0x97	; 151
     c0c:	de 4f       	sbci	r29, 0xFE	; 254
     c0e:	88 83       	st	Y, r24
     c10:	c9 56       	subi	r28, 0x69	; 105
     c12:	d1 40       	sbci	r29, 0x01	; 1
					sub_menu = 6;
     c14:	86 e0       	ldi	r24, 0x06	; 6
     c16:	90 e0       	ldi	r25, 0x00	; 0
			
			_delay_ms(delay);			
		}
		
		//PRINT TEAM CHOSEN
		while (sub_menu == 4){	
     c18:	84 30       	cpi	r24, 0x04	; 4
     c1a:	91 05       	cpc	r25, r1
     c1c:	81 f0       	breq	.+32     	; 0xc3e <__stack+0x73f>
     c1e:	71 c0       	rjmp	.+226    	; 0xd02 <__stack+0x803>
     c20:	9f ef       	ldi	r25, 0xFF	; 255
     c22:	af ef       	ldi	r26, 0xFF	; 255
     c24:	b2 e0       	ldi	r27, 0x02	; 2
     c26:	91 50       	subi	r25, 0x01	; 1
     c28:	a0 40       	sbci	r26, 0x00	; 0
     c2a:	b0 40       	sbci	r27, 0x00	; 0
     c2c:	e1 f7       	brne	.-8      	; 0xc26 <__stack+0x727>
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <__stack+0x731>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <__stack+0x733>
			
			//READ MULTIFUNCTION CARD VALUES
			DDRB &= ~(1 << PB2);
			bool val_joystick;
			bool joystick_pressed = val_joystick;
			val_joystick = (PINB & (1 << PB2));
     c32:	c9 59       	subi	r28, 0x99	; 153
     c34:	de 4f       	sbci	r29, 0xFE	; 254
     c36:	18 83       	st	Y, r17
     c38:	c7 56       	subi	r28, 0x67	; 103
     c3a:	d1 40       	sbci	r29, 0x01	; 1
     c3c:	e7 ce       	rjmp	.-562    	; 0xa0c <__stack+0x50d>
		}
		
		//PRINT TEAM CHOSEN
		while (sub_menu == 4){	

			clear_oled();
     c3e:	0e 94 a7 0a 	call	0x154e	; 0x154e <clear_oled>
			oled_set_column(0);
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
			oled_set_page(0);
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 a3 0a 	call	0x1546	; 0x1546 <oled_set_page>
     c52:	84 e1       	ldi	r24, 0x14	; 20
     c54:	cd 58       	subi	r28, 0x8D	; 141
     c56:	de 4f       	sbci	r29, 0xFE	; 254
     c58:	e8 81       	ld	r30, Y
     c5a:	f9 81       	ldd	r31, Y+1	; 0x01
     c5c:	c3 57       	subi	r28, 0x73	; 115
     c5e:	d1 40       	sbci	r29, 0x01	; 1
     c60:	8e 9f       	mul	r24, r30
     c62:	60 01       	movw	r12, r0
     c64:	8f 9f       	mul	r24, r31
     c66:	d0 0c       	add	r13, r0
     c68:	11 24       	eor	r1, r1
     c6a:	23 ec       	ldi	r18, 0xC3	; 195
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	2c 0f       	add	r18, r28
     c70:	3d 1f       	adc	r19, r29
     c72:	c2 0e       	add	r12, r18
     c74:	d3 1e       	adc	r13, r19
     c76:	e1 2c       	mov	r14, r1
     c78:	f1 2c       	mov	r15, r1
     c7a:	c2 59       	subi	r28, 0x92	; 146
     c7c:	de 4f       	sbci	r29, 0xFE	; 254
     c7e:	b8 80       	ld	r11, Y
     c80:	ce 56       	subi	r28, 0x6E	; 110
     c82:	d1 40       	sbci	r29, 0x01	; 1
     c84:	c1 59       	subi	r28, 0x91	; 145
     c86:	de 4f       	sbci	r29, 0xFE	; 254
     c88:	a8 80       	ld	r10, Y
     c8a:	cf 56       	subi	r28, 0x6F	; 111
     c8c:	d1 40       	sbci	r29, 0x01	; 1
     c8e:	26 c0       	rjmp	.+76     	; 0xcdc <__stack+0x7dd>
			
			for (k = 0; k < 1; k++){
				for (j = 0; j < 20; j++){
					for (i = 0; i < 5; i++){
						oled_set_column(i+(j*5));
     c90:	c8 01       	movw	r24, r16
     c92:	8e 0d       	add	r24, r14
     c94:	9f 1d       	adc	r25, r15
     c96:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
						write_d(pgm_read_byte(&font5[team_print[team_chosen][j] - ' '][i]));	
     c9a:	d6 01       	movw	r26, r12
     c9c:	8c 91       	ld	r24, X
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	80 97       	sbiw	r24, 0x20	; 32
     ca2:	fc 01       	movw	r30, r24
     ca4:	ee 0f       	add	r30, r30
     ca6:	ff 1f       	adc	r31, r31
     ca8:	ee 0f       	add	r30, r30
     caa:	ff 1f       	adc	r31, r31
     cac:	e8 0f       	add	r30, r24
     cae:	f9 1f       	adc	r31, r25
     cb0:	e0 0f       	add	r30, r16
     cb2:	f1 1f       	adc	r31, r17
     cb4:	ea 57       	subi	r30, 0x7A	; 122
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	84 91       	lpm	r24, Z
     cba:	0e 94 55 0a 	call	0x14aa	; 0x14aa <write_d>
			oled_set_column(0);
			oled_set_page(0);
			
			for (k = 0; k < 1; k++){
				for (j = 0; j < 20; j++){
					for (i = 0; i < 5; i++){
     cbe:	0f 5f       	subi	r16, 0xFF	; 255
     cc0:	1f 4f       	sbci	r17, 0xFF	; 255
     cc2:	05 30       	cpi	r16, 0x05	; 5
     cc4:	11 05       	cpc	r17, r1
     cc6:	21 f7       	brne	.-56     	; 0xc90 <__stack+0x791>
     cc8:	b5 e0       	ldi	r27, 0x05	; 5
     cca:	eb 0e       	add	r14, r27
     ccc:	f1 1c       	adc	r15, r1
     cce:	ef ef       	ldi	r30, 0xFF	; 255
     cd0:	ce 1a       	sub	r12, r30
     cd2:	de 0a       	sbc	r13, r30
			clear_oled();
			oled_set_column(0);
			oled_set_page(0);
			
			for (k = 0; k < 1; k++){
				for (j = 0; j < 20; j++){
     cd4:	f4 e6       	ldi	r31, 0x64	; 100
     cd6:	ef 16       	cp	r14, r31
     cd8:	f1 04       	cpc	r15, r1
     cda:	19 f0       	breq	.+6      	; 0xce2 <__stack+0x7e3>
     cdc:	0b 2d       	mov	r16, r11
     cde:	1a 2d       	mov	r17, r10
     ce0:	d7 cf       	rjmp	.-82     	; 0xc90 <__stack+0x791>
					for (i = 0; i < 5; i++){
						oled_set_column(i+(j*5));
						write_d(pgm_read_byte(&font5[team_print[team_chosen][j] - ' '][i]));	
					}
				}
				oled_set_page(k+1);
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 a3 0a 	call	0x1546	; 0x1546 <oled_set_page>
     cea:	2f ef       	ldi	r18, 0xFF	; 255
     cec:	3f ef       	ldi	r19, 0xFF	; 255
     cee:	4e e0       	ldi	r20, 0x0E	; 14
     cf0:	21 50       	subi	r18, 0x01	; 1
     cf2:	30 40       	sbci	r19, 0x00	; 0
     cf4:	40 40       	sbci	r20, 0x00	; 0
     cf6:	e1 f7       	brne	.-8      	; 0xcf0 <__stack+0x7f1>
     cf8:	00 c0       	rjmp	.+0      	; 0xcfa <__stack+0x7fb>
     cfa:	00 00       	nop
			}
			sub_menu = 1;			// go to main menu
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	1f c2       	rjmp	.+1086   	; 0x1140 <__stack+0xc41>
			_delay_ms(delay*5);
		}
		
		// PRINT GAME OVER
		while(sub_menu==5){   
     d02:	85 30       	cpi	r24, 0x05	; 5
     d04:	91 05       	cpc	r25, r1
     d06:	09 f0       	breq	.+2      	; 0xd0a <__stack+0x80b>
     d08:	4f c0       	rjmp	.+158    	; 0xda8 <__stack+0x8a9>
			clear_oled();
     d0a:	0e 94 a7 0a 	call	0x154e	; 0x154e <clear_oled>
			oled_set_column(0);
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
			oled_set_page(3);
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 a3 0a 	call	0x1546	; 0x1546 <oled_set_page>
     d1e:	6e 01       	movw	r12, r28
     d20:	5d ee       	ldi	r21, 0xED	; 237
     d22:	c5 1a       	sub	r12, r21
     d24:	5e ef       	ldi	r21, 0xFE	; 254
     d26:	d5 0a       	sbc	r13, r21
     d28:	e1 2c       	mov	r14, r1
     d2a:	f1 2c       	mov	r15, r1
     d2c:	c2 59       	subi	r28, 0x92	; 146
     d2e:	de 4f       	sbci	r29, 0xFE	; 254
     d30:	b8 80       	ld	r11, Y
     d32:	ce 56       	subi	r28, 0x6E	; 110
     d34:	d1 40       	sbci	r29, 0x01	; 1
     d36:	c1 59       	subi	r28, 0x91	; 145
     d38:	de 4f       	sbci	r29, 0xFE	; 254
     d3a:	a8 80       	ld	r10, Y
     d3c:	cf 56       	subi	r28, 0x6F	; 111
     d3e:	d1 40       	sbci	r29, 0x01	; 1
     d40:	26 c0       	rjmp	.+76     	; 0xd8e <__stack+0x88f>
			
			for (j = 0; j < 22; j++){
				for (i = 0; i < 5; i++)	{
					oled_set_column(i+(j*5));
     d42:	c7 01       	movw	r24, r14
     d44:	80 0f       	add	r24, r16
     d46:	91 1f       	adc	r25, r17
     d48:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
					write_d(pgm_read_byte(&font5[game_over[0][j] - ' '][i]));	
     d4c:	d6 01       	movw	r26, r12
     d4e:	8c 91       	ld	r24, X
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	80 97       	sbiw	r24, 0x20	; 32
     d54:	fc 01       	movw	r30, r24
     d56:	ee 0f       	add	r30, r30
     d58:	ff 1f       	adc	r31, r31
     d5a:	ee 0f       	add	r30, r30
     d5c:	ff 1f       	adc	r31, r31
     d5e:	e8 0f       	add	r30, r24
     d60:	f9 1f       	adc	r31, r25
     d62:	e0 0f       	add	r30, r16
     d64:	f1 1f       	adc	r31, r17
     d66:	ea 57       	subi	r30, 0x7A	; 122
     d68:	ff 4f       	sbci	r31, 0xFF	; 255
     d6a:	84 91       	lpm	r24, Z
     d6c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <write_d>
			clear_oled();
			oled_set_column(0);
			oled_set_page(3);
			
			for (j = 0; j < 22; j++){
				for (i = 0; i < 5; i++)	{
     d70:	0f 5f       	subi	r16, 0xFF	; 255
     d72:	1f 4f       	sbci	r17, 0xFF	; 255
     d74:	05 30       	cpi	r16, 0x05	; 5
     d76:	11 05       	cpc	r17, r1
     d78:	21 f7       	brne	.-56     	; 0xd42 <__stack+0x843>
     d7a:	b5 e0       	ldi	r27, 0x05	; 5
     d7c:	eb 0e       	add	r14, r27
     d7e:	f1 1c       	adc	r15, r1
     d80:	ef ef       	ldi	r30, 0xFF	; 255
     d82:	ce 1a       	sub	r12, r30
     d84:	de 0a       	sbc	r13, r30
		while(sub_menu==5){   
			clear_oled();
			oled_set_column(0);
			oled_set_page(3);
			
			for (j = 0; j < 22; j++){
     d86:	fe e6       	ldi	r31, 0x6E	; 110
     d88:	ef 16       	cp	r14, r31
     d8a:	f1 04       	cpc	r15, r1
     d8c:	19 f0       	breq	.+6      	; 0xd94 <__stack+0x895>
					lives =  5;
					sub_menu = 6;
				}
				if (select_menu == 2){	
					lives = 3;
					sub_menu =6;
     d8e:	0b 2d       	mov	r16, r11
     d90:	1a 2d       	mov	r17, r10
     d92:	d7 cf       	rjmp	.-82     	; 0xd42 <__stack+0x843>
     d94:	2f ef       	ldi	r18, 0xFF	; 255
     d96:	3f ef       	ldi	r19, 0xFF	; 255
     d98:	4d e1       	ldi	r20, 0x1D	; 29
     d9a:	21 50       	subi	r18, 0x01	; 1
     d9c:	30 40       	sbci	r19, 0x00	; 0
     d9e:	40 40       	sbci	r20, 0x00	; 0
     da0:	e1 f7       	brne	.-8      	; 0xd9a <__stack+0x89b>
     da2:	00 c0       	rjmp	.+0      	; 0xda4 <__stack+0x8a5>
     da4:	00 00       	nop
     da6:	d0 c1       	rjmp	.+928    	; 0x1148 <__stack+0xc49>
			}
			_delay_ms(delay*10);
			sub_menu = 7;			//Go to score
		}
		//GAMING
		while(sub_menu==6){		
     da8:	86 30       	cpi	r24, 0x06	; 6
     daa:	91 05       	cpc	r25, r1
     dac:	09 f0       	breq	.+2      	; 0xdb0 <__stack+0x8b1>
     dae:	c8 c1       	rjmp	.+912    	; 0x1140 <__stack+0xc41>
			
			timer = 0;
			lives_tot = lives;
	
			clear_oled();
     db0:	0e 94 a7 0a 	call	0x154e	; 0x154e <clear_oled>
			oled_set_page(0);
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 a3 0a 	call	0x1546	; 0x1546 <oled_set_page>
     dbc:	6e 01       	movw	r12, r28
     dbe:	57 ed       	ldi	r21, 0xD7	; 215
     dc0:	c5 1a       	sub	r12, r21
     dc2:	5e ef       	ldi	r21, 0xFE	; 254
     dc4:	d5 0a       	sbc	r13, r21
     dc6:	e1 2c       	mov	r14, r1
     dc8:	f1 2c       	mov	r15, r1
     dca:	c2 59       	subi	r28, 0x92	; 146
     dcc:	de 4f       	sbci	r29, 0xFE	; 254
     dce:	b8 80       	ld	r11, Y
     dd0:	ce 56       	subi	r28, 0x6E	; 110
     dd2:	d1 40       	sbci	r29, 0x01	; 1
     dd4:	c1 59       	subi	r28, 0x91	; 145
     dd6:	de 4f       	sbci	r29, 0xFE	; 254
     dd8:	a8 80       	ld	r10, Y
     dda:	cf 56       	subi	r28, 0x6F	; 111
     ddc:	d1 40       	sbci	r29, 0x01	; 1
     dde:	26 c0       	rjmp	.+76     	; 0xe2c <__stack+0x92d>
			for (j = 0; j < 17; j++){
				for (i = 0; i < 5; i++){
					oled_set_column(i+(j*5));
     de0:	c7 01       	movw	r24, r14
     de2:	80 0f       	add	r24, r16
     de4:	91 1f       	adc	r25, r17
     de6:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
					write_d(pgm_read_byte(&font5[gameOn[0][j] - ' '][i]));		
     dea:	d6 01       	movw	r26, r12
     dec:	8c 91       	ld	r24, X
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	80 97       	sbiw	r24, 0x20	; 32
     df2:	fc 01       	movw	r30, r24
     df4:	ee 0f       	add	r30, r30
     df6:	ff 1f       	adc	r31, r31
     df8:	ee 0f       	add	r30, r30
     dfa:	ff 1f       	adc	r31, r31
     dfc:	e8 0f       	add	r30, r24
     dfe:	f9 1f       	adc	r31, r25
     e00:	e0 0f       	add	r30, r16
     e02:	f1 1f       	adc	r31, r17
     e04:	ea 57       	subi	r30, 0x7A	; 122
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	84 91       	lpm	r24, Z
     e0a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <write_d>
			lives_tot = lives;
	
			clear_oled();
			oled_set_page(0);
			for (j = 0; j < 17; j++){
				for (i = 0; i < 5; i++){
     e0e:	0f 5f       	subi	r16, 0xFF	; 255
     e10:	1f 4f       	sbci	r17, 0xFF	; 255
     e12:	05 30       	cpi	r16, 0x05	; 5
     e14:	11 05       	cpc	r17, r1
     e16:	21 f7       	brne	.-56     	; 0xde0 <__stack+0x8e1>
     e18:	b5 e0       	ldi	r27, 0x05	; 5
     e1a:	eb 0e       	add	r14, r27
     e1c:	f1 1c       	adc	r15, r1
     e1e:	ef ef       	ldi	r30, 0xFF	; 255
     e20:	ce 1a       	sub	r12, r30
     e22:	de 0a       	sbc	r13, r30
			timer = 0;
			lives_tot = lives;
	
			clear_oled();
			oled_set_page(0);
			for (j = 0; j < 17; j++){
     e24:	f5 e5       	ldi	r31, 0x55	; 85
     e26:	ef 16       	cp	r14, r31
     e28:	f1 04       	cpc	r15, r1
     e2a:	19 f0       	breq	.+6      	; 0xe32 <__stack+0x933>
		
		// PRINT GAME OVER
		while(sub_menu==5){   
			clear_oled();
			oled_set_column(0);
			oled_set_page(3);
     e2c:	0b 2d       	mov	r16, r11
     e2e:	1a 2d       	mov	r17, r10
     e30:	d7 cf       	rjmp	.-82     	; 0xde0 <__stack+0x8e1>
				for (i = 0; i < 5; i++){
					oled_set_column(i+(j*5));
					write_d(pgm_read_byte(&font5[gameOn[0][j] - ' '][i]));		
				}
			}
			while(lives>0){
     e32:	c7 59       	subi	r28, 0x97	; 151
     e34:	de 4f       	sbci	r29, 0xFE	; 254
     e36:	28 81       	ld	r18, Y
     e38:	c9 56       	subi	r28, 0x69	; 105
     e3a:	d1 40       	sbci	r29, 0x01	; 1
     e3c:	22 23       	and	r18, r18
     e3e:	09 f4       	brne	.+2      	; 0xe42 <__stack+0x943>
     e40:	16 c1       	rjmp	.+556    	; 0x106e <__stack+0xb6f>
     e42:	c6 59       	subi	r28, 0x96	; 150
     e44:	de 4f       	sbci	r29, 0xFE	; 254
     e46:	18 82       	st	Y, r1
     e48:	19 82       	std	Y+1, r1	; 0x01
     e4a:	1a 82       	std	Y+2, r1	; 0x02
     e4c:	1b 82       	std	Y+3, r1	; 0x03
     e4e:	ca 56       	subi	r28, 0x6A	; 106
     e50:	d1 40       	sbci	r29, 0x01	; 1
				
				clear_page(4);
				oled_set_column(0);
				oled_set_page(4);
					
				for(k = 0; k < lives_tot; k++){
     e52:	22 2e       	mov	r2, r18
     e54:	31 2c       	mov	r3, r1
     e56:	0f 2e       	mov	r0, r31
     e58:	f0 e7       	ldi	r31, 0x70	; 112
     e5a:	4f 2e       	mov	r4, r31
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	5f 2e       	mov	r5, r31
     e60:	f0 2d       	mov	r31, r0
     e62:	0f 2e       	mov	r0, r31
     e64:	fb e7       	ldi	r31, 0x7B	; 123
     e66:	6f 2e       	mov	r6, r31
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	7f 2e       	mov	r7, r31
     e6c:	f0 2d       	mov	r31, r0
     e6e:	cb 59       	subi	r28, 0x9B	; 155
     e70:	de 4f       	sbci	r29, 0xFE	; 254
     e72:	48 82       	st	Y, r4
     e74:	c5 56       	subi	r28, 0x65	; 101
     e76:	d1 40       	sbci	r29, 0x01	; 1
     e78:	c9 59       	subi	r28, 0x99	; 153
     e7a:	de 4f       	sbci	r29, 0xFE	; 254
     e7c:	58 82       	st	Y, r5
     e7e:	c7 56       	subi	r28, 0x67	; 103
     e80:	d1 40       	sbci	r29, 0x01	; 1
					write_d(pgm_read_byte(&font5[gameOn[0][j] - ' '][i]));		
				}
			}
			while(lives>0){
				
				msg *message = (msg*)malloc(sizeof(msg));
     e82:	8b e0       	ldi	r24, 0x0B	; 11
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <malloc>
     e8a:	8c 01       	movw	r16, r24
				
				CAN_data_receive(message);
     e8c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <CAN_data_receive>
				lives = message->data[7];
     e90:	d8 01       	movw	r26, r16
     e92:	1a 96       	adiw	r26, 0x0a	; 10
     e94:	bc 91       	ld	r27, X
     e96:	c8 59       	subi	r28, 0x98	; 152
     e98:	de 4f       	sbci	r29, 0xFE	; 254
     e9a:	b8 83       	st	Y, r27
     e9c:	c8 56       	subi	r28, 0x68	; 104
     e9e:	d1 40       	sbci	r29, 0x01	; 1
				
				free(message);
     ea0:	c8 01       	movw	r24, r16
     ea2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <free>
				
				clear_page(4);
     ea6:	84 e0       	ldi	r24, 0x04	; 4
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 cf 0a 	call	0x159e	; 0x159e <clear_page>
				oled_set_column(0);
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
				oled_set_page(4);
     eb6:	84 e0       	ldi	r24, 0x04	; 4
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 a3 0a 	call	0x1546	; 0x1546 <oled_set_page>
					
				for(k = 0; k < lives_tot; k++){
     ebe:	12 14       	cp	r1, r2
     ec0:	13 04       	cpc	r1, r3
     ec2:	0c f0       	brlt	.+2      	; 0xec6 <__stack+0x9c7>
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__stack+0xa45>
     ec6:	81 2c       	mov	r8, r1
     ec8:	91 2c       	mov	r9, r1
     eca:	e1 2c       	mov	r14, r1
     ecc:	f1 2c       	mov	r15, r1
					for (i = 0; i < 11; i++){
						if(lives <= k ){
     ece:	c8 59       	subi	r28, 0x98	; 152
     ed0:	de 4f       	sbci	r29, 0xFE	; 254
     ed2:	e8 81       	ld	r30, Y
     ed4:	c8 56       	subi	r28, 0x68	; 104
     ed6:	d1 40       	sbci	r29, 0x01	; 1
     ed8:	ae 2e       	mov	r10, r30
     eda:	b1 2c       	mov	r11, r1
     edc:	25 c0       	rjmp	.+74     	; 0xf28 <__stack+0xa29>
     ede:	ea 14       	cp	r14, r10
     ee0:	fb 04       	cpc	r15, r11
     ee2:	54 f0       	brlt	.+20     	; 0xef8 <__stack+0x9f9>
							oled_set_column(i+(k*11));
     ee4:	c6 01       	movw	r24, r12
     ee6:	80 0f       	add	r24, r16
     ee8:	91 1f       	adc	r25, r17
     eea:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
							write_d(pgm_read_byte(&heart[hearts[0][0] - ' '][i]));
     eee:	f8 01       	movw	r30, r16
     ef0:	84 91       	lpm	r24, Z
     ef2:	0e 94 55 0a 	call	0x14aa	; 0x14aa <write_d>
     ef6:	0a c0       	rjmp	.+20     	; 0xf0c <__stack+0xa0d>
						}
						else{
							oled_set_column(i+(k*11));
     ef8:	c6 01       	movw	r24, r12
     efa:	80 0f       	add	r24, r16
     efc:	91 1f       	adc	r25, r17
     efe:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
     f02:	f8 01       	movw	r30, r16
     f04:	3b 96       	adiw	r30, 0x0b	; 11
							write_d(pgm_read_byte(&heart[hearts[1][0] - ' '][i]));
     f06:	84 91       	lpm	r24, Z
     f08:	0e 94 55 0a 	call	0x14aa	; 0x14aa <write_d>
     f0c:	0f 5f       	subi	r16, 0xFF	; 255
     f0e:	1f 4f       	sbci	r17, 0xFF	; 255
				clear_page(4);
				oled_set_column(0);
				oled_set_page(4);
					
				for(k = 0; k < lives_tot; k++){
					for (i = 0; i < 11; i++){
     f10:	06 15       	cp	r16, r6
     f12:	17 05       	cpc	r17, r7
     f14:	21 f7       	brne	.-56     	; 0xede <__stack+0x9df>
				
				clear_page(4);
				oled_set_column(0);
				oled_set_page(4);
					
				for(k = 0; k < lives_tot; k++){
     f16:	ff ef       	ldi	r31, 0xFF	; 255
     f18:	ef 1a       	sub	r14, r31
     f1a:	ff 0a       	sbc	r15, r31
     f1c:	2b e0       	ldi	r18, 0x0B	; 11
     f1e:	82 0e       	add	r8, r18
     f20:	91 1c       	adc	r9, r1
     f22:	e2 14       	cp	r14, r2
     f24:	f3 04       	cpc	r15, r3
     f26:	74 f4       	brge	.+28     	; 0xf44 <__stack+0xa45>
				for (i = 0; i < 5; i++){
					oled_set_column(i+(j*5));
					write_d(pgm_read_byte(&font5[gameOn[0][j] - ' '][i]));		
				}
			}
			while(lives>0){
     f28:	cb 59       	subi	r28, 0x9B	; 155
     f2a:	de 4f       	sbci	r29, 0xFE	; 254
     f2c:	08 81       	ld	r16, Y
     f2e:	c5 56       	subi	r28, 0x65	; 101
     f30:	d1 40       	sbci	r29, 0x01	; 1
     f32:	c9 59       	subi	r28, 0x99	; 153
     f34:	de 4f       	sbci	r29, 0xFE	; 254
     f36:	18 81       	ld	r17, Y
     f38:	c7 56       	subi	r28, 0x67	; 103
     f3a:	d1 40       	sbci	r29, 0x01	; 1
     f3c:	64 01       	movw	r12, r8
     f3e:	c4 18       	sub	r12, r4
     f40:	d5 08       	sbc	r13, r5
     f42:	cd cf       	rjmp	.-102    	; 0xede <__stack+0x9df>
     f44:	8c ec       	ldi	r24, 0xCC	; 204
     f46:	94 e0       	ldi	r25, 0x04	; 4
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <__stack+0xa49>
     f4c:	00 c0       	rjmp	.+0      	; 0xf4e <__stack+0xa4f>
     f4e:	00 00       	nop
						}
					}
				}
				_delay_ms(1);			
				
				DDRB &= ~((1 << PB0) | (1 << PB1) | (1 << PB2));
     f50:	87 b3       	in	r24, 0x17	; 23
     f52:	88 7f       	andi	r24, 0xF8	; 248
     f54:	87 bb       	out	0x17, r24	; 23
				
				//READ MULTIFUNCTION CARD VALUES
				unsigned int x_volt = read_adc(ADC_CHANNEL_JOY_X);
     f56:	85 e0       	ldi	r24, 0x05	; 5
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <read_adc>
     f5e:	18 2f       	mov	r17, r24
				unsigned int y_volt = read_adc(ADC_CHANNEL_JOY_Y);
     f60:	84 e0       	ldi	r24, 0x04	; 4
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 50 01 	call	0x2a0	; 0x2a0 <read_adc>
     f68:	c8 2e       	mov	r12, r24
				unsigned int SR_volt = read_adc(ADC_CHANNEL_SLIDER_R);
     f6a:	87 e0       	ldi	r24, 0x07	; 7
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <read_adc>
     f72:	d8 2e       	mov	r13, r24
				unsigned int SL_volt = read_adc(ADC_CHANNEL_SLIDER_L);
     f74:	86 e0       	ldi	r24, 0x06	; 6
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 50 01 	call	0x2a0	; 0x2a0 <read_adc>
				bool val_joystick;  
				bool button_left = (PINB & (1 << PB0));
     f7c:	46 b3       	in	r20, 0x16	; 22
				bool button_right = (PINB & (1 << PB1));
     f7e:	56 b3       	in	r21, 0x16	; 22
				bool joystick_pressed = val_joystick;		
				val_joystick = (PINB & (1 << PB2));
     f80:	b6 b2       	in	r11, 0x16	; 22
     f82:	b2 fa       	bst	r11, 2
     f84:	bb 24       	eor	r11, r11
     f86:	b0 f8       	bld	r11, 0
				}
				
				//CREATE MESSAGE
				msg can_message;
				
				can_message.id = 0x70;
     f88:	0f 2e       	mov	r0, r31
     f8a:	f0 e7       	ldi	r31, 0x70	; 112
     f8c:	ef 2e       	mov	r14, r31
     f8e:	f0 2d       	mov	r31, r0
     f90:	c8 5a       	subi	r28, 0xA8	; 168
     f92:	de 4f       	sbci	r29, 0xFE	; 254
     f94:	e8 82       	st	Y, r14
     f96:	c8 55       	subi	r28, 0x58	; 88
     f98:	d1 40       	sbci	r29, 0x01	; 1
     f9a:	c7 5a       	subi	r28, 0xA7	; 167
     f9c:	de 4f       	sbci	r29, 0xFE	; 254
     f9e:	18 82       	st	Y, r1
     fa0:	c9 55       	subi	r28, 0x59	; 89
     fa2:	d1 40       	sbci	r29, 0x01	; 1
				can_message.length = 7;
     fa4:	97 e0       	ldi	r25, 0x07	; 7
     fa6:	c6 5a       	subi	r28, 0xA6	; 166
     fa8:	de 4f       	sbci	r29, 0xFE	; 254
     faa:	98 83       	st	Y, r25
     fac:	ca 55       	subi	r28, 0x5A	; 90
     fae:	d1 40       	sbci	r29, 0x01	; 1
				
				can_message.data[0] = x_volt;
     fb0:	c5 5a       	subi	r28, 0xA5	; 165
     fb2:	de 4f       	sbci	r29, 0xFE	; 254
     fb4:	18 83       	st	Y, r17
     fb6:	cb 55       	subi	r28, 0x5B	; 91
     fb8:	d1 40       	sbci	r29, 0x01	; 1
				can_message.data[1] = y_volt;
     fba:	c4 5a       	subi	r28, 0xA4	; 164
     fbc:	de 4f       	sbci	r29, 0xFE	; 254
     fbe:	c8 82       	st	Y, r12
     fc0:	cc 55       	subi	r28, 0x5C	; 92
     fc2:	d1 40       	sbci	r29, 0x01	; 1
				bool button_left = (PINB & (1 << PB0));
				bool button_right = (PINB & (1 << PB1));
				bool joystick_pressed = val_joystick;		
				val_joystick = (PINB & (1 << PB2));
				
				if (joystick_pressed == 0){
     fc4:	c0 59       	subi	r28, 0x90	; 144
     fc6:	de 4f       	sbci	r29, 0xFE	; 254
     fc8:	38 81       	ld	r19, Y
     fca:	c0 57       	subi	r28, 0x70	; 112
     fcc:	d1 40       	sbci	r29, 0x01	; 1
     fce:	a1 e0       	ldi	r26, 0x01	; 1
     fd0:	3a 27       	eor	r19, r26
				can_message.id = 0x70;
				can_message.length = 7;
				
				can_message.data[0] = x_volt;
				can_message.data[1] = y_volt;
				can_message.data[2] = joystick_pressed;
     fd2:	c3 5a       	subi	r28, 0xA3	; 163
     fd4:	de 4f       	sbci	r29, 0xFE	; 254
     fd6:	38 83       	st	Y, r19
     fd8:	cd 55       	subi	r28, 0x5D	; 93
     fda:	d1 40       	sbci	r29, 0x01	; 1
				unsigned int x_volt = read_adc(ADC_CHANNEL_JOY_X);
				unsigned int y_volt = read_adc(ADC_CHANNEL_JOY_Y);
				unsigned int SR_volt = read_adc(ADC_CHANNEL_SLIDER_R);
				unsigned int SL_volt = read_adc(ADC_CHANNEL_SLIDER_L);
				bool val_joystick;  
				bool button_left = (PINB & (1 << PB0));
     fdc:	41 70       	andi	r20, 0x01	; 1
				can_message.length = 7;
				
				can_message.data[0] = x_volt;
				can_message.data[1] = y_volt;
				can_message.data[2] = joystick_pressed;
				can_message.data[3] = button_left;
     fde:	c2 5a       	subi	r28, 0xA2	; 162
     fe0:	de 4f       	sbci	r29, 0xFE	; 254
     fe2:	48 83       	st	Y, r20
     fe4:	ce 55       	subi	r28, 0x5E	; 94
     fe6:	d1 40       	sbci	r29, 0x01	; 1
				unsigned int y_volt = read_adc(ADC_CHANNEL_JOY_Y);
				unsigned int SR_volt = read_adc(ADC_CHANNEL_SLIDER_R);
				unsigned int SL_volt = read_adc(ADC_CHANNEL_SLIDER_L);
				bool val_joystick;  
				bool button_left = (PINB & (1 << PB0));
				bool button_right = (PINB & (1 << PB1));
     fe8:	56 95       	lsr	r21
     fea:	51 70       	andi	r21, 0x01	; 1
				
				can_message.data[0] = x_volt;
				can_message.data[1] = y_volt;
				can_message.data[2] = joystick_pressed;
				can_message.data[3] = button_left;
				can_message.data[4] = button_right;
     fec:	c1 5a       	subi	r28, 0xA1	; 161
     fee:	de 4f       	sbci	r29, 0xFE	; 254
     ff0:	58 83       	st	Y, r21
     ff2:	cf 55       	subi	r28, 0x5F	; 95
     ff4:	d1 40       	sbci	r29, 0x01	; 1
				can_message.data[5] = SR_volt;
     ff6:	c0 5a       	subi	r28, 0xA0	; 160
     ff8:	de 4f       	sbci	r29, 0xFE	; 254
     ffa:	d8 82       	st	Y, r13
     ffc:	c0 56       	subi	r28, 0x60	; 96
     ffe:	d1 40       	sbci	r29, 0x01	; 1
				can_message.data[6] = lives_tot;
    1000:	c7 59       	subi	r28, 0x97	; 151
    1002:	de 4f       	sbci	r29, 0xFE	; 254
    1004:	b8 81       	ld	r27, Y
    1006:	c9 56       	subi	r28, 0x69	; 105
    1008:	d1 40       	sbci	r29, 0x01	; 1
    100a:	cf 59       	subi	r28, 0x9F	; 159
    100c:	de 4f       	sbci	r29, 0xFE	; 254
    100e:	b8 83       	st	Y, r27
    1010:	c1 56       	subi	r28, 0x61	; 97
    1012:	d1 40       	sbci	r29, 0x01	; 1


				
				//SEND MESSAGE
				CAN_message_send(can_message);
    1014:	f1 2c       	mov	r15, r1
    1016:	07 e0       	ldi	r16, 0x07	; 7
    1018:	2c 2d       	mov	r18, r12
    101a:	6d 2d       	mov	r22, r13
    101c:	7b 2f       	mov	r23, r27
    101e:	ce 59       	subi	r28, 0x9E	; 158
    1020:	de 4f       	sbci	r29, 0xFE	; 254
    1022:	88 81       	ld	r24, Y
    1024:	c2 56       	subi	r28, 0x62	; 98
    1026:	d1 40       	sbci	r29, 0x01	; 1
    1028:	0e 94 84 01 	call	0x308	; 0x308 <CAN_message_send>
				timer = timer + 1;
    102c:	c6 59       	subi	r28, 0x96	; 150
    102e:	de 4f       	sbci	r29, 0xFE	; 254
    1030:	28 81       	ld	r18, Y
    1032:	39 81       	ldd	r19, Y+1	; 0x01
    1034:	4a 81       	ldd	r20, Y+2	; 0x02
    1036:	5b 81       	ldd	r21, Y+3	; 0x03
    1038:	ca 56       	subi	r28, 0x6A	; 106
    103a:	d1 40       	sbci	r29, 0x01	; 1
    103c:	2f 5f       	subi	r18, 0xFF	; 255
    103e:	3f 4f       	sbci	r19, 0xFF	; 255
    1040:	4f 4f       	sbci	r20, 0xFF	; 255
    1042:	5f 4f       	sbci	r21, 0xFF	; 255
    1044:	c6 59       	subi	r28, 0x96	; 150
    1046:	de 4f       	sbci	r29, 0xFE	; 254
    1048:	28 83       	st	Y, r18
    104a:	39 83       	std	Y+1, r19	; 0x01
    104c:	4a 83       	std	Y+2, r20	; 0x02
    104e:	5b 83       	std	Y+3, r21	; 0x03
    1050:	ca 56       	subi	r28, 0x6A	; 106
    1052:	d1 40       	sbci	r29, 0x01	; 1
				for (i = 0; i < 5; i++){
					oled_set_column(i+(j*5));
					write_d(pgm_read_byte(&font5[gameOn[0][j] - ' '][i]));		
				}
			}
			while(lives>0){
    1054:	c8 59       	subi	r28, 0x98	; 152
    1056:	de 4f       	sbci	r29, 0xFE	; 254
    1058:	38 81       	ld	r19, Y
    105a:	c8 56       	subi	r28, 0x68	; 104
    105c:	d1 40       	sbci	r29, 0x01	; 1
    105e:	33 23       	and	r19, r19
    1060:	e9 f0       	breq	.+58     	; 0x109c <__stack+0xb9d>
				unsigned int SL_volt = read_adc(ADC_CHANNEL_SLIDER_L);
				bool val_joystick;  
				bool button_left = (PINB & (1 << PB0));
				bool button_right = (PINB & (1 << PB1));
				bool joystick_pressed = val_joystick;		
				val_joystick = (PINB & (1 << PB2));
    1062:	c0 59       	subi	r28, 0x90	; 144
    1064:	de 4f       	sbci	r29, 0xFE	; 254
    1066:	b8 82       	st	Y, r11
    1068:	c0 57       	subi	r28, 0x70	; 112
    106a:	d1 40       	sbci	r29, 0x01	; 1
    106c:	0a cf       	rjmp	.-492    	; 0xe82 <__stack+0x983>
				for (i = 0; i < 5; i++){
					oled_set_column(i+(j*5));
					write_d(pgm_read_byte(&font5[gameOn[0][j] - ' '][i]));		
				}
			}
			while(lives>0){
    106e:	c0 59       	subi	r28, 0x90	; 144
    1070:	de 4f       	sbci	r29, 0xFE	; 254
    1072:	b8 80       	ld	r11, Y
    1074:	c0 57       	subi	r28, 0x70	; 112
    1076:	d1 40       	sbci	r29, 0x01	; 1
    1078:	c7 59       	subi	r28, 0x97	; 151
    107a:	de 4f       	sbci	r29, 0xFE	; 254
    107c:	48 81       	ld	r20, Y
    107e:	c9 56       	subi	r28, 0x69	; 105
    1080:	d1 40       	sbci	r29, 0x01	; 1
    1082:	c8 59       	subi	r28, 0x98	; 152
    1084:	de 4f       	sbci	r29, 0xFE	; 254
    1086:	48 83       	st	Y, r20
    1088:	c8 56       	subi	r28, 0x68	; 104
    108a:	d1 40       	sbci	r29, 0x01	; 1
    108c:	c6 59       	subi	r28, 0x96	; 150
    108e:	de 4f       	sbci	r29, 0xFE	; 254
    1090:	18 82       	st	Y, r1
    1092:	19 82       	std	Y+1, r1	; 0x01
    1094:	1a 82       	std	Y+2, r1	; 0x02
    1096:	1b 82       	std	Y+3, r1	; 0x03
    1098:	ca 56       	subi	r28, 0x6A	; 106
    109a:	d1 40       	sbci	r29, 0x01	; 1
			sub_menu = 5;  //Go to game over
			
			// SET NOE 2 TO WAITING
			msg can_message;
				
			can_message.id = 0x70;
    109c:	80 e7       	ldi	r24, 0x70	; 112
    109e:	e8 2e       	mov	r14, r24
    10a0:	c8 5a       	subi	r28, 0xA8	; 168
    10a2:	de 4f       	sbci	r29, 0xFE	; 254
    10a4:	88 83       	st	Y, r24
    10a6:	c8 55       	subi	r28, 0x58	; 88
    10a8:	d1 40       	sbci	r29, 0x01	; 1
    10aa:	c7 5a       	subi	r28, 0xA7	; 167
    10ac:	de 4f       	sbci	r29, 0xFE	; 254
    10ae:	18 82       	st	Y, r1
    10b0:	c9 55       	subi	r28, 0x59	; 89
    10b2:	d1 40       	sbci	r29, 0x01	; 1
			can_message.length = 7;				
    10b4:	87 e0       	ldi	r24, 0x07	; 7
    10b6:	c6 5a       	subi	r28, 0xA6	; 166
    10b8:	de 4f       	sbci	r29, 0xFE	; 254
    10ba:	88 83       	st	Y, r24
    10bc:	ca 55       	subi	r28, 0x5A	; 90
    10be:	d1 40       	sbci	r29, 0x01	; 1
			can_message.data[2] = 10;
    10c0:	8a e0       	ldi	r24, 0x0A	; 10
    10c2:	c3 5a       	subi	r28, 0xA3	; 163
    10c4:	de 4f       	sbci	r29, 0xFE	; 254
    10c6:	88 83       	st	Y, r24
    10c8:	cd 55       	subi	r28, 0x5D	; 93
    10ca:	d1 40       	sbci	r29, 0x01	; 1
				
			CAN_message_send(can_message);
    10cc:	f1 2c       	mov	r15, r1
    10ce:	07 e0       	ldi	r16, 0x07	; 7
    10d0:	c5 5a       	subi	r28, 0xA5	; 165
    10d2:	de 4f       	sbci	r29, 0xFE	; 254
    10d4:	18 81       	ld	r17, Y
    10d6:	cb 55       	subi	r28, 0x5B	; 91
    10d8:	d1 40       	sbci	r29, 0x01	; 1
    10da:	c4 5a       	subi	r28, 0xA4	; 164
    10dc:	de 4f       	sbci	r29, 0xFE	; 254
    10de:	28 81       	ld	r18, Y
    10e0:	cc 55       	subi	r28, 0x5C	; 92
    10e2:	d1 40       	sbci	r29, 0x01	; 1
    10e4:	3a e0       	ldi	r19, 0x0A	; 10
    10e6:	c2 5a       	subi	r28, 0xA2	; 162
    10e8:	de 4f       	sbci	r29, 0xFE	; 254
    10ea:	48 81       	ld	r20, Y
    10ec:	ce 55       	subi	r28, 0x5E	; 94
    10ee:	d1 40       	sbci	r29, 0x01	; 1
    10f0:	c1 5a       	subi	r28, 0xA1	; 161
    10f2:	de 4f       	sbci	r29, 0xFE	; 254
    10f4:	58 81       	ld	r21, Y
    10f6:	cf 55       	subi	r28, 0x5F	; 95
    10f8:	d1 40       	sbci	r29, 0x01	; 1
    10fa:	c0 5a       	subi	r28, 0xA0	; 160
    10fc:	de 4f       	sbci	r29, 0xFE	; 254
    10fe:	68 81       	ld	r22, Y
    1100:	c0 56       	subi	r28, 0x60	; 96
    1102:	d1 40       	sbci	r29, 0x01	; 1
    1104:	cf 59       	subi	r28, 0x9F	; 159
    1106:	de 4f       	sbci	r29, 0xFE	; 254
    1108:	78 81       	ld	r23, Y
    110a:	c1 56       	subi	r28, 0x61	; 97
    110c:	d1 40       	sbci	r29, 0x01	; 1
    110e:	ce 59       	subi	r28, 0x9E	; 158
    1110:	de 4f       	sbci	r29, 0xFE	; 254
    1112:	88 81       	ld	r24, Y
    1114:	c2 56       	subi	r28, 0x62	; 98
    1116:	d1 40       	sbci	r29, 0x01	; 1
    1118:	0e 94 84 01 	call	0x308	; 0x308 <CAN_message_send>
    111c:	c0 59       	subi	r28, 0x90	; 144
    111e:	de 4f       	sbci	r29, 0xFE	; 254
    1120:	b8 82       	st	Y, r11
    1122:	c0 57       	subi	r28, 0x70	; 112
    1124:	d1 40       	sbci	r29, 0x01	; 1
    1126:	c8 59       	subi	r28, 0x98	; 152
    1128:	de 4f       	sbci	r29, 0xFE	; 254
    112a:	58 81       	ld	r21, Y
    112c:	c8 56       	subi	r28, 0x68	; 104
    112e:	d1 40       	sbci	r29, 0x01	; 1
    1130:	c7 59       	subi	r28, 0x97	; 151
    1132:	de 4f       	sbci	r29, 0xFE	; 254
    1134:	58 83       	st	Y, r21
    1136:	c9 56       	subi	r28, 0x69	; 105
    1138:	d1 40       	sbci	r29, 0x01	; 1
				//SEND MESSAGE
				CAN_message_send(can_message);
				timer = timer + 1;

			}
			sub_menu = 5;  //Go to game over
    113a:	85 e0       	ldi	r24, 0x05	; 5
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	44 ca       	rjmp	.-2936   	; 0x5c8 <__stack+0xc9>
			can_message.data[2] = 10;
				
			CAN_message_send(can_message);
		}
		//DISPLAY SCORE
		while(sub_menu == 7) 
    1140:	87 30       	cpi	r24, 0x07	; 7
    1142:	91 05       	cpc	r25, r1
    1144:	09 f0       	breq	.+2      	; 0x1148 <__stack+0xc49>
    1146:	40 ca       	rjmp	.-2944   	; 0x5c8 <__stack+0xc9>
		{
			int val;
			int count = 0;
			double n = (double)timer;
    1148:	c6 59       	subi	r28, 0x96	; 150
    114a:	de 4f       	sbci	r29, 0xFE	; 254
    114c:	68 81       	ld	r22, Y
    114e:	79 81       	ldd	r23, Y+1	; 0x01
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	9b 81       	ldd	r25, Y+3	; 0x03
    1154:	ca 56       	subi	r28, 0x6A	; 106
    1156:	d1 40       	sbci	r29, 0x01	; 1
    1158:	0e 94 88 0b 	call	0x1710	; 0x1710 <__floatsisf>
    115c:	6b 01       	movw	r12, r22
    115e:	7c 01       	movw	r14, r24
			
			while(n >= 1){
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	40 e8       	ldi	r20, 0x80	; 128
    1166:	5f e3       	ldi	r21, 0x3F	; 63
    1168:	0e 94 14 0c 	call	0x1828	; 0x1828 <__gesf2>
    116c:	88 23       	and	r24, r24
    116e:	0c f4       	brge	.+2      	; 0x1172 <__stack+0xc73>
    1170:	46 c1       	rjmp	.+652    	; 0x13fe <__stack+0xeff>
		}
		//DISPLAY SCORE
		while(sub_menu == 7) 
		{
			int val;
			int count = 0;
    1172:	81 2c       	mov	r8, r1
    1174:	91 2c       	mov	r9, r1
			double n = (double)timer;
			
			while(n >= 1){
				n /= 10;
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e2       	ldi	r20, 0x20	; 32
    117c:	51 e4       	ldi	r21, 0x41	; 65
    117e:	c7 01       	movw	r24, r14
    1180:	b6 01       	movw	r22, r12
    1182:	0e 94 1e 0b 	call	0x163c	; 0x163c <__divsf3>
    1186:	6b 01       	movw	r12, r22
    1188:	7c 01       	movw	r14, r24
				++count;
    118a:	8f ef       	ldi	r24, 0xFF	; 255
    118c:	88 1a       	sub	r8, r24
    118e:	98 0a       	sbc	r9, r24
		{
			int val;
			int count = 0;
			double n = (double)timer;
			
			while(n >= 1){
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	40 e8       	ldi	r20, 0x80	; 128
    1196:	5f e3       	ldi	r21, 0x3F	; 63
    1198:	c7 01       	movw	r24, r14
    119a:	b6 01       	movw	r22, r12
    119c:	0e 94 14 0c 	call	0x1828	; 0x1828 <__gesf2>
    11a0:	88 23       	and	r24, r24
    11a2:	4c f7       	brge	.-46     	; 0x1176 <__stack+0xc77>
    11a4:	4d b6       	in	r4, 0x3d	; 61
    11a6:	5e b6       	in	r5, 0x3e	; 62
				n /= 10;
				++count;
			}

			char arr[count];
    11a8:	ad b7       	in	r26, 0x3d	; 61
    11aa:	be b7       	in	r27, 0x3e	; 62
    11ac:	a8 19       	sub	r26, r8
    11ae:	b9 09       	sbc	r27, r9
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	be bf       	out	0x3e, r27	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	ad bf       	out	0x3d, r26	; 61
    11ba:	8d b7       	in	r24, 0x3d	; 61
    11bc:	9e b7       	in	r25, 0x3e	; 62
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	3c 01       	movw	r6, r24
			
			//SPILTING THE DIGITS
			for(i = 0; i < count; i++){
    11c2:	18 14       	cp	r1, r8
    11c4:	19 04       	cpc	r1, r9
    11c6:	d4 f5       	brge	.+116    	; 0x123c <__stack+0xd3d>
    11c8:	8c 01       	movw	r16, r24
    11ca:	7c 01       	movw	r14, r24
    11cc:	e8 0c       	add	r14, r8
    11ce:	f9 1c       	adc	r15, r9
    11d0:	64 01       	movw	r12, r8
    11d2:	c6 59       	subi	r28, 0x96	; 150
    11d4:	de 4f       	sbci	r29, 0xFE	; 254
    11d6:	88 80       	ld	r8, Y
    11d8:	99 80       	ldd	r9, Y+1	; 0x01
    11da:	aa 80       	ldd	r10, Y+2	; 0x02
    11dc:	bb 80       	ldd	r11, Y+3	; 0x03
    11de:	ca 56       	subi	r28, 0x6A	; 106
    11e0:	d1 40       	sbci	r29, 0x01	; 1
				val = timer % 10;
    11e2:	c5 01       	movw	r24, r10
    11e4:	b4 01       	movw	r22, r8
    11e6:	2a e0       	ldi	r18, 0x0A	; 10
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	40 e0       	ldi	r20, 0x00	; 0
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__divmodsi4>
				arr[i] = val;
    11f2:	f8 01       	movw	r30, r16
    11f4:	61 93       	st	Z+, r22
    11f6:	8f 01       	movw	r16, r30
				timer = timer - val;
    11f8:	86 2f       	mov	r24, r22
    11fa:	97 2f       	mov	r25, r23
    11fc:	aa 27       	eor	r26, r26
    11fe:	97 fd       	sbrc	r25, 7
    1200:	a0 95       	com	r26
    1202:	ba 2f       	mov	r27, r26
    1204:	a5 01       	movw	r20, r10
    1206:	94 01       	movw	r18, r8
    1208:	28 1b       	sub	r18, r24
    120a:	39 0b       	sbc	r19, r25
    120c:	4a 0b       	sbc	r20, r26
    120e:	5b 0b       	sbc	r21, r27
    1210:	ca 01       	movw	r24, r20
    1212:	b9 01       	movw	r22, r18
				timer = timer / 10;
    1214:	2a e0       	ldi	r18, 0x0A	; 10
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e0       	ldi	r20, 0x00	; 0
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__divmodsi4>
    1220:	49 01       	movw	r8, r18
    1222:	5a 01       	movw	r10, r20
			}

			char arr[count];
			
			//SPILTING THE DIGITS
			for(i = 0; i < count; i++){
    1224:	0e 15       	cp	r16, r14
    1226:	1f 05       	cpc	r17, r15
    1228:	e1 f6       	brne	.-72     	; 0x11e2 <__stack+0xce3>
    122a:	c6 59       	subi	r28, 0x96	; 150
    122c:	de 4f       	sbci	r29, 0xFE	; 254
    122e:	28 83       	st	Y, r18
    1230:	39 83       	std	Y+1, r19	; 0x01
    1232:	4a 83       	std	Y+2, r20	; 0x02
    1234:	5b 83       	std	Y+3, r21	; 0x03
    1236:	ca 56       	subi	r28, 0x6A	; 106
    1238:	d1 40       	sbci	r29, 0x01	; 1
    123a:	46 01       	movw	r8, r12
				arr[i] = val;
				timer = timer - val;
				timer = timer / 10;
			}
			
			clear_oled();
    123c:	0e 94 a7 0a 	call	0x154e	; 0x154e <clear_oled>
			oled_set_column(0);
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
			oled_set_page(0);
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 a3 0a 	call	0x1546	; 0x1546 <oled_set_page>
    1250:	ae 01       	movw	r20, r28
    1252:	46 5c       	subi	r20, 0xC6	; 198
    1254:	5e 4f       	sbci	r21, 0xFE	; 254
    1256:	6a 01       	movw	r12, r20
    1258:	a1 2c       	mov	r10, r1
    125a:	b1 2c       	mov	r11, r1
    125c:	c2 59       	subi	r28, 0x92	; 146
    125e:	de 4f       	sbci	r29, 0xFE	; 254
    1260:	38 80       	ld	r3, Y
    1262:	ce 56       	subi	r28, 0x6E	; 110
    1264:	d1 40       	sbci	r29, 0x01	; 1
    1266:	c1 59       	subi	r28, 0x91	; 145
    1268:	de 4f       	sbci	r29, 0xFE	; 254
    126a:	28 80       	ld	r2, Y
    126c:	cf 56       	subi	r28, 0x6F	; 111
    126e:	d1 40       	sbci	r29, 0x01	; 1
    1270:	26 c0       	rjmp	.+76     	; 0x12be <__stack+0xdbf>
			for (k = 0; k < 9; k++){
				for (i = 0; i < 5; i++)	{
					oled_set_column(30+i+(k*5));
    1272:	c7 01       	movw	r24, r14
    1274:	80 0f       	add	r24, r16
    1276:	91 1f       	adc	r25, r17
    1278:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
					write_d(pgm_read_byte(&font5[score[0][k] - ' '][i]));
    127c:	d6 01       	movw	r26, r12
    127e:	8c 91       	ld	r24, X
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	80 97       	sbiw	r24, 0x20	; 32
    1284:	fc 01       	movw	r30, r24
    1286:	ee 0f       	add	r30, r30
    1288:	ff 1f       	adc	r31, r31
    128a:	ee 0f       	add	r30, r30
    128c:	ff 1f       	adc	r31, r31
    128e:	e8 0f       	add	r30, r24
    1290:	f9 1f       	adc	r31, r25
    1292:	e0 0f       	add	r30, r16
    1294:	f1 1f       	adc	r31, r17
    1296:	ea 57       	subi	r30, 0x7A	; 122
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	84 91       	lpm	r24, Z
    129c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <write_d>
			
			clear_oled();
			oled_set_column(0);
			oled_set_page(0);
			for (k = 0; k < 9; k++){
				for (i = 0; i < 5; i++)	{
    12a0:	0f 5f       	subi	r16, 0xFF	; 255
    12a2:	1f 4f       	sbci	r17, 0xFF	; 255
    12a4:	05 30       	cpi	r16, 0x05	; 5
    12a6:	11 05       	cpc	r17, r1
    12a8:	21 f7       	brne	.-56     	; 0x1272 <__stack+0xd73>
    12aa:	b5 e0       	ldi	r27, 0x05	; 5
    12ac:	ab 0e       	add	r10, r27
    12ae:	b1 1c       	adc	r11, r1
    12b0:	ef ef       	ldi	r30, 0xFF	; 255
    12b2:	ce 1a       	sub	r12, r30
    12b4:	de 0a       	sbc	r13, r30
			}
			
			clear_oled();
			oled_set_column(0);
			oled_set_page(0);
			for (k = 0; k < 9; k++){
    12b6:	fd e2       	ldi	r31, 0x2D	; 45
    12b8:	af 16       	cp	r10, r31
    12ba:	b1 04       	cpc	r11, r1
    12bc:	39 f0       	breq	.+14     	; 0x12cc <__stack+0xdcd>
			while(n >= 1){
				n /= 10;
				++count;
			}

			char arr[count];
    12be:	03 2d       	mov	r16, r3
    12c0:	12 2d       	mov	r17, r2
    12c2:	75 01       	movw	r14, r10
    12c4:	2e e1       	ldi	r18, 0x1E	; 30
    12c6:	e2 0e       	add	r14, r18
    12c8:	f1 1c       	adc	r15, r1
    12ca:	d3 cf       	rjmp	.-90     	; 0x1272 <__stack+0xd73>
					oled_set_column(30+i+(k*5));
					write_d(pgm_read_byte(&font5[score[0][k] - ' '][i]));
				}
			}

			oled_set_page(2);
    12cc:	82 e0       	ldi	r24, 0x02	; 2
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 a3 0a 	call	0x1546	; 0x1546 <oled_set_page>
			for (k = count; k > 0; k--){
    12d4:	18 14       	cp	r1, r8
    12d6:	19 04       	cpc	r1, r9
    12d8:	0c f0       	brlt	.+2      	; 0x12dc <__stack+0xddd>
    12da:	4c c0       	rjmp	.+152    	; 0x1374 <__stack+0xe75>
    12dc:	54 01       	movw	r10, r8
    12de:	31 e0       	ldi	r19, 0x01	; 1
    12e0:	a3 1a       	sub	r10, r19
    12e2:	b1 08       	sbc	r11, r1
    12e4:	81 2c       	mov	r8, r1
    12e6:	91 2c       	mov	r9, r1
    12e8:	c2 59       	subi	r28, 0x92	; 146
    12ea:	de 4f       	sbci	r29, 0xFE	; 254
    12ec:	38 80       	ld	r3, Y
    12ee:	ce 56       	subi	r28, 0x6E	; 110
    12f0:	d1 40       	sbci	r29, 0x01	; 1
    12f2:	c1 59       	subi	r28, 0x91	; 145
    12f4:	de 4f       	sbci	r29, 0xFE	; 254
    12f6:	28 80       	ld	r2, Y
    12f8:	cf 56       	subi	r28, 0x6F	; 111
    12fa:	d1 40       	sbci	r29, 0x01	; 1
    12fc:	31 c0       	rjmp	.+98     	; 0x1360 <__stack+0xe61>
				for (i = 0; i < 5; i++)	{
					oled_set_column(30+i+((count-k)*5));
    12fe:	c6 01       	movw	r24, r12
    1300:	80 0f       	add	r24, r16
    1302:	91 1f       	adc	r25, r17
    1304:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
					write_d(pgm_read_byte(&font5[numbers[arr[k-1]][0] - ' '][i]));
    1308:	d7 01       	movw	r26, r14
    130a:	8c 91       	ld	r24, X
    130c:	e3 e4       	ldi	r30, 0x43	; 67
    130e:	f1 e0       	ldi	r31, 0x01	; 1
    1310:	ec 0f       	add	r30, r28
    1312:	fd 1f       	adc	r31, r29
    1314:	e8 0f       	add	r30, r24
    1316:	f1 1d       	adc	r31, r1
    1318:	80 81       	ld	r24, Z
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	80 97       	sbiw	r24, 0x20	; 32
    131e:	fc 01       	movw	r30, r24
    1320:	ee 0f       	add	r30, r30
    1322:	ff 1f       	adc	r31, r31
    1324:	ee 0f       	add	r30, r30
    1326:	ff 1f       	adc	r31, r31
    1328:	e8 0f       	add	r30, r24
    132a:	f9 1f       	adc	r31, r25
    132c:	e0 0f       	add	r30, r16
    132e:	f1 1f       	adc	r31, r17
    1330:	ea 57       	subi	r30, 0x7A	; 122
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	84 91       	lpm	r24, Z
    1336:	0e 94 55 0a 	call	0x14aa	; 0x14aa <write_d>
    133a:	e0 e0       	ldi	r30, 0x00	; 0
    133c:	f0 ef       	ldi	r31, 0xF0	; 240
    133e:	31 97       	sbiw	r30, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <__stack+0xe3f>
				}
			}

			oled_set_page(2);
			for (k = count; k > 0; k--){
				for (i = 0; i < 5; i++)	{
    1342:	0f 5f       	subi	r16, 0xFF	; 255
    1344:	1f 4f       	sbci	r17, 0xFF	; 255
    1346:	05 30       	cpi	r16, 0x05	; 5
    1348:	11 05       	cpc	r17, r1
    134a:	c9 f6       	brne	.-78     	; 0x12fe <__stack+0xdff>
    134c:	f1 e0       	ldi	r31, 0x01	; 1
    134e:	af 1a       	sub	r10, r31
    1350:	b1 08       	sbc	r11, r1
    1352:	25 e0       	ldi	r18, 0x05	; 5
    1354:	82 0e       	add	r8, r18
    1356:	91 1c       	adc	r9, r1
					write_d(pgm_read_byte(&font5[score[0][k] - ' '][i]));
				}
			}

			oled_set_page(2);
			for (k = count; k > 0; k--){
    1358:	3f ef       	ldi	r19, 0xFF	; 255
    135a:	a3 16       	cp	r10, r19
    135c:	b3 06       	cpc	r11, r19
    135e:	51 f0       	breq	.+20     	; 0x1374 <__stack+0xe75>
				timer = timer / 10;
			}
			
			clear_oled();
			oled_set_column(0);
			oled_set_page(0);
    1360:	03 2d       	mov	r16, r3
    1362:	12 2d       	mov	r17, r2
    1364:	64 01       	movw	r12, r8
    1366:	4e e1       	ldi	r20, 0x1E	; 30
    1368:	c4 0e       	add	r12, r20
    136a:	d1 1c       	adc	r13, r1
    136c:	73 01       	movw	r14, r6
    136e:	ea 0c       	add	r14, r10
    1370:	fb 1c       	adc	r15, r11
    1372:	c5 cf       	rjmp	.-118    	; 0x12fe <__stack+0xdff>
    1374:	5f ef       	ldi	r21, 0xFF	; 255
    1376:	8f ef       	ldi	r24, 0xFF	; 255
    1378:	9b e3       	ldi	r25, 0x3B	; 59
    137a:	51 50       	subi	r21, 0x01	; 1
    137c:	80 40       	sbci	r24, 0x00	; 0
    137e:	90 40       	sbci	r25, 0x00	; 0
    1380:	e1 f7       	brne	.-8      	; 0x137a <__stack+0xe7b>
    1382:	00 c0       	rjmp	.+0      	; 0x1384 <__stack+0xe85>
    1384:	00 00       	nop
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	5e be       	out	0x3e, r5	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	4d be       	out	0x3d, r4	; 61
					write_d(pgm_read_byte(&font5[numbers[arr[k-1]][0] - ' '][i]));
					_delay_ms(50);
				}
			}		
			_delay_ms(delay*20);
			sub_menu = 1;			//Go to main manu
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	19 c9       	rjmp	.-3534   	; 0x5c8 <__stack+0xc9>
			unsigned int y_volt = read_adc(ADC_CHANNEL_JOY_Y);
			
			if (y_volt < 125 && select_menu < 2){
				select_menu++;
			}
			if (y_volt > 130 && select_menu > 1){
    1396:	23 38       	cpi	r18, 0x83	; 131
    1398:	31 05       	cpc	r19, r1
    139a:	08 f0       	brcs	.+2      	; 0x139e <__stack+0xe9f>
    139c:	39 c9       	rjmp	.-3470   	; 0x610 <__stack+0x111>
    139e:	3b c9       	rjmp	.-3466   	; 0x616 <__stack+0x117>
			}
			if (y_volt > 135 && select_menu > 1){
				select_menu--;
			}
			if(x_volt < 60){
				sub_menu = 1;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	15 c0       	rjmp	.+42     	; 0x13d0 <__stack+0xed1>
				}
				if (select_menu == 2){	
					team_chosen = 1;
				}
				if (select_menu == 3){	
					team_chosen = 2;
    13a6:	a2 e0       	ldi	r26, 0x02	; 2
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	cd 58       	subi	r28, 0x8D	; 141
    13ac:	de 4f       	sbci	r29, 0xFE	; 254
    13ae:	b9 83       	std	Y+1, r27	; 0x01
    13b0:	a8 83       	st	Y, r26
    13b2:	c3 57       	subi	r28, 0x73	; 115
    13b4:	d1 40       	sbci	r29, 0x01	; 1
				}
				if (select_menu == 4){	
					team_chosen = 3;
				}
				sub_menu = 4;	// Go to print chosen team
    13b6:	84 e0       	ldi	r24, 0x04	; 4
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0a c0       	rjmp	.+20     	; 0x13d0 <__stack+0xed1>
				}
				if (select_menu == 3){	
					team_chosen = 2;
				}
				if (select_menu == 4){	
					team_chosen = 3;
    13bc:	e3 e0       	ldi	r30, 0x03	; 3
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	cd 58       	subi	r28, 0x8D	; 141
    13c2:	de 4f       	sbci	r29, 0xFE	; 254
    13c4:	f9 83       	std	Y+1, r31	; 0x01
    13c6:	e8 83       	st	Y, r30
    13c8:	c3 57       	subi	r28, 0x73	; 115
    13ca:	d1 40       	sbci	r29, 0x01	; 1
				}
				sub_menu = 4;	// Go to print chosen team
    13cc:	84 e0       	ldi	r24, 0x04	; 4
    13ce:	90 e0       	ldi	r25, 0x00	; 0
			
			clear_oled();
			oled_set_column(0);
			oled_set_page(0);
						
			for (k = 0; k < 4; k++){
    13d0:	ca 58       	subi	r28, 0x8A	; 138
    13d2:	de 4f       	sbci	r29, 0xFE	; 254
    13d4:	28 83       	st	Y, r18
    13d6:	c6 57       	subi	r28, 0x76	; 118
    13d8:	d1 40       	sbci	r29, 0x01	; 1
    13da:	1e cc       	rjmp	.-1988   	; 0xc18 <__stack+0x719>
    13dc:	cb 58       	subi	r28, 0x8B	; 139
    13de:	de 4f       	sbci	r29, 0xFE	; 254
    13e0:	18 83       	st	Y, r17
    13e2:	c5 57       	subi	r28, 0x75	; 117
    13e4:	d1 40       	sbci	r29, 0x01	; 1
			}
			if (y_volt > 135 && select_menu > 1){
				select_menu--;
			}
			if(x_volt < 60){
				sub_menu = 1;			//Go to main manu
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	8b cc       	rjmp	.-1770   	; 0xd02 <__stack+0x803>
				if (select_menu == 2){	
					lives = 3;
					sub_menu =6;
				}
				if (select_menu == 3){
					lives = 1;
    13ec:	f1 e0       	ldi	r31, 0x01	; 1
    13ee:	c7 59       	subi	r28, 0x97	; 151
    13f0:	de 4f       	sbci	r29, 0xFE	; 254
    13f2:	f8 83       	st	Y, r31
    13f4:	c9 56       	subi	r28, 0x69	; 105
    13f6:	d1 40       	sbci	r29, 0x01	; 1
					sub_menu =6;
    13f8:	86 e0       	ldi	r24, 0x06	; 6
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	82 cc       	rjmp	.-1788   	; 0xd02 <__stack+0x803>
    13fe:	4d b6       	in	r4, 0x3d	; 61
    1400:	5e b6       	in	r5, 0x3e	; 62
		}
		//DISPLAY SCORE
		while(sub_menu == 7) 
		{
			int val;
			int count = 0;
    1402:	81 2c       	mov	r8, r1
    1404:	91 2c       	mov	r9, r1
			while(n >= 1){
				n /= 10;
				++count;
			}

			char arr[count];
    1406:	9e 01       	movw	r18, r28
    1408:	2f 5f       	subi	r18, 0xFF	; 255
    140a:	3f 4f       	sbci	r19, 0xFF	; 255
    140c:	39 01       	movw	r6, r18
    140e:	16 cf       	rjmp	.-468    	; 0x123c <__stack+0xd3d>
				if (select_menu == 1){	
					lives =  5;
					sub_menu = 6;
				}
				if (select_menu == 2){	
					lives = 3;
    1410:	33 e0       	ldi	r19, 0x03	; 3
    1412:	c7 59       	subi	r28, 0x97	; 151
    1414:	de 4f       	sbci	r29, 0xFE	; 254
    1416:	38 83       	st	Y, r19
    1418:	c9 56       	subi	r28, 0x69	; 105
    141a:	d1 40       	sbci	r29, 0x01	; 1
					sub_menu =6;
    141c:	86 e0       	ldi	r24, 0x06	; 6
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	70 cc       	rjmp	.-1824   	; 0xd02 <__stack+0x803>

00001422 <main>:


void main(void)
{
	//INIT
	USART_Init(MYUBRR);
    1422:	8f e1       	ldi	r24, 0x1F	; 31
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 94 0f 0b 	call	0x161e	; 0x161e <USART_Init>
	ram_init();
    142a:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <ram_init>
	MCP_init();
    142e:	0e 94 29 0a 	call	0x1452	; 0x1452 <MCP_init>
	CAN_init();
    1432:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <CAN_init>
	oled_init();
    1436:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <oled_init>
	init_program();
    143a:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <init_program>
	
	//GAING 
	game();
    143e:	0e 94 07 02 	call	0x40e	; 0x40e <game>

00001442 <MCP_reset>:
	return 0;
}

int MCP_reset(void)
{
	PORTB &= ~(1 << SS);
    1442:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(MCP_RESET);
    1444:	80 ec       	ldi	r24, 0xC0	; 192
    1446:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <SPI_MasterTransmit>
	
	PORTB |= (1 << SS);
    144a:	c4 9a       	sbi	0x18, 4	; 24
	
	return 0;
}
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	08 95       	ret

00001452 <MCP_init>:
#include "SPI.h"
#include "MCP2515.h"

int MCP_init(void)
{
	SPI_MasterInit();
    1452:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <SPI_MasterInit>
	MCP_reset();
    1456:	0e 94 21 0a 	call	0x1442	; 0x1442 <MCP_reset>
	
	return 0;
}
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	08 95       	ret

00001460 <MCP_read>:
	
	return 0;
}

char MCP_read(char address)
{
    1460:	cf 93       	push	r28
    1462:	c8 2f       	mov	r28, r24
	PORTB &= ~(1 << SS); 
    1464:	c4 98       	cbi	0x18, 4	; 24
		
	SPI_MasterTransmit(MCP_READ);
    1466:	83 e0       	ldi	r24, 0x03	; 3
    1468:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
    146c:	8c 2f       	mov	r24, r28
    146e:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <SPI_MasterTransmit>
	
	char data = SPI_SlaveReceive();
    1472:	0e 94 02 0b 	call	0x1604	; 0x1604 <SPI_SlaveReceive>
	
	PORTB |= (1 << SS);
    1476:	c4 9a       	sbi	0x18, 4	; 24
	
	return data;

}
    1478:	cf 91       	pop	r28
    147a:	08 95       	ret

0000147c <MCP_write>:

void MCP_write(char address, char data)
{
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	d8 2f       	mov	r29, r24
    1482:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << SS); 
    1484:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(MCP_WRITE);
    1486:	82 e0       	ldi	r24, 0x02	; 2
    1488:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
    148c:	8d 2f       	mov	r24, r29
    148e:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
    1492:	8c 2f       	mov	r24, r28
    1494:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <SPI_MasterTransmit>
	
	PORTB |= (1 << SS);
    1498:	c4 9a       	sbi	0x18, 4	; 24
}
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	08 95       	ret

000014a0 <MCP_rts>:

void MCP_rts(char rts)
{
	PORTB &= ~(1 << SS);
    14a0:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(rts);
    14a2:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <SPI_MasterTransmit>
	
	PORTB |= (1 << SS);
    14a6:	c4 9a       	sbi	0x18, 4	; 24
    14a8:	08 95       	ret

000014aa <write_d>:
}

void write_d(unsigned char out_com)
{
	volatile char *OLEDd = (char*)OLED_DATA_MEMORY_START;
	*OLEDd = out_com;
    14aa:	80 93 00 12 	sts	0x1200, r24
    14ae:	08 95       	ret

000014b0 <oled_init>:
}

void oled_init(void)
{
	bit_set(MCUCR, SRE);
    14b0:	85 b7       	in	r24, 0x35	; 53
    14b2:	80 68       	ori	r24, 0x80	; 128
    14b4:	85 bf       	out	0x35, r24	; 53
	
	bit_set(SFIOR, XMM2);
    14b6:	80 b7       	in	r24, 0x30	; 48
    14b8:	80 62       	ori	r24, 0x20	; 32
    14ba:	80 bf       	out	0x30, r24	; 48
	bit_clear(SFIOR, XMM1);
    14bc:	80 b7       	in	r24, 0x30	; 48
    14be:	8f 7e       	andi	r24, 0xEF	; 239
    14c0:	80 bf       	out	0x30, r24	; 48
	bit_clear(SFIOR, XMM0);
    14c2:	80 b7       	in	r24, 0x30	; 48
    14c4:	87 7f       	andi	r24, 0xF7	; 247
    14c6:	80 bf       	out	0x30, r24	; 48

	bit_set(MCUCR, SRW11);
    14c8:	85 b7       	in	r24, 0x35	; 53
    14ca:	82 60       	ori	r24, 0x02	; 2
    14cc:	85 bf       	out	0x35, r24	; 53
	bit_clear(EMCUCR, SRW10);
    14ce:	86 b7       	in	r24, 0x36	; 54
    14d0:	8f 7b       	andi	r24, 0xBF	; 191
    14d2:	86 bf       	out	0x36, r24	; 54
    14d4:	08 95       	ret

000014d6 <init_program>:
#include "define.h"

void write_c(unsigned char out_com)
{
	volatile char *OLEDc = (char*)OLED_COMMAND_MEMORY_START;
	*OLEDc = out_com;
    14d6:	e0 e0       	ldi	r30, 0x00	; 0
    14d8:	f0 e1       	ldi	r31, 0x10	; 16
    14da:	8e ea       	ldi	r24, 0xAE	; 174
    14dc:	80 83       	st	Z, r24
    14de:	81 ea       	ldi	r24, 0xA1	; 161
    14e0:	80 83       	st	Z, r24
    14e2:	8a ed       	ldi	r24, 0xDA	; 218
    14e4:	80 83       	st	Z, r24
    14e6:	82 e1       	ldi	r24, 0x12	; 18
    14e8:	80 83       	st	Z, r24
    14ea:	88 ec       	ldi	r24, 0xC8	; 200
    14ec:	80 83       	st	Z, r24
    14ee:	88 ea       	ldi	r24, 0xA8	; 168
    14f0:	80 83       	st	Z, r24
    14f2:	8f e3       	ldi	r24, 0x3F	; 63
    14f4:	80 83       	st	Z, r24
    14f6:	85 ed       	ldi	r24, 0xD5	; 213
    14f8:	80 83       	st	Z, r24
    14fa:	80 e8       	ldi	r24, 0x80	; 128
    14fc:	80 83       	st	Z, r24
    14fe:	81 e8       	ldi	r24, 0x81	; 129
    1500:	80 83       	st	Z, r24
    1502:	80 e5       	ldi	r24, 0x50	; 80
    1504:	80 83       	st	Z, r24
    1506:	89 ed       	ldi	r24, 0xD9	; 217
    1508:	80 83       	st	Z, r24
    150a:	81 e2       	ldi	r24, 0x21	; 33
    150c:	80 83       	st	Z, r24
    150e:	80 e2       	ldi	r24, 0x20	; 32
    1510:	80 83       	st	Z, r24
    1512:	82 e0       	ldi	r24, 0x02	; 2
    1514:	80 83       	st	Z, r24
    1516:	8d eb       	ldi	r24, 0xBD	; 189
    1518:	80 83       	st	Z, r24
    151a:	80 e3       	ldi	r24, 0x30	; 48
    151c:	80 83       	st	Z, r24
    151e:	8d ea       	ldi	r24, 0xAD	; 173
    1520:	80 83       	st	Z, r24
    1522:	10 82       	st	Z, r1
    1524:	84 ea       	ldi	r24, 0xA4	; 164
    1526:	80 83       	st	Z, r24
    1528:	86 ea       	ldi	r24, 0xA6	; 166
    152a:	80 83       	st	Z, r24
    152c:	8f ea       	ldi	r24, 0xAF	; 175
    152e:	80 83       	st	Z, r24
    1530:	08 95       	ret

00001532 <oled_set_column>:
	write_c(0xAF);        // display  on
}

void oled_set_column(uint8_t column)
{
	write_c(0x00 + column%16);
    1532:	98 2f       	mov	r25, r24
    1534:	9f 70       	andi	r25, 0x0F	; 15
#include "define.h"

void write_c(unsigned char out_com)
{
	volatile char *OLEDc = (char*)OLED_COMMAND_MEMORY_START;
	*OLEDc = out_com;
    1536:	e0 e0       	ldi	r30, 0x00	; 0
    1538:	f0 e1       	ldi	r31, 0x10	; 16
    153a:	90 83       	st	Z, r25
}

void oled_set_column(uint8_t column)
{
	write_c(0x00 + column%16);
	write_c(0x10 + column/16); // start address
    153c:	82 95       	swap	r24
    153e:	8f 70       	andi	r24, 0x0F	; 15
    1540:	80 5f       	subi	r24, 0xF0	; 240
#include "define.h"

void write_c(unsigned char out_com)
{
	volatile char *OLEDc = (char*)OLED_COMMAND_MEMORY_START;
	*OLEDc = out_com;
    1542:	80 83       	st	Z, r24
    1544:	08 95       	ret

00001546 <oled_set_page>:
	write_c(0x10 + column/16); // start address
	
}
void oled_set_page(uint8_t page)
{
	write_c(0xB0 + page);
    1546:	80 55       	subi	r24, 0x50	; 80
#include "define.h"

void write_c(unsigned char out_com)
{
	volatile char *OLEDc = (char*)OLED_COMMAND_MEMORY_START;
	*OLEDc = out_com;
    1548:	80 93 00 10 	sts	0x1000, r24
    154c:	08 95       	ret

0000154e <clear_oled>:
{
	write_c(0xB0 + page);
}

void clear_oled()
{
    154e:	af 92       	push	r10
    1550:	bf 92       	push	r11
    1552:	df 92       	push	r13
    1554:	ef 92       	push	r14
    1556:	1f 93       	push	r17
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	0f 2e       	mov	r0, r31
    155e:	f0 eb       	ldi	r31, 0xB0	; 176
    1560:	ef 2e       	mov	r14, r31
    1562:	f0 2d       	mov	r31, r0
#include "define.h"

void write_c(unsigned char out_com)
{
	volatile char *OLEDc = (char*)OLED_COMMAND_MEMORY_START;
	*OLEDc = out_com;
    1564:	a1 2c       	mov	r10, r1
    1566:	68 94       	set
    1568:	bb 24       	eor	r11, r11
    156a:	b4 f8       	bld	r11, 4
    156c:	d1 2c       	mov	r13, r1
}

void write_d(unsigned char out_com)
{
	volatile char *OLEDd = (char*)OLED_DATA_MEMORY_START;
	*OLEDd = out_com;
    156e:	c0 e0       	ldi	r28, 0x00	; 0
    1570:	d2 e1       	ldi	r29, 0x12	; 18
#include "define.h"

void write_c(unsigned char out_com)
{
	volatile char *OLEDc = (char*)OLED_COMMAND_MEMORY_START;
	*OLEDc = out_com;
    1572:	f5 01       	movw	r30, r10
    1574:	e0 82       	st	Z, r14
    1576:	1d 2d       	mov	r17, r13
	{
		oled_set_page(j);
		
		for(i = 0; i < 128; i++)
		{
			oled_set_column(i);
    1578:	81 2f       	mov	r24, r17
    157a:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
}

void write_d(unsigned char out_com)
{
	volatile char *OLEDd = (char*)OLED_DATA_MEMORY_START;
	*OLEDd = out_com;
    157e:	18 82       	st	Y, r1
    1580:	1f 5f       	subi	r17, 0xFF	; 255
	
	for(j = 0; j < 8; j++)
	{
		oled_set_page(j);
		
		for(i = 0; i < 128; i++)
    1582:	10 38       	cpi	r17, 0x80	; 128
    1584:	c9 f7       	brne	.-14     	; 0x1578 <clear_oled+0x2a>
    1586:	e3 94       	inc	r14

void clear_oled()
{
	int i, j;
	
	for(j = 0; j < 8; j++)
    1588:	f8 eb       	ldi	r31, 0xB8	; 184
    158a:	ef 12       	cpse	r14, r31
    158c:	f2 cf       	rjmp	.-28     	; 0x1572 <clear_oled+0x24>
		{
			oled_set_column(i);
			write_d(0x00);
		}
	}
}
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	ef 90       	pop	r14
    1596:	df 90       	pop	r13
    1598:	bf 90       	pop	r11
    159a:	af 90       	pop	r10
    159c:	08 95       	ret

0000159e <clear_page>:
	write_d(0b01111110);
	write_d(0b00111100);
	write_d(0b00011000);
}
void clear_page(int page)
{
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
	write_c(0x10 + column/16); // start address
	
}
void oled_set_page(uint8_t page)
{
	write_c(0xB0 + page);
    15a4:	80 55       	subi	r24, 0x50	; 80
#include "define.h"

void write_c(unsigned char out_com)
{
	volatile char *OLEDc = (char*)OLED_COMMAND_MEMORY_START;
	*OLEDc = out_com;
    15a6:	80 93 00 10 	sts	0x1000, r24
    15aa:	10 e0       	ldi	r17, 0x00	; 0
}

void write_d(unsigned char out_com)
{
	volatile char *OLEDd = (char*)OLED_DATA_MEMORY_START;
	*OLEDd = out_com;
    15ac:	c0 e0       	ldi	r28, 0x00	; 0
    15ae:	d2 e1       	ldi	r29, 0x12	; 18
{
	oled_set_page(page);
			
		for(int i = 0; i < 128; i++)
		{
			oled_set_column(i);
    15b0:	81 2f       	mov	r24, r17
    15b2:	0e 94 99 0a 	call	0x1532	; 0x1532 <oled_set_column>
}

void write_d(unsigned char out_com)
{
	volatile char *OLEDd = (char*)OLED_DATA_MEMORY_START;
	*OLEDd = out_com;
    15b6:	18 82       	st	Y, r1
    15b8:	1f 5f       	subi	r17, 0xFF	; 255
}
void clear_page(int page)
{
	oled_set_page(page);
			
		for(int i = 0; i < 128; i++)
    15ba:	10 38       	cpi	r17, 0x80	; 128
    15bc:	c9 f7       	brne	.-14     	; 0x15b0 <clear_page+0x12>
		{
			oled_set_column(i);
			write_d(0x00);
		}
}
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	1f 91       	pop	r17
    15c4:	08 95       	ret

000015c6 <ram_init>:
#include "define.h"

void ram_init(void)
{
	bit_set(MCUCR, SRE);
    15c6:	85 b7       	in	r24, 0x35	; 53
    15c8:	80 68       	ori	r24, 0x80	; 128
    15ca:	85 bf       	out	0x35, r24	; 53
	
	bit_set(SFIOR, XMM2);
    15cc:	80 b7       	in	r24, 0x30	; 48
    15ce:	80 62       	ori	r24, 0x20	; 32
    15d0:	80 bf       	out	0x30, r24	; 48
	bit_clear(SFIOR, XMM1);
    15d2:	80 b7       	in	r24, 0x30	; 48
    15d4:	8f 7e       	andi	r24, 0xEF	; 239
    15d6:	80 bf       	out	0x30, r24	; 48
	bit_clear(SFIOR, XMM0);
    15d8:	80 b7       	in	r24, 0x30	; 48
    15da:	87 7f       	andi	r24, 0xF7	; 247
    15dc:	80 bf       	out	0x30, r24	; 48

	bit_set(MCUCR, SRW11);
    15de:	85 b7       	in	r24, 0x35	; 53
    15e0:	82 60       	ori	r24, 0x02	; 2
    15e2:	85 bf       	out	0x35, r24	; 53
	bit_clear(EMCUCR, SRW10);	
    15e4:	86 b7       	in	r24, 0x36	; 54
    15e6:	8f 7b       	andi	r24, 0xBF	; 191
    15e8:	86 bf       	out	0x36, r24	; 54
    15ea:	08 95       	ret

000015ec <SPI_MasterInit>:
#define SCK PB7


void SPI_MasterInit(void)
{
	DDRB |= (1 << MOSI) | (1 << SS) | (1 << SCK);
    15ec:	87 b3       	in	r24, 0x17	; 23
    15ee:	80 6b       	ori	r24, 0xB0	; 176
    15f0:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << MISO);
    15f2:	be 98       	cbi	0x17, 6	; 23
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
    15f4:	8d b1       	in	r24, 0x0d	; 13
    15f6:	81 65       	ori	r24, 0x51	; 81
    15f8:	8d b9       	out	0x0d, r24	; 13
    15fa:	08 95       	ret

000015fc <SPI_MasterTransmit>:
}


void SPI_MasterTransmit(char cdata)
{
	SPDR = cdata;
    15fc:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
    15fe:	77 9b       	sbis	0x0e, 7	; 14
    1600:	fe cf       	rjmp	.-4      	; 0x15fe <SPI_MasterTransmit+0x2>
}
    1602:	08 95       	ret

00001604 <SPI_SlaveReceive>:
}


uint8_t SPI_SlaveReceive(void)
{
	SPI_MasterTransmit(0);
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <SPI_MasterTransmit>
	return SPDR;
    160a:	8f b1       	in	r24, 0x0f	; 15
    160c:	08 95       	ret

0000160e <USART_Transmit>:
	uart = fdevopen(&USART_Transmit, &USART_Receive);
}

void USART_Transmit(unsigned char data)
{
	while ( !(UCSR0A & (1 << UDRE0)) );
    160e:	5d 9b       	sbis	0x0b, 5	; 11
    1610:	fe cf       	rjmp	.-4      	; 0x160e <USART_Transmit>
	
	UDR0 = data;
    1612:	8c b9       	out	0x0c, r24	; 12
    1614:	08 95       	ret

00001616 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	while ( !(UCSR0A & (1 << RXC0)) );
    1616:	5f 9b       	sbis	0x0b, 7	; 11
    1618:	fe cf       	rjmp	.-4      	; 0x1616 <USART_Receive>

	return UDR0;
    161a:	8c b1       	in	r24, 0x0c	; 12
}
    161c:	08 95       	ret

0000161e <USART_Init>:

FILE *uart;

void USART_Init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr >> 8);
    161e:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
    1620:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
    1622:	88 e1       	ldi	r24, 0x18	; 24
    1624:	8a b9       	out	0x0a, r24	; 10
	
	uart = fdevopen(&USART_Transmit, &USART_Receive);
    1626:	6b e0       	ldi	r22, 0x0B	; 11
    1628:	7b e0       	ldi	r23, 0x0B	; 11
    162a:	87 e0       	ldi	r24, 0x07	; 7
    162c:	9b e0       	ldi	r25, 0x0B	; 11
    162e:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <fdevopen>
    1632:	90 93 49 02 	sts	0x0249, r25
    1636:	80 93 48 02 	sts	0x0248, r24
    163a:	08 95       	ret

0000163c <__divsf3>:
    163c:	0c d0       	rcall	.+24     	; 0x1656 <__divsf3x>
    163e:	ba c0       	rjmp	.+372    	; 0x17b4 <__fp_round>
    1640:	b2 d0       	rcall	.+356    	; 0x17a6 <__fp_pscB>
    1642:	40 f0       	brcs	.+16     	; 0x1654 <__divsf3+0x18>
    1644:	a9 d0       	rcall	.+338    	; 0x1798 <__fp_pscA>
    1646:	30 f0       	brcs	.+12     	; 0x1654 <__divsf3+0x18>
    1648:	21 f4       	brne	.+8      	; 0x1652 <__divsf3+0x16>
    164a:	5f 3f       	cpi	r21, 0xFF	; 255
    164c:	19 f0       	breq	.+6      	; 0x1654 <__divsf3+0x18>
    164e:	9b c0       	rjmp	.+310    	; 0x1786 <__fp_inf>
    1650:	51 11       	cpse	r21, r1
    1652:	e4 c0       	rjmp	.+456    	; 0x181c <__fp_szero>
    1654:	9e c0       	rjmp	.+316    	; 0x1792 <__fp_nan>

00001656 <__divsf3x>:
    1656:	bf d0       	rcall	.+382    	; 0x17d6 <__fp_split3>
    1658:	98 f3       	brcs	.-26     	; 0x1640 <__divsf3+0x4>

0000165a <__divsf3_pse>:
    165a:	99 23       	and	r25, r25
    165c:	c9 f3       	breq	.-14     	; 0x1650 <__divsf3+0x14>
    165e:	55 23       	and	r21, r21
    1660:	b1 f3       	breq	.-20     	; 0x164e <__divsf3+0x12>
    1662:	95 1b       	sub	r25, r21
    1664:	55 0b       	sbc	r21, r21
    1666:	bb 27       	eor	r27, r27
    1668:	aa 27       	eor	r26, r26
    166a:	62 17       	cp	r22, r18
    166c:	73 07       	cpc	r23, r19
    166e:	84 07       	cpc	r24, r20
    1670:	38 f0       	brcs	.+14     	; 0x1680 <__divsf3_pse+0x26>
    1672:	9f 5f       	subi	r25, 0xFF	; 255
    1674:	5f 4f       	sbci	r21, 0xFF	; 255
    1676:	22 0f       	add	r18, r18
    1678:	33 1f       	adc	r19, r19
    167a:	44 1f       	adc	r20, r20
    167c:	aa 1f       	adc	r26, r26
    167e:	a9 f3       	breq	.-22     	; 0x166a <__divsf3_pse+0x10>
    1680:	33 d0       	rcall	.+102    	; 0x16e8 <__divsf3_pse+0x8e>
    1682:	0e 2e       	mov	r0, r30
    1684:	3a f0       	brmi	.+14     	; 0x1694 <__divsf3_pse+0x3a>
    1686:	e0 e8       	ldi	r30, 0x80	; 128
    1688:	30 d0       	rcall	.+96     	; 0x16ea <__divsf3_pse+0x90>
    168a:	91 50       	subi	r25, 0x01	; 1
    168c:	50 40       	sbci	r21, 0x00	; 0
    168e:	e6 95       	lsr	r30
    1690:	00 1c       	adc	r0, r0
    1692:	ca f7       	brpl	.-14     	; 0x1686 <__divsf3_pse+0x2c>
    1694:	29 d0       	rcall	.+82     	; 0x16e8 <__divsf3_pse+0x8e>
    1696:	fe 2f       	mov	r31, r30
    1698:	27 d0       	rcall	.+78     	; 0x16e8 <__divsf3_pse+0x8e>
    169a:	66 0f       	add	r22, r22
    169c:	77 1f       	adc	r23, r23
    169e:	88 1f       	adc	r24, r24
    16a0:	bb 1f       	adc	r27, r27
    16a2:	26 17       	cp	r18, r22
    16a4:	37 07       	cpc	r19, r23
    16a6:	48 07       	cpc	r20, r24
    16a8:	ab 07       	cpc	r26, r27
    16aa:	b0 e8       	ldi	r27, 0x80	; 128
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <__divsf3_pse+0x56>
    16ae:	bb 0b       	sbc	r27, r27
    16b0:	80 2d       	mov	r24, r0
    16b2:	bf 01       	movw	r22, r30
    16b4:	ff 27       	eor	r31, r31
    16b6:	93 58       	subi	r25, 0x83	; 131
    16b8:	5f 4f       	sbci	r21, 0xFF	; 255
    16ba:	2a f0       	brmi	.+10     	; 0x16c6 <__divsf3_pse+0x6c>
    16bc:	9e 3f       	cpi	r25, 0xFE	; 254
    16be:	51 05       	cpc	r21, r1
    16c0:	68 f0       	brcs	.+26     	; 0x16dc <__divsf3_pse+0x82>
    16c2:	61 c0       	rjmp	.+194    	; 0x1786 <__fp_inf>
    16c4:	ab c0       	rjmp	.+342    	; 0x181c <__fp_szero>
    16c6:	5f 3f       	cpi	r21, 0xFF	; 255
    16c8:	ec f3       	brlt	.-6      	; 0x16c4 <__divsf3_pse+0x6a>
    16ca:	98 3e       	cpi	r25, 0xE8	; 232
    16cc:	dc f3       	brlt	.-10     	; 0x16c4 <__divsf3_pse+0x6a>
    16ce:	86 95       	lsr	r24
    16d0:	77 95       	ror	r23
    16d2:	67 95       	ror	r22
    16d4:	b7 95       	ror	r27
    16d6:	f7 95       	ror	r31
    16d8:	9f 5f       	subi	r25, 0xFF	; 255
    16da:	c9 f7       	brne	.-14     	; 0x16ce <__divsf3_pse+0x74>
    16dc:	88 0f       	add	r24, r24
    16de:	91 1d       	adc	r25, r1
    16e0:	96 95       	lsr	r25
    16e2:	87 95       	ror	r24
    16e4:	97 f9       	bld	r25, 7
    16e6:	08 95       	ret
    16e8:	e1 e0       	ldi	r30, 0x01	; 1
    16ea:	66 0f       	add	r22, r22
    16ec:	77 1f       	adc	r23, r23
    16ee:	88 1f       	adc	r24, r24
    16f0:	bb 1f       	adc	r27, r27
    16f2:	62 17       	cp	r22, r18
    16f4:	73 07       	cpc	r23, r19
    16f6:	84 07       	cpc	r24, r20
    16f8:	ba 07       	cpc	r27, r26
    16fa:	20 f0       	brcs	.+8      	; 0x1704 <__divsf3_pse+0xaa>
    16fc:	62 1b       	sub	r22, r18
    16fe:	73 0b       	sbc	r23, r19
    1700:	84 0b       	sbc	r24, r20
    1702:	ba 0b       	sbc	r27, r26
    1704:	ee 1f       	adc	r30, r30
    1706:	88 f7       	brcc	.-30     	; 0x16ea <__divsf3_pse+0x90>
    1708:	e0 95       	com	r30
    170a:	08 95       	ret

0000170c <__floatunsisf>:
    170c:	e8 94       	clt
    170e:	09 c0       	rjmp	.+18     	; 0x1722 <__floatsisf+0x12>

00001710 <__floatsisf>:
    1710:	97 fb       	bst	r25, 7
    1712:	3e f4       	brtc	.+14     	; 0x1722 <__floatsisf+0x12>
    1714:	90 95       	com	r25
    1716:	80 95       	com	r24
    1718:	70 95       	com	r23
    171a:	61 95       	neg	r22
    171c:	7f 4f       	sbci	r23, 0xFF	; 255
    171e:	8f 4f       	sbci	r24, 0xFF	; 255
    1720:	9f 4f       	sbci	r25, 0xFF	; 255
    1722:	99 23       	and	r25, r25
    1724:	a9 f0       	breq	.+42     	; 0x1750 <__floatsisf+0x40>
    1726:	f9 2f       	mov	r31, r25
    1728:	96 e9       	ldi	r25, 0x96	; 150
    172a:	bb 27       	eor	r27, r27
    172c:	93 95       	inc	r25
    172e:	f6 95       	lsr	r31
    1730:	87 95       	ror	r24
    1732:	77 95       	ror	r23
    1734:	67 95       	ror	r22
    1736:	b7 95       	ror	r27
    1738:	f1 11       	cpse	r31, r1
    173a:	f8 cf       	rjmp	.-16     	; 0x172c <__floatsisf+0x1c>
    173c:	fa f4       	brpl	.+62     	; 0x177c <__floatsisf+0x6c>
    173e:	bb 0f       	add	r27, r27
    1740:	11 f4       	brne	.+4      	; 0x1746 <__floatsisf+0x36>
    1742:	60 ff       	sbrs	r22, 0
    1744:	1b c0       	rjmp	.+54     	; 0x177c <__floatsisf+0x6c>
    1746:	6f 5f       	subi	r22, 0xFF	; 255
    1748:	7f 4f       	sbci	r23, 0xFF	; 255
    174a:	8f 4f       	sbci	r24, 0xFF	; 255
    174c:	9f 4f       	sbci	r25, 0xFF	; 255
    174e:	16 c0       	rjmp	.+44     	; 0x177c <__floatsisf+0x6c>
    1750:	88 23       	and	r24, r24
    1752:	11 f0       	breq	.+4      	; 0x1758 <__floatsisf+0x48>
    1754:	96 e9       	ldi	r25, 0x96	; 150
    1756:	11 c0       	rjmp	.+34     	; 0x177a <__floatsisf+0x6a>
    1758:	77 23       	and	r23, r23
    175a:	21 f0       	breq	.+8      	; 0x1764 <__floatsisf+0x54>
    175c:	9e e8       	ldi	r25, 0x8E	; 142
    175e:	87 2f       	mov	r24, r23
    1760:	76 2f       	mov	r23, r22
    1762:	05 c0       	rjmp	.+10     	; 0x176e <__floatsisf+0x5e>
    1764:	66 23       	and	r22, r22
    1766:	71 f0       	breq	.+28     	; 0x1784 <__floatsisf+0x74>
    1768:	96 e8       	ldi	r25, 0x86	; 134
    176a:	86 2f       	mov	r24, r22
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	2a f0       	brmi	.+10     	; 0x177c <__floatsisf+0x6c>
    1772:	9a 95       	dec	r25
    1774:	66 0f       	add	r22, r22
    1776:	77 1f       	adc	r23, r23
    1778:	88 1f       	adc	r24, r24
    177a:	da f7       	brpl	.-10     	; 0x1772 <__floatsisf+0x62>
    177c:	88 0f       	add	r24, r24
    177e:	96 95       	lsr	r25
    1780:	87 95       	ror	r24
    1782:	97 f9       	bld	r25, 7
    1784:	08 95       	ret

00001786 <__fp_inf>:
    1786:	97 f9       	bld	r25, 7
    1788:	9f 67       	ori	r25, 0x7F	; 127
    178a:	80 e8       	ldi	r24, 0x80	; 128
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	08 95       	ret

00001792 <__fp_nan>:
    1792:	9f ef       	ldi	r25, 0xFF	; 255
    1794:	80 ec       	ldi	r24, 0xC0	; 192
    1796:	08 95       	ret

00001798 <__fp_pscA>:
    1798:	00 24       	eor	r0, r0
    179a:	0a 94       	dec	r0
    179c:	16 16       	cp	r1, r22
    179e:	17 06       	cpc	r1, r23
    17a0:	18 06       	cpc	r1, r24
    17a2:	09 06       	cpc	r0, r25
    17a4:	08 95       	ret

000017a6 <__fp_pscB>:
    17a6:	00 24       	eor	r0, r0
    17a8:	0a 94       	dec	r0
    17aa:	12 16       	cp	r1, r18
    17ac:	13 06       	cpc	r1, r19
    17ae:	14 06       	cpc	r1, r20
    17b0:	05 06       	cpc	r0, r21
    17b2:	08 95       	ret

000017b4 <__fp_round>:
    17b4:	09 2e       	mov	r0, r25
    17b6:	03 94       	inc	r0
    17b8:	00 0c       	add	r0, r0
    17ba:	11 f4       	brne	.+4      	; 0x17c0 <__fp_round+0xc>
    17bc:	88 23       	and	r24, r24
    17be:	52 f0       	brmi	.+20     	; 0x17d4 <__fp_round+0x20>
    17c0:	bb 0f       	add	r27, r27
    17c2:	40 f4       	brcc	.+16     	; 0x17d4 <__fp_round+0x20>
    17c4:	bf 2b       	or	r27, r31
    17c6:	11 f4       	brne	.+4      	; 0x17cc <__fp_round+0x18>
    17c8:	60 ff       	sbrs	r22, 0
    17ca:	04 c0       	rjmp	.+8      	; 0x17d4 <__fp_round+0x20>
    17cc:	6f 5f       	subi	r22, 0xFF	; 255
    17ce:	7f 4f       	sbci	r23, 0xFF	; 255
    17d0:	8f 4f       	sbci	r24, 0xFF	; 255
    17d2:	9f 4f       	sbci	r25, 0xFF	; 255
    17d4:	08 95       	ret

000017d6 <__fp_split3>:
    17d6:	57 fd       	sbrc	r21, 7
    17d8:	90 58       	subi	r25, 0x80	; 128
    17da:	44 0f       	add	r20, r20
    17dc:	55 1f       	adc	r21, r21
    17de:	59 f0       	breq	.+22     	; 0x17f6 <__fp_splitA+0x10>
    17e0:	5f 3f       	cpi	r21, 0xFF	; 255
    17e2:	71 f0       	breq	.+28     	; 0x1800 <__fp_splitA+0x1a>
    17e4:	47 95       	ror	r20

000017e6 <__fp_splitA>:
    17e6:	88 0f       	add	r24, r24
    17e8:	97 fb       	bst	r25, 7
    17ea:	99 1f       	adc	r25, r25
    17ec:	61 f0       	breq	.+24     	; 0x1806 <__fp_splitA+0x20>
    17ee:	9f 3f       	cpi	r25, 0xFF	; 255
    17f0:	79 f0       	breq	.+30     	; 0x1810 <__fp_splitA+0x2a>
    17f2:	87 95       	ror	r24
    17f4:	08 95       	ret
    17f6:	12 16       	cp	r1, r18
    17f8:	13 06       	cpc	r1, r19
    17fa:	14 06       	cpc	r1, r20
    17fc:	55 1f       	adc	r21, r21
    17fe:	f2 cf       	rjmp	.-28     	; 0x17e4 <__fp_split3+0xe>
    1800:	46 95       	lsr	r20
    1802:	f1 df       	rcall	.-30     	; 0x17e6 <__fp_splitA>
    1804:	08 c0       	rjmp	.+16     	; 0x1816 <__fp_splitA+0x30>
    1806:	16 16       	cp	r1, r22
    1808:	17 06       	cpc	r1, r23
    180a:	18 06       	cpc	r1, r24
    180c:	99 1f       	adc	r25, r25
    180e:	f1 cf       	rjmp	.-30     	; 0x17f2 <__fp_splitA+0xc>
    1810:	86 95       	lsr	r24
    1812:	71 05       	cpc	r23, r1
    1814:	61 05       	cpc	r22, r1
    1816:	08 94       	sec
    1818:	08 95       	ret

0000181a <__fp_zero>:
    181a:	e8 94       	clt

0000181c <__fp_szero>:
    181c:	bb 27       	eor	r27, r27
    181e:	66 27       	eor	r22, r22
    1820:	77 27       	eor	r23, r23
    1822:	cb 01       	movw	r24, r22
    1824:	97 f9       	bld	r25, 7
    1826:	08 95       	ret

00001828 <__gesf2>:
    1828:	03 d0       	rcall	.+6      	; 0x1830 <__fp_cmp>
    182a:	08 f4       	brcc	.+2      	; 0x182e <__gesf2+0x6>
    182c:	8f ef       	ldi	r24, 0xFF	; 255
    182e:	08 95       	ret

00001830 <__fp_cmp>:
    1830:	99 0f       	add	r25, r25
    1832:	00 08       	sbc	r0, r0
    1834:	55 0f       	add	r21, r21
    1836:	aa 0b       	sbc	r26, r26
    1838:	e0 e8       	ldi	r30, 0x80	; 128
    183a:	fe ef       	ldi	r31, 0xFE	; 254
    183c:	16 16       	cp	r1, r22
    183e:	17 06       	cpc	r1, r23
    1840:	e8 07       	cpc	r30, r24
    1842:	f9 07       	cpc	r31, r25
    1844:	c0 f0       	brcs	.+48     	; 0x1876 <__fp_cmp+0x46>
    1846:	12 16       	cp	r1, r18
    1848:	13 06       	cpc	r1, r19
    184a:	e4 07       	cpc	r30, r20
    184c:	f5 07       	cpc	r31, r21
    184e:	98 f0       	brcs	.+38     	; 0x1876 <__fp_cmp+0x46>
    1850:	62 1b       	sub	r22, r18
    1852:	73 0b       	sbc	r23, r19
    1854:	84 0b       	sbc	r24, r20
    1856:	95 0b       	sbc	r25, r21
    1858:	39 f4       	brne	.+14     	; 0x1868 <__fp_cmp+0x38>
    185a:	0a 26       	eor	r0, r26
    185c:	61 f0       	breq	.+24     	; 0x1876 <__fp_cmp+0x46>
    185e:	23 2b       	or	r18, r19
    1860:	24 2b       	or	r18, r20
    1862:	25 2b       	or	r18, r21
    1864:	21 f4       	brne	.+8      	; 0x186e <__fp_cmp+0x3e>
    1866:	08 95       	ret
    1868:	0a 26       	eor	r0, r26
    186a:	09 f4       	brne	.+2      	; 0x186e <__fp_cmp+0x3e>
    186c:	a1 40       	sbci	r26, 0x01	; 1
    186e:	a6 95       	lsr	r26
    1870:	8f ef       	ldi	r24, 0xFF	; 255
    1872:	81 1d       	adc	r24, r1
    1874:	81 1d       	adc	r24, r1
    1876:	08 95       	ret

00001878 <__divmodsi4>:
    1878:	05 2e       	mov	r0, r21
    187a:	97 fb       	bst	r25, 7
    187c:	1e f4       	brtc	.+6      	; 0x1884 <__divmodsi4+0xc>
    187e:	00 94       	com	r0
    1880:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__negsi2>
    1884:	57 fd       	sbrc	r21, 7
    1886:	07 d0       	rcall	.+14     	; 0x1896 <__divmodsi4_neg2>
    1888:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__udivmodsi4>
    188c:	07 fc       	sbrc	r0, 7
    188e:	03 d0       	rcall	.+6      	; 0x1896 <__divmodsi4_neg2>
    1890:	4e f4       	brtc	.+18     	; 0x18a4 <__divmodsi4_exit>
    1892:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__negsi2>

00001896 <__divmodsi4_neg2>:
    1896:	50 95       	com	r21
    1898:	40 95       	com	r20
    189a:	30 95       	com	r19
    189c:	21 95       	neg	r18
    189e:	3f 4f       	sbci	r19, 0xFF	; 255
    18a0:	4f 4f       	sbci	r20, 0xFF	; 255
    18a2:	5f 4f       	sbci	r21, 0xFF	; 255

000018a4 <__divmodsi4_exit>:
    18a4:	08 95       	ret

000018a6 <__negsi2>:
    18a6:	90 95       	com	r25
    18a8:	80 95       	com	r24
    18aa:	70 95       	com	r23
    18ac:	61 95       	neg	r22
    18ae:	7f 4f       	sbci	r23, 0xFF	; 255
    18b0:	8f 4f       	sbci	r24, 0xFF	; 255
    18b2:	9f 4f       	sbci	r25, 0xFF	; 255
    18b4:	08 95       	ret

000018b6 <__udivmodsi4>:
    18b6:	a1 e2       	ldi	r26, 0x21	; 33
    18b8:	1a 2e       	mov	r1, r26
    18ba:	aa 1b       	sub	r26, r26
    18bc:	bb 1b       	sub	r27, r27
    18be:	fd 01       	movw	r30, r26
    18c0:	0d c0       	rjmp	.+26     	; 0x18dc <__udivmodsi4_ep>

000018c2 <__udivmodsi4_loop>:
    18c2:	aa 1f       	adc	r26, r26
    18c4:	bb 1f       	adc	r27, r27
    18c6:	ee 1f       	adc	r30, r30
    18c8:	ff 1f       	adc	r31, r31
    18ca:	a2 17       	cp	r26, r18
    18cc:	b3 07       	cpc	r27, r19
    18ce:	e4 07       	cpc	r30, r20
    18d0:	f5 07       	cpc	r31, r21
    18d2:	20 f0       	brcs	.+8      	; 0x18dc <__udivmodsi4_ep>
    18d4:	a2 1b       	sub	r26, r18
    18d6:	b3 0b       	sbc	r27, r19
    18d8:	e4 0b       	sbc	r30, r20
    18da:	f5 0b       	sbc	r31, r21

000018dc <__udivmodsi4_ep>:
    18dc:	66 1f       	adc	r22, r22
    18de:	77 1f       	adc	r23, r23
    18e0:	88 1f       	adc	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	1a 94       	dec	r1
    18e6:	69 f7       	brne	.-38     	; 0x18c2 <__udivmodsi4_loop>
    18e8:	60 95       	com	r22
    18ea:	70 95       	com	r23
    18ec:	80 95       	com	r24
    18ee:	90 95       	com	r25
    18f0:	9b 01       	movw	r18, r22
    18f2:	ac 01       	movw	r20, r24
    18f4:	bd 01       	movw	r22, r26
    18f6:	cf 01       	movw	r24, r30
    18f8:	08 95       	ret

000018fa <malloc>:
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
    18fe:	82 30       	cpi	r24, 0x02	; 2
    1900:	91 05       	cpc	r25, r1
    1902:	10 f4       	brcc	.+4      	; 0x1908 <malloc+0xe>
    1904:	82 e0       	ldi	r24, 0x02	; 2
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	e0 91 4c 02 	lds	r30, 0x024C
    190c:	f0 91 4d 02 	lds	r31, 0x024D
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	a0 e0       	ldi	r26, 0x00	; 0
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	30 97       	sbiw	r30, 0x00	; 0
    191a:	39 f1       	breq	.+78     	; 0x196a <malloc+0x70>
    191c:	40 81       	ld	r20, Z
    191e:	51 81       	ldd	r21, Z+1	; 0x01
    1920:	48 17       	cp	r20, r24
    1922:	59 07       	cpc	r21, r25
    1924:	b8 f0       	brcs	.+46     	; 0x1954 <malloc+0x5a>
    1926:	48 17       	cp	r20, r24
    1928:	59 07       	cpc	r21, r25
    192a:	71 f4       	brne	.+28     	; 0x1948 <malloc+0x4e>
    192c:	82 81       	ldd	r24, Z+2	; 0x02
    192e:	93 81       	ldd	r25, Z+3	; 0x03
    1930:	10 97       	sbiw	r26, 0x00	; 0
    1932:	29 f0       	breq	.+10     	; 0x193e <malloc+0x44>
    1934:	13 96       	adiw	r26, 0x03	; 3
    1936:	9c 93       	st	X, r25
    1938:	8e 93       	st	-X, r24
    193a:	12 97       	sbiw	r26, 0x02	; 2
    193c:	2c c0       	rjmp	.+88     	; 0x1996 <malloc+0x9c>
    193e:	90 93 4d 02 	sts	0x024D, r25
    1942:	80 93 4c 02 	sts	0x024C, r24
    1946:	27 c0       	rjmp	.+78     	; 0x1996 <malloc+0x9c>
    1948:	21 15       	cp	r18, r1
    194a:	31 05       	cpc	r19, r1
    194c:	31 f0       	breq	.+12     	; 0x195a <malloc+0x60>
    194e:	42 17       	cp	r20, r18
    1950:	53 07       	cpc	r21, r19
    1952:	18 f0       	brcs	.+6      	; 0x195a <malloc+0x60>
    1954:	a9 01       	movw	r20, r18
    1956:	db 01       	movw	r26, r22
    1958:	01 c0       	rjmp	.+2      	; 0x195c <malloc+0x62>
    195a:	ef 01       	movw	r28, r30
    195c:	9a 01       	movw	r18, r20
    195e:	bd 01       	movw	r22, r26
    1960:	df 01       	movw	r26, r30
    1962:	02 80       	ldd	r0, Z+2	; 0x02
    1964:	f3 81       	ldd	r31, Z+3	; 0x03
    1966:	e0 2d       	mov	r30, r0
    1968:	d7 cf       	rjmp	.-82     	; 0x1918 <malloc+0x1e>
    196a:	21 15       	cp	r18, r1
    196c:	31 05       	cpc	r19, r1
    196e:	f9 f0       	breq	.+62     	; 0x19ae <malloc+0xb4>
    1970:	28 1b       	sub	r18, r24
    1972:	39 0b       	sbc	r19, r25
    1974:	24 30       	cpi	r18, 0x04	; 4
    1976:	31 05       	cpc	r19, r1
    1978:	80 f4       	brcc	.+32     	; 0x199a <malloc+0xa0>
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	9b 81       	ldd	r25, Y+3	; 0x03
    197e:	61 15       	cp	r22, r1
    1980:	71 05       	cpc	r23, r1
    1982:	21 f0       	breq	.+8      	; 0x198c <malloc+0x92>
    1984:	fb 01       	movw	r30, r22
    1986:	93 83       	std	Z+3, r25	; 0x03
    1988:	82 83       	std	Z+2, r24	; 0x02
    198a:	04 c0       	rjmp	.+8      	; 0x1994 <malloc+0x9a>
    198c:	90 93 4d 02 	sts	0x024D, r25
    1990:	80 93 4c 02 	sts	0x024C, r24
    1994:	fe 01       	movw	r30, r28
    1996:	32 96       	adiw	r30, 0x02	; 2
    1998:	44 c0       	rjmp	.+136    	; 0x1a22 <malloc+0x128>
    199a:	fe 01       	movw	r30, r28
    199c:	e2 0f       	add	r30, r18
    199e:	f3 1f       	adc	r31, r19
    19a0:	81 93       	st	Z+, r24
    19a2:	91 93       	st	Z+, r25
    19a4:	22 50       	subi	r18, 0x02	; 2
    19a6:	31 09       	sbc	r19, r1
    19a8:	39 83       	std	Y+1, r19	; 0x01
    19aa:	28 83       	st	Y, r18
    19ac:	3a c0       	rjmp	.+116    	; 0x1a22 <malloc+0x128>
    19ae:	20 91 4a 02 	lds	r18, 0x024A
    19b2:	30 91 4b 02 	lds	r19, 0x024B
    19b6:	23 2b       	or	r18, r19
    19b8:	41 f4       	brne	.+16     	; 0x19ca <malloc+0xd0>
    19ba:	20 91 02 01 	lds	r18, 0x0102
    19be:	30 91 03 01 	lds	r19, 0x0103
    19c2:	30 93 4b 02 	sts	0x024B, r19
    19c6:	20 93 4a 02 	sts	0x024A, r18
    19ca:	20 91 00 01 	lds	r18, 0x0100
    19ce:	30 91 01 01 	lds	r19, 0x0101
    19d2:	21 15       	cp	r18, r1
    19d4:	31 05       	cpc	r19, r1
    19d6:	41 f4       	brne	.+16     	; 0x19e8 <malloc+0xee>
    19d8:	2d b7       	in	r18, 0x3d	; 61
    19da:	3e b7       	in	r19, 0x3e	; 62
    19dc:	40 91 04 01 	lds	r20, 0x0104
    19e0:	50 91 05 01 	lds	r21, 0x0105
    19e4:	24 1b       	sub	r18, r20
    19e6:	35 0b       	sbc	r19, r21
    19e8:	e0 91 4a 02 	lds	r30, 0x024A
    19ec:	f0 91 4b 02 	lds	r31, 0x024B
    19f0:	e2 17       	cp	r30, r18
    19f2:	f3 07       	cpc	r31, r19
    19f4:	a0 f4       	brcc	.+40     	; 0x1a1e <malloc+0x124>
    19f6:	2e 1b       	sub	r18, r30
    19f8:	3f 0b       	sbc	r19, r31
    19fa:	28 17       	cp	r18, r24
    19fc:	39 07       	cpc	r19, r25
    19fe:	78 f0       	brcs	.+30     	; 0x1a1e <malloc+0x124>
    1a00:	ac 01       	movw	r20, r24
    1a02:	4e 5f       	subi	r20, 0xFE	; 254
    1a04:	5f 4f       	sbci	r21, 0xFF	; 255
    1a06:	24 17       	cp	r18, r20
    1a08:	35 07       	cpc	r19, r21
    1a0a:	48 f0       	brcs	.+18     	; 0x1a1e <malloc+0x124>
    1a0c:	4e 0f       	add	r20, r30
    1a0e:	5f 1f       	adc	r21, r31
    1a10:	50 93 4b 02 	sts	0x024B, r21
    1a14:	40 93 4a 02 	sts	0x024A, r20
    1a18:	81 93       	st	Z+, r24
    1a1a:	91 93       	st	Z+, r25
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <malloc+0x128>
    1a1e:	e0 e0       	ldi	r30, 0x00	; 0
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	cf 01       	movw	r24, r30
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	08 95       	ret

00001a2a <free>:
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <free+0xa>
    1a32:	87 c0       	rjmp	.+270    	; 0x1b42 <free+0x118>
    1a34:	fc 01       	movw	r30, r24
    1a36:	32 97       	sbiw	r30, 0x02	; 2
    1a38:	13 82       	std	Z+3, r1	; 0x03
    1a3a:	12 82       	std	Z+2, r1	; 0x02
    1a3c:	c0 91 4c 02 	lds	r28, 0x024C
    1a40:	d0 91 4d 02 	lds	r29, 0x024D
    1a44:	20 97       	sbiw	r28, 0x00	; 0
    1a46:	81 f4       	brne	.+32     	; 0x1a68 <free+0x3e>
    1a48:	20 81       	ld	r18, Z
    1a4a:	31 81       	ldd	r19, Z+1	; 0x01
    1a4c:	28 0f       	add	r18, r24
    1a4e:	39 1f       	adc	r19, r25
    1a50:	80 91 4a 02 	lds	r24, 0x024A
    1a54:	90 91 4b 02 	lds	r25, 0x024B
    1a58:	82 17       	cp	r24, r18
    1a5a:	93 07       	cpc	r25, r19
    1a5c:	79 f5       	brne	.+94     	; 0x1abc <free+0x92>
    1a5e:	f0 93 4b 02 	sts	0x024B, r31
    1a62:	e0 93 4a 02 	sts	0x024A, r30
    1a66:	6d c0       	rjmp	.+218    	; 0x1b42 <free+0x118>
    1a68:	de 01       	movw	r26, r28
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	ae 17       	cp	r26, r30
    1a70:	bf 07       	cpc	r27, r31
    1a72:	50 f4       	brcc	.+20     	; 0x1a88 <free+0x5e>
    1a74:	12 96       	adiw	r26, 0x02	; 2
    1a76:	4d 91       	ld	r20, X+
    1a78:	5c 91       	ld	r21, X
    1a7a:	13 97       	sbiw	r26, 0x03	; 3
    1a7c:	9d 01       	movw	r18, r26
    1a7e:	41 15       	cp	r20, r1
    1a80:	51 05       	cpc	r21, r1
    1a82:	09 f1       	breq	.+66     	; 0x1ac6 <free+0x9c>
    1a84:	da 01       	movw	r26, r20
    1a86:	f3 cf       	rjmp	.-26     	; 0x1a6e <free+0x44>
    1a88:	b3 83       	std	Z+3, r27	; 0x03
    1a8a:	a2 83       	std	Z+2, r26	; 0x02
    1a8c:	40 81       	ld	r20, Z
    1a8e:	51 81       	ldd	r21, Z+1	; 0x01
    1a90:	84 0f       	add	r24, r20
    1a92:	95 1f       	adc	r25, r21
    1a94:	8a 17       	cp	r24, r26
    1a96:	9b 07       	cpc	r25, r27
    1a98:	71 f4       	brne	.+28     	; 0x1ab6 <free+0x8c>
    1a9a:	8d 91       	ld	r24, X+
    1a9c:	9c 91       	ld	r25, X
    1a9e:	11 97       	sbiw	r26, 0x01	; 1
    1aa0:	84 0f       	add	r24, r20
    1aa2:	95 1f       	adc	r25, r21
    1aa4:	02 96       	adiw	r24, 0x02	; 2
    1aa6:	91 83       	std	Z+1, r25	; 0x01
    1aa8:	80 83       	st	Z, r24
    1aaa:	12 96       	adiw	r26, 0x02	; 2
    1aac:	8d 91       	ld	r24, X+
    1aae:	9c 91       	ld	r25, X
    1ab0:	13 97       	sbiw	r26, 0x03	; 3
    1ab2:	93 83       	std	Z+3, r25	; 0x03
    1ab4:	82 83       	std	Z+2, r24	; 0x02
    1ab6:	21 15       	cp	r18, r1
    1ab8:	31 05       	cpc	r19, r1
    1aba:	29 f4       	brne	.+10     	; 0x1ac6 <free+0x9c>
    1abc:	f0 93 4d 02 	sts	0x024D, r31
    1ac0:	e0 93 4c 02 	sts	0x024C, r30
    1ac4:	3e c0       	rjmp	.+124    	; 0x1b42 <free+0x118>
    1ac6:	d9 01       	movw	r26, r18
    1ac8:	13 96       	adiw	r26, 0x03	; 3
    1aca:	fc 93       	st	X, r31
    1acc:	ee 93       	st	-X, r30
    1ace:	12 97       	sbiw	r26, 0x02	; 2
    1ad0:	4d 91       	ld	r20, X+
    1ad2:	5d 91       	ld	r21, X+
    1ad4:	a4 0f       	add	r26, r20
    1ad6:	b5 1f       	adc	r27, r21
    1ad8:	ea 17       	cp	r30, r26
    1ada:	fb 07       	cpc	r31, r27
    1adc:	79 f4       	brne	.+30     	; 0x1afc <free+0xd2>
    1ade:	80 81       	ld	r24, Z
    1ae0:	91 81       	ldd	r25, Z+1	; 0x01
    1ae2:	84 0f       	add	r24, r20
    1ae4:	95 1f       	adc	r25, r21
    1ae6:	02 96       	adiw	r24, 0x02	; 2
    1ae8:	d9 01       	movw	r26, r18
    1aea:	11 96       	adiw	r26, 0x01	; 1
    1aec:	9c 93       	st	X, r25
    1aee:	8e 93       	st	-X, r24
    1af0:	82 81       	ldd	r24, Z+2	; 0x02
    1af2:	93 81       	ldd	r25, Z+3	; 0x03
    1af4:	13 96       	adiw	r26, 0x03	; 3
    1af6:	9c 93       	st	X, r25
    1af8:	8e 93       	st	-X, r24
    1afa:	12 97       	sbiw	r26, 0x02	; 2
    1afc:	e0 e0       	ldi	r30, 0x00	; 0
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	9b 81       	ldd	r25, Y+3	; 0x03
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	19 f0       	breq	.+6      	; 0x1b0e <free+0xe4>
    1b08:	fe 01       	movw	r30, r28
    1b0a:	ec 01       	movw	r28, r24
    1b0c:	f9 cf       	rjmp	.-14     	; 0x1b00 <free+0xd6>
    1b0e:	ce 01       	movw	r24, r28
    1b10:	02 96       	adiw	r24, 0x02	; 2
    1b12:	28 81       	ld	r18, Y
    1b14:	39 81       	ldd	r19, Y+1	; 0x01
    1b16:	82 0f       	add	r24, r18
    1b18:	93 1f       	adc	r25, r19
    1b1a:	20 91 4a 02 	lds	r18, 0x024A
    1b1e:	30 91 4b 02 	lds	r19, 0x024B
    1b22:	28 17       	cp	r18, r24
    1b24:	39 07       	cpc	r19, r25
    1b26:	69 f4       	brne	.+26     	; 0x1b42 <free+0x118>
    1b28:	30 97       	sbiw	r30, 0x00	; 0
    1b2a:	29 f4       	brne	.+10     	; 0x1b36 <free+0x10c>
    1b2c:	10 92 4d 02 	sts	0x024D, r1
    1b30:	10 92 4c 02 	sts	0x024C, r1
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <free+0x110>
    1b36:	13 82       	std	Z+3, r1	; 0x03
    1b38:	12 82       	std	Z+2, r1	; 0x02
    1b3a:	d0 93 4b 02 	sts	0x024B, r29
    1b3e:	c0 93 4a 02 	sts	0x024A, r28
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	08 95       	ret

00001b48 <fdevopen>:
    1b48:	0f 93       	push	r16
    1b4a:	1f 93       	push	r17
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	ec 01       	movw	r28, r24
    1b52:	8b 01       	movw	r16, r22
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	31 f4       	brne	.+12     	; 0x1b64 <fdevopen+0x1c>
    1b58:	61 15       	cp	r22, r1
    1b5a:	71 05       	cpc	r23, r1
    1b5c:	19 f4       	brne	.+6      	; 0x1b64 <fdevopen+0x1c>
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	38 c0       	rjmp	.+112    	; 0x1bd4 <fdevopen+0x8c>
    1b64:	6e e0       	ldi	r22, 0x0E	; 14
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <calloc>
    1b70:	fc 01       	movw	r30, r24
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	a1 f3       	breq	.-24     	; 0x1b5e <fdevopen+0x16>
    1b76:	80 e8       	ldi	r24, 0x80	; 128
    1b78:	83 83       	std	Z+3, r24	; 0x03
    1b7a:	01 15       	cp	r16, r1
    1b7c:	11 05       	cpc	r17, r1
    1b7e:	71 f0       	breq	.+28     	; 0x1b9c <fdevopen+0x54>
    1b80:	13 87       	std	Z+11, r17	; 0x0b
    1b82:	02 87       	std	Z+10, r16	; 0x0a
    1b84:	81 e8       	ldi	r24, 0x81	; 129
    1b86:	83 83       	std	Z+3, r24	; 0x03
    1b88:	80 91 4e 02 	lds	r24, 0x024E
    1b8c:	90 91 4f 02 	lds	r25, 0x024F
    1b90:	89 2b       	or	r24, r25
    1b92:	21 f4       	brne	.+8      	; 0x1b9c <fdevopen+0x54>
    1b94:	f0 93 4f 02 	sts	0x024F, r31
    1b98:	e0 93 4e 02 	sts	0x024E, r30
    1b9c:	20 97       	sbiw	r28, 0x00	; 0
    1b9e:	c9 f0       	breq	.+50     	; 0x1bd2 <fdevopen+0x8a>
    1ba0:	d1 87       	std	Z+9, r29	; 0x09
    1ba2:	c0 87       	std	Z+8, r28	; 0x08
    1ba4:	83 81       	ldd	r24, Z+3	; 0x03
    1ba6:	82 60       	ori	r24, 0x02	; 2
    1ba8:	83 83       	std	Z+3, r24	; 0x03
    1baa:	80 91 50 02 	lds	r24, 0x0250
    1bae:	90 91 51 02 	lds	r25, 0x0251
    1bb2:	89 2b       	or	r24, r25
    1bb4:	71 f4       	brne	.+28     	; 0x1bd2 <fdevopen+0x8a>
    1bb6:	f0 93 51 02 	sts	0x0251, r31
    1bba:	e0 93 50 02 	sts	0x0250, r30
    1bbe:	80 91 52 02 	lds	r24, 0x0252
    1bc2:	90 91 53 02 	lds	r25, 0x0253
    1bc6:	89 2b       	or	r24, r25
    1bc8:	21 f4       	brne	.+8      	; 0x1bd2 <fdevopen+0x8a>
    1bca:	f0 93 53 02 	sts	0x0253, r31
    1bce:	e0 93 52 02 	sts	0x0252, r30
    1bd2:	cf 01       	movw	r24, r30
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	1f 91       	pop	r17
    1bda:	0f 91       	pop	r16
    1bdc:	08 95       	ret

00001bde <calloc>:
    1bde:	0f 93       	push	r16
    1be0:	1f 93       	push	r17
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	86 9f       	mul	r24, r22
    1be8:	80 01       	movw	r16, r0
    1bea:	87 9f       	mul	r24, r23
    1bec:	10 0d       	add	r17, r0
    1bee:	96 9f       	mul	r25, r22
    1bf0:	10 0d       	add	r17, r0
    1bf2:	11 24       	eor	r1, r1
    1bf4:	c8 01       	movw	r24, r16
    1bf6:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <malloc>
    1bfa:	ec 01       	movw	r28, r24
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	29 f0       	breq	.+10     	; 0x1c0a <calloc+0x2c>
    1c00:	a8 01       	movw	r20, r16
    1c02:	60 e0       	ldi	r22, 0x00	; 0
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <memset>
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	1f 91       	pop	r17
    1c12:	0f 91       	pop	r16
    1c14:	08 95       	ret

00001c16 <memset>:
    1c16:	dc 01       	movw	r26, r24
    1c18:	01 c0       	rjmp	.+2      	; 0x1c1c <memset+0x6>
    1c1a:	6d 93       	st	X+, r22
    1c1c:	41 50       	subi	r20, 0x01	; 1
    1c1e:	50 40       	sbci	r21, 0x00	; 0
    1c20:	e0 f7       	brcc	.-8      	; 0x1c1a <memset+0x4>
    1c22:	08 95       	ret

00001c24 <_exit>:
    1c24:	f8 94       	cli

00001c26 <__stop_program>:
    1c26:	ff cf       	rjmp	.-2      	; 0x1c26 <__stop_program>
