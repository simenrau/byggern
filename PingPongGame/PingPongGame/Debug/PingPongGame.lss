
PingPongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000004be  00000552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800106  00800106  00000558  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b8e  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000041d  00000000  00000000  000011be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c3  00000000  00000000  000015db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  000019a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f5  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000238  00000000  00000000  00001df5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee eb       	ldi	r30, 0xBE	; 190
  84:	f4 e0       	ldi	r31, 0x04	; 4
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 30       	cpi	r26, 0x06	; 6
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 e0       	ldi	r26, 0x06	; 6
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 31       	cpi	r26, 0x12	; 18
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:
		}
		if (y_volt < 122)
		{
			printf("DOWN\n");
		}
		if (x_volt > 132)
  ae:	8f e1       	ldi	r24, 0x1F	; 31
  b0:	90 e0       	ldi	r25, 0x00	; 0
		{
			printf("RIGHT\n");
  b2:	0e 94 b9 00 	call	0x172	; 0x172 <USART_Init>
  b6:	0e 94 76 00 	call	0xec	; 0xec <init_program>
		}
		if (x_volt < 124)
  ba:	0e 94 a4 00 	call	0x148	; 0x148 <oled_set_column>
  be:	0e 94 aa 00 	call	0x154	; 0x154 <oled_set_page>
		
		{
			printf("LEFT\n");
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0e 94 6e 00 	call	0xdc	; 0xdc <write_c>
		}
		
		
		printf("\n\n\n");
  c8:	80 e1       	ldi	r24, 0x10	; 16
  ca:	0e 94 6e 00 	call	0xdc	; 0xdc <write_c>
  ce:	80 eb       	ldi	r24, 0xB0	; 176
		
		
    }
  d0:	0e 94 6e 00 	call	0xdc	; 0xdc <write_c>
		
	write_c(0x00);
	write_c(0x10);
	write_c(0xB0);
	
	write_d(0xF);
  d4:	8f e0       	ldi	r24, 0x0F	; 15
  d6:	0e 94 72 00 	call	0xe4	; 0xe4 <write_d>
  da:	f3 cf       	rjmp	.-26     	; 0xc2 <main+0x14>

000000dc <write_c>:
#include "define.h"

uint8_t write_c(unsigned char out_com)
{
	volatile char *OLEDc = (char*)OLED_COMMAND_MEMORY_START;
	*OLEDc = out_com;
  dc:	80 93 00 10 	sts	0x1000, r24
	return 0;
}
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	08 95       	ret

000000e4 <write_d>:

uint8_t write_d(unsigned char out_com)
{
	volatile char *OLEDd = (char*)OLED_DATA_MEMORY_START;
	*OLEDd = out_com;
  e4:	80 93 00 12 	sts	0x1200, r24
	return 0;
}
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	08 95       	ret

000000ec <init_program>:
#include "define.h"

uint8_t write_c(unsigned char out_com)
{
	volatile char *OLEDc = (char*)OLED_COMMAND_MEMORY_START;
	*OLEDc = out_com;
  ec:	e0 e0       	ldi	r30, 0x00	; 0
  ee:	f0 e1       	ldi	r31, 0x10	; 16
  f0:	8e ea       	ldi	r24, 0xAE	; 174
  f2:	80 83       	st	Z, r24
  f4:	81 ea       	ldi	r24, 0xA1	; 161
  f6:	80 83       	st	Z, r24
  f8:	8a ed       	ldi	r24, 0xDA	; 218
  fa:	80 83       	st	Z, r24
  fc:	82 e1       	ldi	r24, 0x12	; 18
  fe:	80 83       	st	Z, r24
 100:	88 ec       	ldi	r24, 0xC8	; 200
 102:	80 83       	st	Z, r24
 104:	88 ea       	ldi	r24, 0xA8	; 168
 106:	80 83       	st	Z, r24
 108:	8f e3       	ldi	r24, 0x3F	; 63
 10a:	80 83       	st	Z, r24
 10c:	85 ed       	ldi	r24, 0xD5	; 213
 10e:	80 83       	st	Z, r24
 110:	80 e8       	ldi	r24, 0x80	; 128
 112:	80 83       	st	Z, r24
 114:	81 e8       	ldi	r24, 0x81	; 129
 116:	80 83       	st	Z, r24
 118:	80 e5       	ldi	r24, 0x50	; 80
 11a:	80 83       	st	Z, r24
 11c:	89 ed       	ldi	r24, 0xD9	; 217
 11e:	80 83       	st	Z, r24
 120:	81 e2       	ldi	r24, 0x21	; 33
 122:	80 83       	st	Z, r24
 124:	80 e2       	ldi	r24, 0x20	; 32
 126:	80 83       	st	Z, r24
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	80 83       	st	Z, r24
 12c:	8d eb       	ldi	r24, 0xBD	; 189
 12e:	80 83       	st	Z, r24
 130:	80 e3       	ldi	r24, 0x30	; 48
 132:	80 83       	st	Z, r24
 134:	8d ea       	ldi	r24, 0xAD	; 173
 136:	80 83       	st	Z, r24
 138:	10 82       	st	Z, r1
 13a:	84 ea       	ldi	r24, 0xA4	; 164
 13c:	80 83       	st	Z, r24
 13e:	86 ea       	ldi	r24, 0xA6	; 166
 140:	80 83       	st	Z, r24
 142:	8f ea       	ldi	r24, 0xAF	; 175
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <oled_set_column>:
 148:	e0 e0       	ldi	r30, 0x00	; 0
 14a:	f0 e1       	ldi	r31, 0x10	; 16
 14c:	10 82       	st	Z, r1
 14e:	8f e1       	ldi	r24, 0x1F	; 31
 150:	80 83       	st	Z, r24
 152:	08 95       	ret

00000154 <oled_set_page>:
 154:	e0 e0       	ldi	r30, 0x00	; 0
 156:	f0 e1       	ldi	r31, 0x10	; 16
 158:	80 eb       	ldi	r24, 0xB0	; 176
 15a:	80 83       	st	Z, r24
 15c:	8f eb       	ldi	r24, 0xBF	; 191
 15e:	80 83       	st	Z, r24
 160:	08 95       	ret

00000162 <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !(UCSR0A & (1 << UDRE0)) );
 162:	5d 9b       	sbis	0x0b, 5	; 11
 164:	fe cf       	rjmp	.-4      	; 0x162 <USART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
 166:	8c b9       	out	0x0c, r24	; 12
 168:	08 95       	ret

0000016a <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1 << RXC0)) );
 16a:	5f 9b       	sbis	0x0b, 7	; 11
 16c:	fe cf       	rjmp	.-4      	; 0x16a <USART_Receive>
	
	/* Get and return received data from buffer */
	return UDR0;
 16e:	8c b1       	in	r24, 0x0c	; 12
}
 170:	08 95       	ret

00000172 <USART_Init>:

FILE *uart;

void USART_Init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr >> 8);
 172:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 174:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 176:	88 e1       	ldi	r24, 0x18	; 24
 178:	8a b9       	out	0x0a, r24	; 10
	
	uart = fdevopen(&USART_Transmit, &USART_Receive);
 17a:	65 eb       	ldi	r22, 0xB5	; 181
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	81 eb       	ldi	r24, 0xB1	; 177
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 c8 00 	call	0x190	; 0x190 <fdevopen>
 186:	90 93 07 01 	sts	0x0107, r25
 18a:	80 93 06 01 	sts	0x0106, r24
 18e:	08 95       	ret

00000190 <fdevopen>:
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	ec 01       	movw	r28, r24
 19a:	8b 01       	movw	r16, r22
 19c:	00 97       	sbiw	r24, 0x00	; 0
 19e:	31 f4       	brne	.+12     	; 0x1ac <fdevopen+0x1c>
 1a0:	61 15       	cp	r22, r1
 1a2:	71 05       	cpc	r23, r1
 1a4:	19 f4       	brne	.+6      	; 0x1ac <fdevopen+0x1c>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	38 c0       	rjmp	.+112    	; 0x21c <fdevopen+0x8c>
 1ac:	6e e0       	ldi	r22, 0x0E	; 14
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 13 01 	call	0x226	; 0x226 <calloc>
 1b8:	fc 01       	movw	r30, r24
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	a1 f3       	breq	.-24     	; 0x1a6 <fdevopen+0x16>
 1be:	80 e8       	ldi	r24, 0x80	; 128
 1c0:	83 83       	std	Z+3, r24	; 0x03
 1c2:	01 15       	cp	r16, r1
 1c4:	11 05       	cpc	r17, r1
 1c6:	71 f0       	breq	.+28     	; 0x1e4 <fdevopen+0x54>
 1c8:	13 87       	std	Z+11, r17	; 0x0b
 1ca:	02 87       	std	Z+10, r16	; 0x0a
 1cc:	81 e8       	ldi	r24, 0x81	; 129
 1ce:	83 83       	std	Z+3, r24	; 0x03
 1d0:	80 91 08 01 	lds	r24, 0x0108
 1d4:	90 91 09 01 	lds	r25, 0x0109
 1d8:	89 2b       	or	r24, r25
 1da:	21 f4       	brne	.+8      	; 0x1e4 <fdevopen+0x54>
 1dc:	f0 93 09 01 	sts	0x0109, r31
 1e0:	e0 93 08 01 	sts	0x0108, r30
 1e4:	20 97       	sbiw	r28, 0x00	; 0
 1e6:	c9 f0       	breq	.+50     	; 0x21a <fdevopen+0x8a>
 1e8:	d1 87       	std	Z+9, r29	; 0x09
 1ea:	c0 87       	std	Z+8, r28	; 0x08
 1ec:	83 81       	ldd	r24, Z+3	; 0x03
 1ee:	82 60       	ori	r24, 0x02	; 2
 1f0:	83 83       	std	Z+3, r24	; 0x03
 1f2:	80 91 0a 01 	lds	r24, 0x010A
 1f6:	90 91 0b 01 	lds	r25, 0x010B
 1fa:	89 2b       	or	r24, r25
 1fc:	71 f4       	brne	.+28     	; 0x21a <fdevopen+0x8a>
 1fe:	f0 93 0b 01 	sts	0x010B, r31
 202:	e0 93 0a 01 	sts	0x010A, r30
 206:	80 91 0c 01 	lds	r24, 0x010C
 20a:	90 91 0d 01 	lds	r25, 0x010D
 20e:	89 2b       	or	r24, r25
 210:	21 f4       	brne	.+8      	; 0x21a <fdevopen+0x8a>
 212:	f0 93 0d 01 	sts	0x010D, r31
 216:	e0 93 0c 01 	sts	0x010C, r30
 21a:	cf 01       	movw	r24, r30
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	08 95       	ret

00000226 <calloc>:
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	86 9f       	mul	r24, r22
 230:	80 01       	movw	r16, r0
 232:	87 9f       	mul	r24, r23
 234:	10 0d       	add	r17, r0
 236:	96 9f       	mul	r25, r22
 238:	10 0d       	add	r17, r0
 23a:	11 24       	eor	r1, r1
 23c:	c8 01       	movw	r24, r16
 23e:	0e 94 2f 01 	call	0x25e	; 0x25e <malloc>
 242:	ec 01       	movw	r28, r24
 244:	00 97       	sbiw	r24, 0x00	; 0
 246:	29 f0       	breq	.+10     	; 0x252 <calloc+0x2c>
 248:	a8 01       	movw	r20, r16
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	0e 94 56 02 	call	0x4ac	; 0x4ac <memset>
 252:	ce 01       	movw	r24, r28
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	08 95       	ret

0000025e <malloc>:
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	82 30       	cpi	r24, 0x02	; 2
 264:	91 05       	cpc	r25, r1
 266:	10 f4       	brcc	.+4      	; 0x26c <malloc+0xe>
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	e0 91 10 01 	lds	r30, 0x0110
 270:	f0 91 11 01 	lds	r31, 0x0111
 274:	20 e0       	ldi	r18, 0x00	; 0
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	a0 e0       	ldi	r26, 0x00	; 0
 27a:	b0 e0       	ldi	r27, 0x00	; 0
 27c:	30 97       	sbiw	r30, 0x00	; 0
 27e:	39 f1       	breq	.+78     	; 0x2ce <malloc+0x70>
 280:	40 81       	ld	r20, Z
 282:	51 81       	ldd	r21, Z+1	; 0x01
 284:	48 17       	cp	r20, r24
 286:	59 07       	cpc	r21, r25
 288:	b8 f0       	brcs	.+46     	; 0x2b8 <malloc+0x5a>
 28a:	48 17       	cp	r20, r24
 28c:	59 07       	cpc	r21, r25
 28e:	71 f4       	brne	.+28     	; 0x2ac <malloc+0x4e>
 290:	82 81       	ldd	r24, Z+2	; 0x02
 292:	93 81       	ldd	r25, Z+3	; 0x03
 294:	10 97       	sbiw	r26, 0x00	; 0
 296:	29 f0       	breq	.+10     	; 0x2a2 <malloc+0x44>
 298:	13 96       	adiw	r26, 0x03	; 3
 29a:	9c 93       	st	X, r25
 29c:	8e 93       	st	-X, r24
 29e:	12 97       	sbiw	r26, 0x02	; 2
 2a0:	2c c0       	rjmp	.+88     	; 0x2fa <malloc+0x9c>
 2a2:	90 93 11 01 	sts	0x0111, r25
 2a6:	80 93 10 01 	sts	0x0110, r24
 2aa:	27 c0       	rjmp	.+78     	; 0x2fa <malloc+0x9c>
 2ac:	21 15       	cp	r18, r1
 2ae:	31 05       	cpc	r19, r1
 2b0:	31 f0       	breq	.+12     	; 0x2be <malloc+0x60>
 2b2:	42 17       	cp	r20, r18
 2b4:	53 07       	cpc	r21, r19
 2b6:	18 f0       	brcs	.+6      	; 0x2be <malloc+0x60>
 2b8:	a9 01       	movw	r20, r18
 2ba:	db 01       	movw	r26, r22
 2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <malloc+0x62>
 2be:	ef 01       	movw	r28, r30
 2c0:	9a 01       	movw	r18, r20
 2c2:	bd 01       	movw	r22, r26
 2c4:	df 01       	movw	r26, r30
 2c6:	02 80       	ldd	r0, Z+2	; 0x02
 2c8:	f3 81       	ldd	r31, Z+3	; 0x03
 2ca:	e0 2d       	mov	r30, r0
 2cc:	d7 cf       	rjmp	.-82     	; 0x27c <malloc+0x1e>
 2ce:	21 15       	cp	r18, r1
 2d0:	31 05       	cpc	r19, r1
 2d2:	f9 f0       	breq	.+62     	; 0x312 <malloc+0xb4>
 2d4:	28 1b       	sub	r18, r24
 2d6:	39 0b       	sbc	r19, r25
 2d8:	24 30       	cpi	r18, 0x04	; 4
 2da:	31 05       	cpc	r19, r1
 2dc:	80 f4       	brcc	.+32     	; 0x2fe <malloc+0xa0>
 2de:	8a 81       	ldd	r24, Y+2	; 0x02
 2e0:	9b 81       	ldd	r25, Y+3	; 0x03
 2e2:	61 15       	cp	r22, r1
 2e4:	71 05       	cpc	r23, r1
 2e6:	21 f0       	breq	.+8      	; 0x2f0 <malloc+0x92>
 2e8:	fb 01       	movw	r30, r22
 2ea:	93 83       	std	Z+3, r25	; 0x03
 2ec:	82 83       	std	Z+2, r24	; 0x02
 2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <malloc+0x9a>
 2f0:	90 93 11 01 	sts	0x0111, r25
 2f4:	80 93 10 01 	sts	0x0110, r24
 2f8:	fe 01       	movw	r30, r28
 2fa:	32 96       	adiw	r30, 0x02	; 2
 2fc:	44 c0       	rjmp	.+136    	; 0x386 <malloc+0x128>
 2fe:	fe 01       	movw	r30, r28
 300:	e2 0f       	add	r30, r18
 302:	f3 1f       	adc	r31, r19
 304:	81 93       	st	Z+, r24
 306:	91 93       	st	Z+, r25
 308:	22 50       	subi	r18, 0x02	; 2
 30a:	31 09       	sbc	r19, r1
 30c:	39 83       	std	Y+1, r19	; 0x01
 30e:	28 83       	st	Y, r18
 310:	3a c0       	rjmp	.+116    	; 0x386 <malloc+0x128>
 312:	20 91 0e 01 	lds	r18, 0x010E
 316:	30 91 0f 01 	lds	r19, 0x010F
 31a:	23 2b       	or	r18, r19
 31c:	41 f4       	brne	.+16     	; 0x32e <malloc+0xd0>
 31e:	20 91 02 01 	lds	r18, 0x0102
 322:	30 91 03 01 	lds	r19, 0x0103
 326:	30 93 0f 01 	sts	0x010F, r19
 32a:	20 93 0e 01 	sts	0x010E, r18
 32e:	20 91 00 01 	lds	r18, 0x0100
 332:	30 91 01 01 	lds	r19, 0x0101
 336:	21 15       	cp	r18, r1
 338:	31 05       	cpc	r19, r1
 33a:	41 f4       	brne	.+16     	; 0x34c <malloc+0xee>
 33c:	2d b7       	in	r18, 0x3d	; 61
 33e:	3e b7       	in	r19, 0x3e	; 62
 340:	40 91 04 01 	lds	r20, 0x0104
 344:	50 91 05 01 	lds	r21, 0x0105
 348:	24 1b       	sub	r18, r20
 34a:	35 0b       	sbc	r19, r21
 34c:	e0 91 0e 01 	lds	r30, 0x010E
 350:	f0 91 0f 01 	lds	r31, 0x010F
 354:	e2 17       	cp	r30, r18
 356:	f3 07       	cpc	r31, r19
 358:	a0 f4       	brcc	.+40     	; 0x382 <malloc+0x124>
 35a:	2e 1b       	sub	r18, r30
 35c:	3f 0b       	sbc	r19, r31
 35e:	28 17       	cp	r18, r24
 360:	39 07       	cpc	r19, r25
 362:	78 f0       	brcs	.+30     	; 0x382 <malloc+0x124>
 364:	ac 01       	movw	r20, r24
 366:	4e 5f       	subi	r20, 0xFE	; 254
 368:	5f 4f       	sbci	r21, 0xFF	; 255
 36a:	24 17       	cp	r18, r20
 36c:	35 07       	cpc	r19, r21
 36e:	48 f0       	brcs	.+18     	; 0x382 <malloc+0x124>
 370:	4e 0f       	add	r20, r30
 372:	5f 1f       	adc	r21, r31
 374:	50 93 0f 01 	sts	0x010F, r21
 378:	40 93 0e 01 	sts	0x010E, r20
 37c:	81 93       	st	Z+, r24
 37e:	91 93       	st	Z+, r25
 380:	02 c0       	rjmp	.+4      	; 0x386 <malloc+0x128>
 382:	e0 e0       	ldi	r30, 0x00	; 0
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	cf 01       	movw	r24, r30
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <free>:
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	00 97       	sbiw	r24, 0x00	; 0
 394:	09 f4       	brne	.+2      	; 0x398 <free+0xa>
 396:	87 c0       	rjmp	.+270    	; 0x4a6 <free+0x118>
 398:	fc 01       	movw	r30, r24
 39a:	32 97       	sbiw	r30, 0x02	; 2
 39c:	13 82       	std	Z+3, r1	; 0x03
 39e:	12 82       	std	Z+2, r1	; 0x02
 3a0:	c0 91 10 01 	lds	r28, 0x0110
 3a4:	d0 91 11 01 	lds	r29, 0x0111
 3a8:	20 97       	sbiw	r28, 0x00	; 0
 3aa:	81 f4       	brne	.+32     	; 0x3cc <free+0x3e>
 3ac:	20 81       	ld	r18, Z
 3ae:	31 81       	ldd	r19, Z+1	; 0x01
 3b0:	28 0f       	add	r18, r24
 3b2:	39 1f       	adc	r19, r25
 3b4:	80 91 0e 01 	lds	r24, 0x010E
 3b8:	90 91 0f 01 	lds	r25, 0x010F
 3bc:	82 17       	cp	r24, r18
 3be:	93 07       	cpc	r25, r19
 3c0:	79 f5       	brne	.+94     	; 0x420 <free+0x92>
 3c2:	f0 93 0f 01 	sts	0x010F, r31
 3c6:	e0 93 0e 01 	sts	0x010E, r30
 3ca:	6d c0       	rjmp	.+218    	; 0x4a6 <free+0x118>
 3cc:	de 01       	movw	r26, r28
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	ae 17       	cp	r26, r30
 3d4:	bf 07       	cpc	r27, r31
 3d6:	50 f4       	brcc	.+20     	; 0x3ec <free+0x5e>
 3d8:	12 96       	adiw	r26, 0x02	; 2
 3da:	4d 91       	ld	r20, X+
 3dc:	5c 91       	ld	r21, X
 3de:	13 97       	sbiw	r26, 0x03	; 3
 3e0:	9d 01       	movw	r18, r26
 3e2:	41 15       	cp	r20, r1
 3e4:	51 05       	cpc	r21, r1
 3e6:	09 f1       	breq	.+66     	; 0x42a <free+0x9c>
 3e8:	da 01       	movw	r26, r20
 3ea:	f3 cf       	rjmp	.-26     	; 0x3d2 <free+0x44>
 3ec:	b3 83       	std	Z+3, r27	; 0x03
 3ee:	a2 83       	std	Z+2, r26	; 0x02
 3f0:	40 81       	ld	r20, Z
 3f2:	51 81       	ldd	r21, Z+1	; 0x01
 3f4:	84 0f       	add	r24, r20
 3f6:	95 1f       	adc	r25, r21
 3f8:	8a 17       	cp	r24, r26
 3fa:	9b 07       	cpc	r25, r27
 3fc:	71 f4       	brne	.+28     	; 0x41a <free+0x8c>
 3fe:	8d 91       	ld	r24, X+
 400:	9c 91       	ld	r25, X
 402:	11 97       	sbiw	r26, 0x01	; 1
 404:	84 0f       	add	r24, r20
 406:	95 1f       	adc	r25, r21
 408:	02 96       	adiw	r24, 0x02	; 2
 40a:	91 83       	std	Z+1, r25	; 0x01
 40c:	80 83       	st	Z, r24
 40e:	12 96       	adiw	r26, 0x02	; 2
 410:	8d 91       	ld	r24, X+
 412:	9c 91       	ld	r25, X
 414:	13 97       	sbiw	r26, 0x03	; 3
 416:	93 83       	std	Z+3, r25	; 0x03
 418:	82 83       	std	Z+2, r24	; 0x02
 41a:	21 15       	cp	r18, r1
 41c:	31 05       	cpc	r19, r1
 41e:	29 f4       	brne	.+10     	; 0x42a <free+0x9c>
 420:	f0 93 11 01 	sts	0x0111, r31
 424:	e0 93 10 01 	sts	0x0110, r30
 428:	3e c0       	rjmp	.+124    	; 0x4a6 <free+0x118>
 42a:	d9 01       	movw	r26, r18
 42c:	13 96       	adiw	r26, 0x03	; 3
 42e:	fc 93       	st	X, r31
 430:	ee 93       	st	-X, r30
 432:	12 97       	sbiw	r26, 0x02	; 2
 434:	4d 91       	ld	r20, X+
 436:	5d 91       	ld	r21, X+
 438:	a4 0f       	add	r26, r20
 43a:	b5 1f       	adc	r27, r21
 43c:	ea 17       	cp	r30, r26
 43e:	fb 07       	cpc	r31, r27
 440:	79 f4       	brne	.+30     	; 0x460 <free+0xd2>
 442:	80 81       	ld	r24, Z
 444:	91 81       	ldd	r25, Z+1	; 0x01
 446:	84 0f       	add	r24, r20
 448:	95 1f       	adc	r25, r21
 44a:	02 96       	adiw	r24, 0x02	; 2
 44c:	d9 01       	movw	r26, r18
 44e:	11 96       	adiw	r26, 0x01	; 1
 450:	9c 93       	st	X, r25
 452:	8e 93       	st	-X, r24
 454:	82 81       	ldd	r24, Z+2	; 0x02
 456:	93 81       	ldd	r25, Z+3	; 0x03
 458:	13 96       	adiw	r26, 0x03	; 3
 45a:	9c 93       	st	X, r25
 45c:	8e 93       	st	-X, r24
 45e:	12 97       	sbiw	r26, 0x02	; 2
 460:	e0 e0       	ldi	r30, 0x00	; 0
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	8a 81       	ldd	r24, Y+2	; 0x02
 466:	9b 81       	ldd	r25, Y+3	; 0x03
 468:	00 97       	sbiw	r24, 0x00	; 0
 46a:	19 f0       	breq	.+6      	; 0x472 <free+0xe4>
 46c:	fe 01       	movw	r30, r28
 46e:	ec 01       	movw	r28, r24
 470:	f9 cf       	rjmp	.-14     	; 0x464 <free+0xd6>
 472:	ce 01       	movw	r24, r28
 474:	02 96       	adiw	r24, 0x02	; 2
 476:	28 81       	ld	r18, Y
 478:	39 81       	ldd	r19, Y+1	; 0x01
 47a:	82 0f       	add	r24, r18
 47c:	93 1f       	adc	r25, r19
 47e:	20 91 0e 01 	lds	r18, 0x010E
 482:	30 91 0f 01 	lds	r19, 0x010F
 486:	28 17       	cp	r18, r24
 488:	39 07       	cpc	r19, r25
 48a:	69 f4       	brne	.+26     	; 0x4a6 <free+0x118>
 48c:	30 97       	sbiw	r30, 0x00	; 0
 48e:	29 f4       	brne	.+10     	; 0x49a <free+0x10c>
 490:	10 92 11 01 	sts	0x0111, r1
 494:	10 92 10 01 	sts	0x0110, r1
 498:	02 c0       	rjmp	.+4      	; 0x49e <free+0x110>
 49a:	13 82       	std	Z+3, r1	; 0x03
 49c:	12 82       	std	Z+2, r1	; 0x02
 49e:	d0 93 0f 01 	sts	0x010F, r29
 4a2:	c0 93 0e 01 	sts	0x010E, r28
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <memset>:
 4ac:	dc 01       	movw	r26, r24
 4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <memset+0x6>
 4b0:	6d 93       	st	X+, r22
 4b2:	41 50       	subi	r20, 0x01	; 1
 4b4:	50 40       	sbci	r21, 0x00	; 0
 4b6:	e0 f7       	brcc	.-8      	; 0x4b0 <memset+0x4>
 4b8:	08 95       	ret

000004ba <_exit>:
 4ba:	f8 94       	cli

000004bc <__stop_program>:
 4bc:	ff cf       	rjmp	.-2      	; 0x4bc <__stop_program>
