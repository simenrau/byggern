
PingPongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800100  00000d2c  00000dc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008001c4  008001c4  00000e84  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015f9  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085d  00000000  00000000  00002649  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000085c  00000000  00000000  00002ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b4  00000000  00000000  00003704  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a6  00000000  00000000  00003ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cdd  00000000  00000000  00003f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  00004c3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec e2       	ldi	r30, 0x2C	; 44
  84:	fd e0       	ldi	r31, 0x0D	; 13
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 3c       	cpi	r26, 0xC4	; 196
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a4 ec       	ldi	r26, 0xC4	; 196
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 3d       	cpi	r26, 0xD0	; 208
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 aa 01 	call	0x354	; 0x354 <main>
  a6:	0c 94 94 06 	jmp	0xd28	; 0xd28 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:

void CAN_init(void)
{
		/*SPI_MasterInit();
		SPI_SlaveInit();*/
		MCP_reset();
  ae:	0e 94 b3 01 	call	0x366	; 0x366 <MCP_reset>


		MCP_write(MCP_CANCTRL, CONFIG);		
  b2:	60 e8       	ldi	r22, 0x80	; 128
  b4:	8f e0       	ldi	r24, 0x0F	; 15
  b6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MCP_write>

		/*MCP_write(MCP_CNF1, 0x20); // Write config 1
		MCP_write(MCP_CNF2, 0x92); // Write config 2
		MCP_write(MCP_CNF3, 0xC2); // Write config 3*/
		
		MCP_write(MCP_CANINTE, 0x03);	//
  ba:	63 e0       	ldi	r22, 0x03	; 3
  bc:	8b e2       	ldi	r24, 0x2B	; 43
  be:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MCP_write>
		MCP_write(MCP_CANINTF, 0x00);	//
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	8c e2       	ldi	r24, 0x2C	; 44
  c6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MCP_write>
		MCP_write(MCP_EFLG, 0x00);		//
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	8d e2       	ldi	r24, 0x2D	; 45
  ce:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MCP_write>
		
		MCP_write(0x0C, 0x00);			 // Disable all interrupts
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	8c e0       	ldi	r24, 0x0C	; 12
  d6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MCP_write>
		MCP_write(0x0D, 0x00);			// Clear TXRTSCTRL
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	8d e0       	ldi	r24, 0x0D	; 13
  de:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MCP_write>
		
		
		MCP_write(MCP_RXB0CTRL, 0x60);		// Receive buffer 0 control (turn mask/filters off, receive any message) 
  e2:	60 e6       	ldi	r22, 0x60	; 96
  e4:	80 e6       	ldi	r24, 0x60	; 96
  e6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MCP_write>
		MCP_write(MCP_RXB1CTRL, 0x60);		// Receive buffer 1 control (turn mask/filters off, receive any message)
  ea:	60 e6       	ldi	r22, 0x60	; 96
  ec:	80 e7       	ldi	r24, 0x70	; 112
  ee:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MCP_write>

		//MCP_write(MCP_CANCTRL, 0x44);		// Enable can controller
		MCP_bit_mod(MCP_CANCTRL,MODE_MASK,MODE_LOOPBACK);
  f2:	40 e4       	ldi	r20, 0x40	; 64
  f4:	60 ee       	ldi	r22, 0xE0	; 224
  f6:	8f e0       	ldi	r24, 0x0F	; 15
  f8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <MCP_bit_mod>
  fc:	08 95       	ret

000000fe <CAN_message_send>:

	
}

void CAN_message_send(msg can_tx)
{
  fe:	cf 92       	push	r12
 100:	df 92       	push	r13
 102:	ef 92       	push	r14
 104:	ff 92       	push	r15
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	2b 97       	sbiw	r28, 0x0b	; 11
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	f8 94       	cli
 118:	de bf       	out	0x3e, r29	; 62
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	cd bf       	out	0x3d, r28	; 61
 11e:	e9 82       	std	Y+1, r14	; 0x01
 120:	fa 82       	std	Y+2, r15	; 0x02
 122:	0b 83       	std	Y+3, r16	; 0x03
 124:	1c 83       	std	Y+4, r17	; 0x04
 126:	2d 83       	std	Y+5, r18	; 0x05
 128:	3e 83       	std	Y+6, r19	; 0x06
 12a:	4f 83       	std	Y+7, r20	; 0x07
 12c:	58 87       	std	Y+8, r21	; 0x08
 12e:	69 87       	std	Y+9, r22	; 0x09
 130:	7a 87       	std	Y+10, r23	; 0x0a
 132:	8b 87       	std	Y+11, r24	; 0x0b
	//MCP_write(MCP_TXB0CTRL, 0x03);				
	printf("\nCan ID sent: %02x \n", can_tx.id);
 134:	ff 92       	push	r15
 136:	ef 92       	push	r14
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	9f 93       	push	r25
 13e:	8f 93       	push	r24
 140:	0e 94 ae 03 	call	0x75c	; 0x75c <printf>

	MCP_write(MCP_TXB0SIDH, can_tx.id);
 144:	6e 2d       	mov	r22, r14
 146:	81 e3       	ldi	r24, 0x31	; 49
 148:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MCP_write>
	MCP_write(MCP_TXB0SIDH, can_tx.id);
 14c:	6e 2d       	mov	r22, r14
 14e:	81 e3       	ldi	r24, 0x31	; 49
 150:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MCP_write>

	//MCP_write(MCP_TXB0SIDL, can_tx.id);

	MCP_write(MCP_TXB0DLC, (can_tx.length));
 154:	60 2f       	mov	r22, r16
 156:	85 e3       	ldi	r24, 0x35	; 53
 158:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MCP_write>
	for(int i = 0; i < can_tx.length; i++)
 15c:	c0 2e       	mov	r12, r16
 15e:	d1 2c       	mov	r13, r1
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	1c 14       	cp	r1, r12
 16a:	1d 04       	cpc	r1, r13
 16c:	94 f4       	brge	.+36     	; 0x192 <CAN_message_send+0x94>
 16e:	7e 01       	movw	r14, r28
 170:	84 e0       	ldi	r24, 0x04	; 4
 172:	e8 0e       	add	r14, r24
 174:	f1 1c       	adc	r15, r1
 176:	00 e0       	ldi	r16, 0x00	; 0
 178:	10 e0       	ldi	r17, 0x00	; 0
	{
		MCP_write(MCP_TXB0D0 + i, can_tx.data[i]);
 17a:	f7 01       	movw	r30, r14
 17c:	61 91       	ld	r22, Z+
 17e:	7f 01       	movw	r14, r30
 180:	86 e3       	ldi	r24, 0x36	; 54
 182:	80 0f       	add	r24, r16
 184:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MCP_write>
	MCP_write(MCP_TXB0SIDH, can_tx.id);

	//MCP_write(MCP_TXB0SIDL, can_tx.id);

	MCP_write(MCP_TXB0DLC, (can_tx.length));
	for(int i = 0; i < can_tx.length; i++)
 188:	0f 5f       	subi	r16, 0xFF	; 255
 18a:	1f 4f       	sbci	r17, 0xFF	; 255
 18c:	0c 15       	cp	r16, r12
 18e:	1d 05       	cpc	r17, r13
 190:	a4 f3       	brlt	.-24     	; 0x17a <CAN_message_send+0x7c>
	{
		MCP_write(MCP_TXB0D0 + i, can_tx.data[i]);
	}
	MCP_rts(MCP_RTS_TX0);
 192:	81 e8       	ldi	r24, 0x81	; 129
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <MCP_rts>
}
 19a:	2b 96       	adiw	r28, 0x0b	; 11
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	cd bf       	out	0x3d, r28	; 61
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	df 90       	pop	r13
 1b4:	cf 90       	pop	r12
 1b6:	08 95       	ret

000001b8 <CAN_data_receive>:

void CAN_data_receive(msg *message)
{
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	7c 01       	movw	r14, r24
	//msg message;

	message->id = (MCP_read(MCP_RXB0SIDH));
 1c6:	81 e6       	ldi	r24, 0x61	; 97
 1c8:	0e 94 c2 01 	call	0x384	; 0x384 <MCP_read>
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	f7 01       	movw	r30, r14
 1d0:	91 83       	std	Z+1, r25	; 0x01
 1d2:	80 83       	st	Z, r24

	//message.id = MCP_read(MCP_RXB0SIDL);

	message->length = MCP_read(MCP_RXB0DLC);
 1d4:	85 e6       	ldi	r24, 0x65	; 101
 1d6:	0e 94 c2 01 	call	0x384	; 0x384 <MCP_read>
 1da:	f7 01       	movw	r30, r14
 1dc:	82 83       	std	Z+2, r24	; 0x02

	for(int i = 0; i < message->length; i++) 
 1de:	88 23       	and	r24, r24
 1e0:	99 f0       	breq	.+38     	; 0x208 <CAN_data_receive+0x50>
 1e2:	87 01       	movw	r16, r14
 1e4:	0d 5f       	subi	r16, 0xFD	; 253
 1e6:	1f 4f       	sbci	r17, 0xFF	; 255
 1e8:	c0 e0       	ldi	r28, 0x00	; 0
 1ea:	d0 e0       	ldi	r29, 0x00	; 0
	{
		message->data[i] = MCP_read(MCP_RXB0DM + i);
 1ec:	8c 2f       	mov	r24, r28
 1ee:	8a 59       	subi	r24, 0x9A	; 154
 1f0:	0e 94 c2 01 	call	0x384	; 0x384 <MCP_read>
 1f4:	f8 01       	movw	r30, r16
 1f6:	81 93       	st	Z+, r24
 1f8:	8f 01       	movw	r16, r30

	//message.id = MCP_read(MCP_RXB0SIDL);

	message->length = MCP_read(MCP_RXB0DLC);

	for(int i = 0; i < message->length; i++) 
 1fa:	21 96       	adiw	r28, 0x01	; 1
 1fc:	f7 01       	movw	r30, r14
 1fe:	22 81       	ldd	r18, Z+2	; 0x02
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	c2 17       	cp	r28, r18
 204:	d3 07       	cpc	r29, r19
 206:	94 f3       	brlt	.-28     	; 0x1ec <CAN_data_receive+0x34>
	{
		message->data[i] = MCP_read(MCP_RXB0DM + i);
	}

	MCP_bit_mod(MCP_CANINTF,0x01,0);
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	8c e2       	ldi	r24, 0x2C	; 44
 20e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <MCP_bit_mod>

	//return message;
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	08 95       	ret

00000220 <test_CAN>:
	}
	
}

void oled_menu()
{
 220:	af 92       	push	r10
 222:	bf 92       	push	r11
 224:	cf 92       	push	r12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	df 92       	push	r13
 228:	ef 92       	push	r14
 22a:	ff 92       	push	r15
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
			
	int count_menu = 4;
	int select_menu = 1;
	int sub_menu = 0;
	while(1){
	while(sub_menu == 1)
 238:	2b 97       	sbiw	r28, 0x0b	; 11
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	de bf       	out	0x3e, r29	; 62
 240:	0f be       	out	0x3f, r0	; 63
			oled_set_page(k+1);
		}
		_delay_ms(delay);
	}
	
	while (sub_menu == 0)
 242:	cd bf       	out	0x3d, r28	; 61
 244:	0e 94 bb 01 	call	0x376	; 0x376 <MCP_init>
	{
		int delay = 500; //delay in milliseconds
		oled_set_column(0);
 248:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>
 24c:	0e 94 01 02 	call	0x402	; 0x402 <ram_init>
 250:	80 e3       	ldi	r24, 0x30	; 48
 252:	e8 2e       	mov	r14, r24
 254:	89 83       	std	Y+1, r24	; 0x01
 256:	1a 82       	std	Y+2, r1	; 0x02
 258:	88 e0       	ldi	r24, 0x08	; 8
 25a:	8b 83       	std	Y+3, r24	; 0x03
 25c:	8d e2       	ldi	r24, 0x2D	; 45
 25e:	8c 83       	std	Y+4, r24	; 0x04
		oled_set_page(0);
 260:	89 e0       	ldi	r24, 0x09	; 9
 262:	8d 83       	std	Y+5, r24	; 0x05
 264:	88 e3       	ldi	r24, 0x38	; 56
 266:	8e 83       	std	Y+6, r24	; 0x06
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	8f 83       	std	Y+7, r24	; 0x07
 26c:	85 e0       	ldi	r24, 0x05	; 5
 26e:	88 87       	std	Y+8, r24	; 0x08
 270:	81 e2       	ldi	r24, 0x21	; 33
 272:	89 87       	std	Y+9, r24	; 0x09
 274:	8b e2       	ldi	r24, 0x2B	; 43
 276:	8a 87       	std	Y+10, r24	; 0x0a
		int i,j,k;
		
		unsigned int x_volt = read_adc(ADC_CHANNEL_JOY_X);
 278:	8c e2       	ldi	r24, 0x2C	; 44
 27a:	8b 87       	std	Y+11, r24	; 0x0b
 27c:	f1 2c       	mov	r15, r1
 27e:	08 e0       	ldi	r16, 0x08	; 8
 280:	1d e2       	ldi	r17, 0x2D	; 45
		unsigned int y_volt = read_adc(ADC_CHANNEL_JOY_Y);
 282:	29 e0       	ldi	r18, 0x09	; 9
 284:	38 e3       	ldi	r19, 0x38	; 56
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	55 e0       	ldi	r21, 0x05	; 5
 28a:	61 e2       	ldi	r22, 0x21	; 33
 28c:	7b e2       	ldi	r23, 0x2B	; 43
		//printf("%d %d\n", x_volt, y_volt);
		
		if (y_volt < 125 && select_menu < count_menu)
 28e:	0e 94 7f 00 	call	0xfe	; 0xfe <CAN_message_send>
 292:	83 ec       	ldi	r24, 0xC3	; 195
 294:	99 e0       	ldi	r25, 0x09	; 9
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <test_CAN+0x76>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <test_CAN+0x7c>
		{
			select_menu++;
 29c:	00 00       	nop
 29e:	8b e0       	ldi	r24, 0x0B	; 11
 2a0:	90 e0       	ldi	r25, 0x00	; 0
		}
		if (y_volt > 130 && select_menu > 1)
 2a2:	0e 94 3c 02 	call	0x478	; 0x478 <malloc>
 2a6:	5c 01       	movw	r10, r24
 2a8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <CAN_data_receive>
 2ac:	f5 01       	movw	r30, r10
 2ae:	82 81       	ldd	r24, Z+2	; 0x02
		{
			select_menu--;
 2b0:	88 23       	and	r24, r24
 2b2:	29 f1       	breq	.+74     	; 0x2fe <test_CAN+0xde>
 2b4:	65 01       	movw	r12, r10
		}
		printf("%d\n",select_menu);
 2b6:	f3 e0       	ldi	r31, 0x03	; 3
 2b8:	cf 0e       	add	r12, r31
 2ba:	d1 1c       	adc	r13, r1
 2bc:	00 e0       	ldi	r16, 0x00	; 0
 2be:	10 e0       	ldi	r17, 0x00	; 0
 2c0:	0f 2e       	mov	r0, r31
 2c2:	f4 e9       	ldi	r31, 0x94	; 148
 2c4:	ef 2e       	mov	r14, r31
		
		if(x_volt > 135 && select_menu == 2)
 2c6:	f1 e0       	ldi	r31, 0x01	; 1
 2c8:	ff 2e       	mov	r15, r31
 2ca:	f0 2d       	mov	r31, r0
 2cc:	f6 01       	movw	r30, r12
 2ce:	81 91       	ld	r24, Z+
 2d0:	6f 01       	movw	r12, r30
 2d2:	1f 92       	push	r1
 2d4:	8f 93       	push	r24
 2d6:	1f 93       	push	r17
 2d8:	0f 93       	push	r16
 2da:	ff 92       	push	r15
 2dc:	ef 92       	push	r14
 2de:	0e 94 ae 03 	call	0x75c	; 0x75c <printf>
 2e2:	0f 5f       	subi	r16, 0xFF	; 255
 2e4:	1f 4f       	sbci	r17, 0xFF	; 255
 2e6:	f5 01       	movw	r30, r10
		" Arsenal   ",
		" Man.Utd.  ",
	};
			
	int count_menu = 4;
	int select_menu = 1;
 2e8:	22 81       	ldd	r18, Z+2	; 0x02
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	0f 90       	pop	r0
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	02 17       	cp	r16, r18
 2fa:	13 07       	cpc	r17, r19
 2fc:	3c f3       	brlt	.-50     	; 0x2cc <test_CAN+0xac>
 2fe:	f5 01       	movw	r30, r10
 300:	81 81       	ldd	r24, Z+1	; 0x01
 302:	8f 93       	push	r24
 304:	80 81       	ld	r24, Z
 306:	8f 93       	push	r24
 308:	83 ea       	ldi	r24, 0xA3	; 163
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	9f 93       	push	r25
 30e:	8f 93       	push	r24
 310:	0e 94 ae 03 	call	0x75c	; 0x75c <printf>
 314:	f5 01       	movw	r30, r10
 316:	82 81       	ldd	r24, Z+2	; 0x02
 318:	1f 92       	push	r1
 31a:	8f 93       	push	r24
 31c:	87 eb       	ldi	r24, 0xB7	; 183
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	9f 93       	push	r25
 322:	8f 93       	push	r24
 324:	0e 94 ae 03 	call	0x75c	; 0x75c <printf>
		printf("%d\n",select_menu);
		
		if(x_volt > 135 && select_menu == 2)
		{
			sub_menu = 1;
			clear_oled();
 328:	0f b6       	in	r0, 0x3f	; 63
		}
		printf("%d\n",select_menu);
		
		if(x_volt > 135 && select_menu == 2)
		{
			sub_menu = 1;
 32a:	f8 94       	cli
 32c:	de bf       	out	0x3e, r29	; 62
 32e:	0f be       	out	0x3f, r0	; 63
			clear_oled();
			select_menu = 1;
 330:	cd bf       	out	0x3d, r28	; 61
 332:	2b 96       	adiw	r28, 0x0b	; 11
 334:	0f b6       	in	r0, 0x3f	; 63
			break;
 336:	f8 94       	cli
		{
			for (j = 0; j < 13; j++)
			{
				for (i = 0; i < 5; i++)
				{
					if(select_menu==k)
 338:	de bf       	out	0x3e, r29	; 62
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	cd bf       	out	0x3d, r28	; 61
					{
						oled_set_column(i+(j*5));
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	ff 90       	pop	r15
						write_d(~pgm_read_byte(&font5[menu[k][j] - ' '][i]));
 348:	ef 90       	pop	r14
 34a:	df 90       	pop	r13
 34c:	cf 90       	pop	r12
 34e:	bf 90       	pop	r11
 350:	af 90       	pop	r10
 352:	08 95       	ret

00000354 <main>:
 354:	8f e1       	ldi	r24, 0x1F	; 31
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 2d 02 	call	0x45a	; 0x45a <USART_Init>
 35c:	0e 94 10 01 	call	0x220	; 0x220 <test_CAN>
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	08 95       	ret

00000366 <MCP_reset>:
	return 0;
}

int MCP_reset(void)
{
	PORTB &= ~(1 << SS);
 366:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(MCP_RESET);
 368:	80 ec       	ldi	r24, 0xC0	; 192
 36a:	0e 94 1c 02 	call	0x438	; 0x438 <SPI_MasterTransmit>
	
	PORTB |= (1 << SS);
 36e:	c4 9a       	sbi	0x18, 4	; 24
	
	return 0;
}
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	08 95       	ret

00000376 <MCP_init>:
#include "SPI.h"
#include "MCP2515.h"

int MCP_init(void)
{
	SPI_MasterInit();
 376:	0e 94 14 02 	call	0x428	; 0x428 <SPI_MasterInit>
	MCP_reset();
 37a:	0e 94 b3 01 	call	0x366	; 0x366 <MCP_reset>
	
	return 0;
}
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	08 95       	ret

00000384 <MCP_read>:
	
	return 0;
}

char MCP_read(char address)
{
 384:	cf 93       	push	r28
 386:	c8 2f       	mov	r28, r24
	PORTB &= ~(1 << SS); 
 388:	c4 98       	cbi	0x18, 4	; 24
		
	SPI_MasterTransmit(MCP_READ);
 38a:	83 e0       	ldi	r24, 0x03	; 3
 38c:	0e 94 1c 02 	call	0x438	; 0x438 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
 390:	8c 2f       	mov	r24, r28
 392:	0e 94 1c 02 	call	0x438	; 0x438 <SPI_MasterTransmit>
	
	char data = SPI_SlaveReceive();
 396:	0e 94 20 02 	call	0x440	; 0x440 <SPI_SlaveReceive>
	
	PORTB |= (1 << SS);
 39a:	c4 9a       	sbi	0x18, 4	; 24
	
	return data;

}
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <MCP_write>:

void MCP_write(char address, char data)
{
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	d8 2f       	mov	r29, r24
 3a6:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << SS); 
 3a8:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(MCP_WRITE);
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	0e 94 1c 02 	call	0x438	; 0x438 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
 3b0:	8d 2f       	mov	r24, r29
 3b2:	0e 94 1c 02 	call	0x438	; 0x438 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
 3b6:	8c 2f       	mov	r24, r28
 3b8:	0e 94 1c 02 	call	0x438	; 0x438 <SPI_MasterTransmit>
	
	PORTB |= (1 << SS);
 3bc:	c4 9a       	sbi	0x18, 4	; 24
}
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <MCP_rts>:

void MCP_rts(char rts)
{
	PORTB &= ~(1 << SS);
 3c4:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(rts);
 3c6:	0e 94 1c 02 	call	0x438	; 0x438 <SPI_MasterTransmit>
	
	PORTB |= (1 << SS);
 3ca:	c4 9a       	sbi	0x18, 4	; 24
 3cc:	08 95       	ret

000003ce <MCP_bit_mod>:
	
	return status;
}

void MCP_bit_mod(char address, char mask, char data)
{
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	18 2f       	mov	r17, r24
 3d6:	d6 2f       	mov	r29, r22
 3d8:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << SS);
 3da:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(MCP_BITMOD);
 3dc:	85 e0       	ldi	r24, 0x05	; 5
 3de:	0e 94 1c 02 	call	0x438	; 0x438 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
 3e2:	81 2f       	mov	r24, r17
 3e4:	0e 94 1c 02 	call	0x438	; 0x438 <SPI_MasterTransmit>
	SPI_MasterTransmit(mask);
 3e8:	8d 2f       	mov	r24, r29
 3ea:	0e 94 1c 02 	call	0x438	; 0x438 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
 3ee:	8c 2f       	mov	r24, r28
 3f0:	0e 94 1c 02 	call	0x438	; 0x438 <SPI_MasterTransmit>
	
	PORTB |= ~(1 << SS);
 3f4:	88 b3       	in	r24, 0x18	; 24
 3f6:	8f 6e       	ori	r24, 0xEF	; 239
 3f8:	88 bb       	out	0x18, r24	; 24
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	1f 91       	pop	r17
 400:	08 95       	ret

00000402 <ram_init>:
#include "define.h"

void ram_init(void)
{
	bit_set(MCUCR, SRE);
 402:	85 b7       	in	r24, 0x35	; 53
 404:	80 68       	ori	r24, 0x80	; 128
 406:	85 bf       	out	0x35, r24	; 53
	
	bit_set(SFIOR, XMM2);
 408:	80 b7       	in	r24, 0x30	; 48
 40a:	80 62       	ori	r24, 0x20	; 32
 40c:	80 bf       	out	0x30, r24	; 48
	bit_clear(SFIOR, XMM1);
 40e:	80 b7       	in	r24, 0x30	; 48
 410:	8f 7e       	andi	r24, 0xEF	; 239
 412:	80 bf       	out	0x30, r24	; 48
	bit_clear(SFIOR, XMM0);
 414:	80 b7       	in	r24, 0x30	; 48
 416:	87 7f       	andi	r24, 0xF7	; 247
 418:	80 bf       	out	0x30, r24	; 48

	bit_set(MCUCR, SRW11);
 41a:	85 b7       	in	r24, 0x35	; 53
 41c:	82 60       	ori	r24, 0x02	; 2
 41e:	85 bf       	out	0x35, r24	; 53
	bit_clear(EMCUCR, SRW10);	
 420:	86 b7       	in	r24, 0x36	; 54
 422:	8f 7b       	andi	r24, 0xBF	; 191
 424:	86 bf       	out	0x36, r24	; 54
 426:	08 95       	ret

00000428 <SPI_MasterInit>:
#define SCK PB7


void SPI_MasterInit(void)
{
	DDRB |= (1 << MOSI) | (1 << SS) | (1 << SCK);
 428:	87 b3       	in	r24, 0x17	; 23
 42a:	80 6b       	ori	r24, 0xB0	; 176
 42c:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << MISO);
 42e:	be 98       	cbi	0x17, 6	; 23
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 430:	8d b1       	in	r24, 0x0d	; 13
 432:	81 65       	ori	r24, 0x51	; 81
 434:	8d b9       	out	0x0d, r24	; 13
 436:	08 95       	ret

00000438 <SPI_MasterTransmit>:
}


void SPI_MasterTransmit(char cdata)
{
	SPDR = cdata;
 438:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
 43a:	77 9b       	sbis	0x0e, 7	; 14
 43c:	fe cf       	rjmp	.-4      	; 0x43a <SPI_MasterTransmit+0x2>
}
 43e:	08 95       	ret

00000440 <SPI_SlaveReceive>:
}


uint8_t SPI_SlaveReceive(void)
{
	SPI_MasterTransmit(0);
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	0e 94 1c 02 	call	0x438	; 0x438 <SPI_MasterTransmit>
	return SPDR;
 446:	8f b1       	in	r24, 0x0f	; 15
 448:	08 95       	ret

0000044a <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !(UCSR0A & (1 << UDRE0)) );
 44a:	5d 9b       	sbis	0x0b, 5	; 11
 44c:	fe cf       	rjmp	.-4      	; 0x44a <USART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
 44e:	8c b9       	out	0x0c, r24	; 12
 450:	08 95       	ret

00000452 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1 << RXC0)) );
 452:	5f 9b       	sbis	0x0b, 7	; 11
 454:	fe cf       	rjmp	.-4      	; 0x452 <USART_Receive>
	
	/* Get and return received data from buffer */
	return UDR0;
 456:	8c b1       	in	r24, 0x0c	; 12
}
 458:	08 95       	ret

0000045a <USART_Init>:

FILE *uart;

void USART_Init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr >> 8);
 45a:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 45c:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 45e:	88 e1       	ldi	r24, 0x18	; 24
 460:	8a b9       	out	0x0a, r24	; 10
	
	uart = fdevopen(&USART_Transmit, &USART_Receive);
 462:	69 e2       	ldi	r22, 0x29	; 41
 464:	72 e0       	ldi	r23, 0x02	; 2
 466:	85 e2       	ldi	r24, 0x25	; 37
 468:	92 e0       	ldi	r25, 0x02	; 2
 46a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <fdevopen>
 46e:	90 93 c5 01 	sts	0x01C5, r25
 472:	80 93 c4 01 	sts	0x01C4, r24
 476:	08 95       	ret

00000478 <malloc>:
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	82 30       	cpi	r24, 0x02	; 2
 47e:	91 05       	cpc	r25, r1
 480:	10 f4       	brcc	.+4      	; 0x486 <malloc+0xe>
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	e0 91 c8 01 	lds	r30, 0x01C8
 48a:	f0 91 c9 01 	lds	r31, 0x01C9
 48e:	20 e0       	ldi	r18, 0x00	; 0
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	a0 e0       	ldi	r26, 0x00	; 0
 494:	b0 e0       	ldi	r27, 0x00	; 0
 496:	30 97       	sbiw	r30, 0x00	; 0
 498:	39 f1       	breq	.+78     	; 0x4e8 <malloc+0x70>
 49a:	40 81       	ld	r20, Z
 49c:	51 81       	ldd	r21, Z+1	; 0x01
 49e:	48 17       	cp	r20, r24
 4a0:	59 07       	cpc	r21, r25
 4a2:	b8 f0       	brcs	.+46     	; 0x4d2 <malloc+0x5a>
 4a4:	48 17       	cp	r20, r24
 4a6:	59 07       	cpc	r21, r25
 4a8:	71 f4       	brne	.+28     	; 0x4c6 <malloc+0x4e>
 4aa:	82 81       	ldd	r24, Z+2	; 0x02
 4ac:	93 81       	ldd	r25, Z+3	; 0x03
 4ae:	10 97       	sbiw	r26, 0x00	; 0
 4b0:	29 f0       	breq	.+10     	; 0x4bc <malloc+0x44>
 4b2:	13 96       	adiw	r26, 0x03	; 3
 4b4:	9c 93       	st	X, r25
 4b6:	8e 93       	st	-X, r24
 4b8:	12 97       	sbiw	r26, 0x02	; 2
 4ba:	2c c0       	rjmp	.+88     	; 0x514 <__stack+0x15>
 4bc:	90 93 c9 01 	sts	0x01C9, r25
 4c0:	80 93 c8 01 	sts	0x01C8, r24
 4c4:	27 c0       	rjmp	.+78     	; 0x514 <__stack+0x15>
 4c6:	21 15       	cp	r18, r1
 4c8:	31 05       	cpc	r19, r1
 4ca:	31 f0       	breq	.+12     	; 0x4d8 <malloc+0x60>
 4cc:	42 17       	cp	r20, r18
 4ce:	53 07       	cpc	r21, r19
 4d0:	18 f0       	brcs	.+6      	; 0x4d8 <malloc+0x60>
 4d2:	a9 01       	movw	r20, r18
 4d4:	db 01       	movw	r26, r22
 4d6:	01 c0       	rjmp	.+2      	; 0x4da <malloc+0x62>
 4d8:	ef 01       	movw	r28, r30
 4da:	9a 01       	movw	r18, r20
 4dc:	bd 01       	movw	r22, r26
 4de:	df 01       	movw	r26, r30
 4e0:	02 80       	ldd	r0, Z+2	; 0x02
 4e2:	f3 81       	ldd	r31, Z+3	; 0x03
 4e4:	e0 2d       	mov	r30, r0
 4e6:	d7 cf       	rjmp	.-82     	; 0x496 <malloc+0x1e>
 4e8:	21 15       	cp	r18, r1
 4ea:	31 05       	cpc	r19, r1
 4ec:	f9 f0       	breq	.+62     	; 0x52c <__stack+0x2d>
 4ee:	28 1b       	sub	r18, r24
 4f0:	39 0b       	sbc	r19, r25
 4f2:	24 30       	cpi	r18, 0x04	; 4
 4f4:	31 05       	cpc	r19, r1
 4f6:	80 f4       	brcc	.+32     	; 0x518 <__stack+0x19>
 4f8:	8a 81       	ldd	r24, Y+2	; 0x02
 4fa:	9b 81       	ldd	r25, Y+3	; 0x03
 4fc:	61 15       	cp	r22, r1
 4fe:	71 05       	cpc	r23, r1
 500:	21 f0       	breq	.+8      	; 0x50a <__stack+0xb>
 502:	fb 01       	movw	r30, r22
 504:	93 83       	std	Z+3, r25	; 0x03
 506:	82 83       	std	Z+2, r24	; 0x02
 508:	04 c0       	rjmp	.+8      	; 0x512 <__stack+0x13>
 50a:	90 93 c9 01 	sts	0x01C9, r25
 50e:	80 93 c8 01 	sts	0x01C8, r24
 512:	fe 01       	movw	r30, r28
 514:	32 96       	adiw	r30, 0x02	; 2
 516:	44 c0       	rjmp	.+136    	; 0x5a0 <__stack+0xa1>
 518:	fe 01       	movw	r30, r28
 51a:	e2 0f       	add	r30, r18
 51c:	f3 1f       	adc	r31, r19
 51e:	81 93       	st	Z+, r24
 520:	91 93       	st	Z+, r25
 522:	22 50       	subi	r18, 0x02	; 2
 524:	31 09       	sbc	r19, r1
 526:	39 83       	std	Y+1, r19	; 0x01
 528:	28 83       	st	Y, r18
 52a:	3a c0       	rjmp	.+116    	; 0x5a0 <__stack+0xa1>
 52c:	20 91 c6 01 	lds	r18, 0x01C6
 530:	30 91 c7 01 	lds	r19, 0x01C7
 534:	23 2b       	or	r18, r19
 536:	41 f4       	brne	.+16     	; 0x548 <__stack+0x49>
 538:	20 91 02 01 	lds	r18, 0x0102
 53c:	30 91 03 01 	lds	r19, 0x0103
 540:	30 93 c7 01 	sts	0x01C7, r19
 544:	20 93 c6 01 	sts	0x01C6, r18
 548:	20 91 00 01 	lds	r18, 0x0100
 54c:	30 91 01 01 	lds	r19, 0x0101
 550:	21 15       	cp	r18, r1
 552:	31 05       	cpc	r19, r1
 554:	41 f4       	brne	.+16     	; 0x566 <__stack+0x67>
 556:	2d b7       	in	r18, 0x3d	; 61
 558:	3e b7       	in	r19, 0x3e	; 62
 55a:	40 91 04 01 	lds	r20, 0x0104
 55e:	50 91 05 01 	lds	r21, 0x0105
 562:	24 1b       	sub	r18, r20
 564:	35 0b       	sbc	r19, r21
 566:	e0 91 c6 01 	lds	r30, 0x01C6
 56a:	f0 91 c7 01 	lds	r31, 0x01C7
 56e:	e2 17       	cp	r30, r18
 570:	f3 07       	cpc	r31, r19
 572:	a0 f4       	brcc	.+40     	; 0x59c <__stack+0x9d>
 574:	2e 1b       	sub	r18, r30
 576:	3f 0b       	sbc	r19, r31
 578:	28 17       	cp	r18, r24
 57a:	39 07       	cpc	r19, r25
 57c:	78 f0       	brcs	.+30     	; 0x59c <__stack+0x9d>
 57e:	ac 01       	movw	r20, r24
 580:	4e 5f       	subi	r20, 0xFE	; 254
 582:	5f 4f       	sbci	r21, 0xFF	; 255
 584:	24 17       	cp	r18, r20
 586:	35 07       	cpc	r19, r21
 588:	48 f0       	brcs	.+18     	; 0x59c <__stack+0x9d>
 58a:	4e 0f       	add	r20, r30
 58c:	5f 1f       	adc	r21, r31
 58e:	50 93 c7 01 	sts	0x01C7, r21
 592:	40 93 c6 01 	sts	0x01C6, r20
 596:	81 93       	st	Z+, r24
 598:	91 93       	st	Z+, r25
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <__stack+0xa1>
 59c:	e0 e0       	ldi	r30, 0x00	; 0
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	cf 01       	movw	r24, r30
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	08 95       	ret

000005a8 <free>:
 5a8:	cf 93       	push	r28
 5aa:	df 93       	push	r29
 5ac:	00 97       	sbiw	r24, 0x00	; 0
 5ae:	09 f4       	brne	.+2      	; 0x5b2 <free+0xa>
 5b0:	87 c0       	rjmp	.+270    	; 0x6c0 <free+0x118>
 5b2:	fc 01       	movw	r30, r24
 5b4:	32 97       	sbiw	r30, 0x02	; 2
 5b6:	13 82       	std	Z+3, r1	; 0x03
 5b8:	12 82       	std	Z+2, r1	; 0x02
 5ba:	c0 91 c8 01 	lds	r28, 0x01C8
 5be:	d0 91 c9 01 	lds	r29, 0x01C9
 5c2:	20 97       	sbiw	r28, 0x00	; 0
 5c4:	81 f4       	brne	.+32     	; 0x5e6 <free+0x3e>
 5c6:	20 81       	ld	r18, Z
 5c8:	31 81       	ldd	r19, Z+1	; 0x01
 5ca:	28 0f       	add	r18, r24
 5cc:	39 1f       	adc	r19, r25
 5ce:	80 91 c6 01 	lds	r24, 0x01C6
 5d2:	90 91 c7 01 	lds	r25, 0x01C7
 5d6:	82 17       	cp	r24, r18
 5d8:	93 07       	cpc	r25, r19
 5da:	79 f5       	brne	.+94     	; 0x63a <free+0x92>
 5dc:	f0 93 c7 01 	sts	0x01C7, r31
 5e0:	e0 93 c6 01 	sts	0x01C6, r30
 5e4:	6d c0       	rjmp	.+218    	; 0x6c0 <free+0x118>
 5e6:	de 01       	movw	r26, r28
 5e8:	20 e0       	ldi	r18, 0x00	; 0
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	ae 17       	cp	r26, r30
 5ee:	bf 07       	cpc	r27, r31
 5f0:	50 f4       	brcc	.+20     	; 0x606 <free+0x5e>
 5f2:	12 96       	adiw	r26, 0x02	; 2
 5f4:	4d 91       	ld	r20, X+
 5f6:	5c 91       	ld	r21, X
 5f8:	13 97       	sbiw	r26, 0x03	; 3
 5fa:	9d 01       	movw	r18, r26
 5fc:	41 15       	cp	r20, r1
 5fe:	51 05       	cpc	r21, r1
 600:	09 f1       	breq	.+66     	; 0x644 <free+0x9c>
 602:	da 01       	movw	r26, r20
 604:	f3 cf       	rjmp	.-26     	; 0x5ec <free+0x44>
 606:	b3 83       	std	Z+3, r27	; 0x03
 608:	a2 83       	std	Z+2, r26	; 0x02
 60a:	40 81       	ld	r20, Z
 60c:	51 81       	ldd	r21, Z+1	; 0x01
 60e:	84 0f       	add	r24, r20
 610:	95 1f       	adc	r25, r21
 612:	8a 17       	cp	r24, r26
 614:	9b 07       	cpc	r25, r27
 616:	71 f4       	brne	.+28     	; 0x634 <free+0x8c>
 618:	8d 91       	ld	r24, X+
 61a:	9c 91       	ld	r25, X
 61c:	11 97       	sbiw	r26, 0x01	; 1
 61e:	84 0f       	add	r24, r20
 620:	95 1f       	adc	r25, r21
 622:	02 96       	adiw	r24, 0x02	; 2
 624:	91 83       	std	Z+1, r25	; 0x01
 626:	80 83       	st	Z, r24
 628:	12 96       	adiw	r26, 0x02	; 2
 62a:	8d 91       	ld	r24, X+
 62c:	9c 91       	ld	r25, X
 62e:	13 97       	sbiw	r26, 0x03	; 3
 630:	93 83       	std	Z+3, r25	; 0x03
 632:	82 83       	std	Z+2, r24	; 0x02
 634:	21 15       	cp	r18, r1
 636:	31 05       	cpc	r19, r1
 638:	29 f4       	brne	.+10     	; 0x644 <free+0x9c>
 63a:	f0 93 c9 01 	sts	0x01C9, r31
 63e:	e0 93 c8 01 	sts	0x01C8, r30
 642:	3e c0       	rjmp	.+124    	; 0x6c0 <free+0x118>
 644:	d9 01       	movw	r26, r18
 646:	13 96       	adiw	r26, 0x03	; 3
 648:	fc 93       	st	X, r31
 64a:	ee 93       	st	-X, r30
 64c:	12 97       	sbiw	r26, 0x02	; 2
 64e:	4d 91       	ld	r20, X+
 650:	5d 91       	ld	r21, X+
 652:	a4 0f       	add	r26, r20
 654:	b5 1f       	adc	r27, r21
 656:	ea 17       	cp	r30, r26
 658:	fb 07       	cpc	r31, r27
 65a:	79 f4       	brne	.+30     	; 0x67a <free+0xd2>
 65c:	80 81       	ld	r24, Z
 65e:	91 81       	ldd	r25, Z+1	; 0x01
 660:	84 0f       	add	r24, r20
 662:	95 1f       	adc	r25, r21
 664:	02 96       	adiw	r24, 0x02	; 2
 666:	d9 01       	movw	r26, r18
 668:	11 96       	adiw	r26, 0x01	; 1
 66a:	9c 93       	st	X, r25
 66c:	8e 93       	st	-X, r24
 66e:	82 81       	ldd	r24, Z+2	; 0x02
 670:	93 81       	ldd	r25, Z+3	; 0x03
 672:	13 96       	adiw	r26, 0x03	; 3
 674:	9c 93       	st	X, r25
 676:	8e 93       	st	-X, r24
 678:	12 97       	sbiw	r26, 0x02	; 2
 67a:	e0 e0       	ldi	r30, 0x00	; 0
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	8a 81       	ldd	r24, Y+2	; 0x02
 680:	9b 81       	ldd	r25, Y+3	; 0x03
 682:	00 97       	sbiw	r24, 0x00	; 0
 684:	19 f0       	breq	.+6      	; 0x68c <free+0xe4>
 686:	fe 01       	movw	r30, r28
 688:	ec 01       	movw	r28, r24
 68a:	f9 cf       	rjmp	.-14     	; 0x67e <free+0xd6>
 68c:	ce 01       	movw	r24, r28
 68e:	02 96       	adiw	r24, 0x02	; 2
 690:	28 81       	ld	r18, Y
 692:	39 81       	ldd	r19, Y+1	; 0x01
 694:	82 0f       	add	r24, r18
 696:	93 1f       	adc	r25, r19
 698:	20 91 c6 01 	lds	r18, 0x01C6
 69c:	30 91 c7 01 	lds	r19, 0x01C7
 6a0:	28 17       	cp	r18, r24
 6a2:	39 07       	cpc	r19, r25
 6a4:	69 f4       	brne	.+26     	; 0x6c0 <free+0x118>
 6a6:	30 97       	sbiw	r30, 0x00	; 0
 6a8:	29 f4       	brne	.+10     	; 0x6b4 <free+0x10c>
 6aa:	10 92 c9 01 	sts	0x01C9, r1
 6ae:	10 92 c8 01 	sts	0x01C8, r1
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <free+0x110>
 6b4:	13 82       	std	Z+3, r1	; 0x03
 6b6:	12 82       	std	Z+2, r1	; 0x02
 6b8:	d0 93 c7 01 	sts	0x01C7, r29
 6bc:	c0 93 c6 01 	sts	0x01C6, r28
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	08 95       	ret

000006c6 <fdevopen>:
 6c6:	0f 93       	push	r16
 6c8:	1f 93       	push	r17
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
 6ce:	ec 01       	movw	r28, r24
 6d0:	8b 01       	movw	r16, r22
 6d2:	00 97       	sbiw	r24, 0x00	; 0
 6d4:	31 f4       	brne	.+12     	; 0x6e2 <fdevopen+0x1c>
 6d6:	61 15       	cp	r22, r1
 6d8:	71 05       	cpc	r23, r1
 6da:	19 f4       	brne	.+6      	; 0x6e2 <fdevopen+0x1c>
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	38 c0       	rjmp	.+112    	; 0x752 <fdevopen+0x8c>
 6e2:	6e e0       	ldi	r22, 0x0E	; 14
 6e4:	70 e0       	ldi	r23, 0x00	; 0
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	0e 94 94 05 	call	0xb28	; 0xb28 <calloc>
 6ee:	fc 01       	movw	r30, r24
 6f0:	00 97       	sbiw	r24, 0x00	; 0
 6f2:	a1 f3       	breq	.-24     	; 0x6dc <fdevopen+0x16>
 6f4:	80 e8       	ldi	r24, 0x80	; 128
 6f6:	83 83       	std	Z+3, r24	; 0x03
 6f8:	01 15       	cp	r16, r1
 6fa:	11 05       	cpc	r17, r1
 6fc:	71 f0       	breq	.+28     	; 0x71a <fdevopen+0x54>
 6fe:	13 87       	std	Z+11, r17	; 0x0b
 700:	02 87       	std	Z+10, r16	; 0x0a
 702:	81 e8       	ldi	r24, 0x81	; 129
 704:	83 83       	std	Z+3, r24	; 0x03
 706:	80 91 ca 01 	lds	r24, 0x01CA
 70a:	90 91 cb 01 	lds	r25, 0x01CB
 70e:	89 2b       	or	r24, r25
 710:	21 f4       	brne	.+8      	; 0x71a <fdevopen+0x54>
 712:	f0 93 cb 01 	sts	0x01CB, r31
 716:	e0 93 ca 01 	sts	0x01CA, r30
 71a:	20 97       	sbiw	r28, 0x00	; 0
 71c:	c9 f0       	breq	.+50     	; 0x750 <fdevopen+0x8a>
 71e:	d1 87       	std	Z+9, r29	; 0x09
 720:	c0 87       	std	Z+8, r28	; 0x08
 722:	83 81       	ldd	r24, Z+3	; 0x03
 724:	82 60       	ori	r24, 0x02	; 2
 726:	83 83       	std	Z+3, r24	; 0x03
 728:	80 91 cc 01 	lds	r24, 0x01CC
 72c:	90 91 cd 01 	lds	r25, 0x01CD
 730:	89 2b       	or	r24, r25
 732:	71 f4       	brne	.+28     	; 0x750 <fdevopen+0x8a>
 734:	f0 93 cd 01 	sts	0x01CD, r31
 738:	e0 93 cc 01 	sts	0x01CC, r30
 73c:	80 91 ce 01 	lds	r24, 0x01CE
 740:	90 91 cf 01 	lds	r25, 0x01CF
 744:	89 2b       	or	r24, r25
 746:	21 f4       	brne	.+8      	; 0x750 <fdevopen+0x8a>
 748:	f0 93 cf 01 	sts	0x01CF, r31
 74c:	e0 93 ce 01 	sts	0x01CE, r30
 750:	cf 01       	movw	r24, r30
 752:	df 91       	pop	r29
 754:	cf 91       	pop	r28
 756:	1f 91       	pop	r17
 758:	0f 91       	pop	r16
 75a:	08 95       	ret

0000075c <printf>:
 75c:	a0 e0       	ldi	r26, 0x00	; 0
 75e:	b0 e0       	ldi	r27, 0x00	; 0
 760:	e4 eb       	ldi	r30, 0xB4	; 180
 762:	f3 e0       	ldi	r31, 0x03	; 3
 764:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__prologue_saves__+0x20>
 768:	fe 01       	movw	r30, r28
 76a:	35 96       	adiw	r30, 0x05	; 5
 76c:	61 91       	ld	r22, Z+
 76e:	71 91       	ld	r23, Z+
 770:	af 01       	movw	r20, r30
 772:	80 91 cc 01 	lds	r24, 0x01CC
 776:	90 91 cd 01 	lds	r25, 0x01CD
 77a:	0e 94 c2 03 	call	0x784	; 0x784 <vfprintf>
 77e:	e2 e0       	ldi	r30, 0x02	; 2
 780:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__epilogue_restores__+0x20>

00000784 <vfprintf>:
 784:	ac e0       	ldi	r26, 0x0C	; 12
 786:	b0 e0       	ldi	r27, 0x00	; 0
 788:	e8 ec       	ldi	r30, 0xC8	; 200
 78a:	f3 e0       	ldi	r31, 0x03	; 3
 78c:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__prologue_saves__>
 790:	7c 01       	movw	r14, r24
 792:	6b 01       	movw	r12, r22
 794:	8a 01       	movw	r16, r20
 796:	fc 01       	movw	r30, r24
 798:	17 82       	std	Z+7, r1	; 0x07
 79a:	16 82       	std	Z+6, r1	; 0x06
 79c:	83 81       	ldd	r24, Z+3	; 0x03
 79e:	81 ff       	sbrs	r24, 1
 7a0:	bd c1       	rjmp	.+890    	; 0xb1c <vfprintf+0x398>
 7a2:	ce 01       	movw	r24, r28
 7a4:	01 96       	adiw	r24, 0x01	; 1
 7a6:	4c 01       	movw	r8, r24
 7a8:	f7 01       	movw	r30, r14
 7aa:	93 81       	ldd	r25, Z+3	; 0x03
 7ac:	f6 01       	movw	r30, r12
 7ae:	93 fd       	sbrc	r25, 3
 7b0:	85 91       	lpm	r24, Z+
 7b2:	93 ff       	sbrs	r25, 3
 7b4:	81 91       	ld	r24, Z+
 7b6:	6f 01       	movw	r12, r30
 7b8:	88 23       	and	r24, r24
 7ba:	09 f4       	brne	.+2      	; 0x7be <vfprintf+0x3a>
 7bc:	ab c1       	rjmp	.+854    	; 0xb14 <vfprintf+0x390>
 7be:	85 32       	cpi	r24, 0x25	; 37
 7c0:	39 f4       	brne	.+14     	; 0x7d0 <vfprintf+0x4c>
 7c2:	93 fd       	sbrc	r25, 3
 7c4:	85 91       	lpm	r24, Z+
 7c6:	93 ff       	sbrs	r25, 3
 7c8:	81 91       	ld	r24, Z+
 7ca:	6f 01       	movw	r12, r30
 7cc:	85 32       	cpi	r24, 0x25	; 37
 7ce:	29 f4       	brne	.+10     	; 0x7da <vfprintf+0x56>
 7d0:	b7 01       	movw	r22, r14
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	0e 94 cd 05 	call	0xb9a	; 0xb9a <fputc>
 7d8:	e7 cf       	rjmp	.-50     	; 0x7a8 <vfprintf+0x24>
 7da:	51 2c       	mov	r5, r1
 7dc:	31 2c       	mov	r3, r1
 7de:	20 e0       	ldi	r18, 0x00	; 0
 7e0:	20 32       	cpi	r18, 0x20	; 32
 7e2:	a0 f4       	brcc	.+40     	; 0x80c <vfprintf+0x88>
 7e4:	8b 32       	cpi	r24, 0x2B	; 43
 7e6:	69 f0       	breq	.+26     	; 0x802 <vfprintf+0x7e>
 7e8:	30 f4       	brcc	.+12     	; 0x7f6 <vfprintf+0x72>
 7ea:	80 32       	cpi	r24, 0x20	; 32
 7ec:	59 f0       	breq	.+22     	; 0x804 <vfprintf+0x80>
 7ee:	83 32       	cpi	r24, 0x23	; 35
 7f0:	69 f4       	brne	.+26     	; 0x80c <vfprintf+0x88>
 7f2:	20 61       	ori	r18, 0x10	; 16
 7f4:	2c c0       	rjmp	.+88     	; 0x84e <vfprintf+0xca>
 7f6:	8d 32       	cpi	r24, 0x2D	; 45
 7f8:	39 f0       	breq	.+14     	; 0x808 <vfprintf+0x84>
 7fa:	80 33       	cpi	r24, 0x30	; 48
 7fc:	39 f4       	brne	.+14     	; 0x80c <vfprintf+0x88>
 7fe:	21 60       	ori	r18, 0x01	; 1
 800:	26 c0       	rjmp	.+76     	; 0x84e <vfprintf+0xca>
 802:	22 60       	ori	r18, 0x02	; 2
 804:	24 60       	ori	r18, 0x04	; 4
 806:	23 c0       	rjmp	.+70     	; 0x84e <vfprintf+0xca>
 808:	28 60       	ori	r18, 0x08	; 8
 80a:	21 c0       	rjmp	.+66     	; 0x84e <vfprintf+0xca>
 80c:	27 fd       	sbrc	r18, 7
 80e:	27 c0       	rjmp	.+78     	; 0x85e <vfprintf+0xda>
 810:	30 ed       	ldi	r19, 0xD0	; 208
 812:	38 0f       	add	r19, r24
 814:	3a 30       	cpi	r19, 0x0A	; 10
 816:	78 f4       	brcc	.+30     	; 0x836 <vfprintf+0xb2>
 818:	26 ff       	sbrs	r18, 6
 81a:	06 c0       	rjmp	.+12     	; 0x828 <vfprintf+0xa4>
 81c:	fa e0       	ldi	r31, 0x0A	; 10
 81e:	5f 9e       	mul	r5, r31
 820:	30 0d       	add	r19, r0
 822:	11 24       	eor	r1, r1
 824:	53 2e       	mov	r5, r19
 826:	13 c0       	rjmp	.+38     	; 0x84e <vfprintf+0xca>
 828:	8a e0       	ldi	r24, 0x0A	; 10
 82a:	38 9e       	mul	r3, r24
 82c:	30 0d       	add	r19, r0
 82e:	11 24       	eor	r1, r1
 830:	33 2e       	mov	r3, r19
 832:	20 62       	ori	r18, 0x20	; 32
 834:	0c c0       	rjmp	.+24     	; 0x84e <vfprintf+0xca>
 836:	8e 32       	cpi	r24, 0x2E	; 46
 838:	21 f4       	brne	.+8      	; 0x842 <vfprintf+0xbe>
 83a:	26 fd       	sbrc	r18, 6
 83c:	6b c1       	rjmp	.+726    	; 0xb14 <vfprintf+0x390>
 83e:	20 64       	ori	r18, 0x40	; 64
 840:	06 c0       	rjmp	.+12     	; 0x84e <vfprintf+0xca>
 842:	8c 36       	cpi	r24, 0x6C	; 108
 844:	11 f4       	brne	.+4      	; 0x84a <vfprintf+0xc6>
 846:	20 68       	ori	r18, 0x80	; 128
 848:	02 c0       	rjmp	.+4      	; 0x84e <vfprintf+0xca>
 84a:	88 36       	cpi	r24, 0x68	; 104
 84c:	41 f4       	brne	.+16     	; 0x85e <vfprintf+0xda>
 84e:	f6 01       	movw	r30, r12
 850:	93 fd       	sbrc	r25, 3
 852:	85 91       	lpm	r24, Z+
 854:	93 ff       	sbrs	r25, 3
 856:	81 91       	ld	r24, Z+
 858:	6f 01       	movw	r12, r30
 85a:	81 11       	cpse	r24, r1
 85c:	c1 cf       	rjmp	.-126    	; 0x7e0 <vfprintf+0x5c>
 85e:	98 2f       	mov	r25, r24
 860:	9f 7d       	andi	r25, 0xDF	; 223
 862:	95 54       	subi	r25, 0x45	; 69
 864:	93 30       	cpi	r25, 0x03	; 3
 866:	28 f4       	brcc	.+10     	; 0x872 <vfprintf+0xee>
 868:	0c 5f       	subi	r16, 0xFC	; 252
 86a:	1f 4f       	sbci	r17, 0xFF	; 255
 86c:	ff e3       	ldi	r31, 0x3F	; 63
 86e:	f9 83       	std	Y+1, r31	; 0x01
 870:	0d c0       	rjmp	.+26     	; 0x88c <vfprintf+0x108>
 872:	83 36       	cpi	r24, 0x63	; 99
 874:	31 f0       	breq	.+12     	; 0x882 <vfprintf+0xfe>
 876:	83 37       	cpi	r24, 0x73	; 115
 878:	71 f0       	breq	.+28     	; 0x896 <vfprintf+0x112>
 87a:	83 35       	cpi	r24, 0x53	; 83
 87c:	09 f0       	breq	.+2      	; 0x880 <vfprintf+0xfc>
 87e:	5b c0       	rjmp	.+182    	; 0x936 <vfprintf+0x1b2>
 880:	22 c0       	rjmp	.+68     	; 0x8c6 <vfprintf+0x142>
 882:	f8 01       	movw	r30, r16
 884:	80 81       	ld	r24, Z
 886:	89 83       	std	Y+1, r24	; 0x01
 888:	0e 5f       	subi	r16, 0xFE	; 254
 88a:	1f 4f       	sbci	r17, 0xFF	; 255
 88c:	44 24       	eor	r4, r4
 88e:	43 94       	inc	r4
 890:	51 2c       	mov	r5, r1
 892:	54 01       	movw	r10, r8
 894:	15 c0       	rjmp	.+42     	; 0x8c0 <vfprintf+0x13c>
 896:	38 01       	movw	r6, r16
 898:	f2 e0       	ldi	r31, 0x02	; 2
 89a:	6f 0e       	add	r6, r31
 89c:	71 1c       	adc	r7, r1
 89e:	f8 01       	movw	r30, r16
 8a0:	a0 80       	ld	r10, Z
 8a2:	b1 80       	ldd	r11, Z+1	; 0x01
 8a4:	26 ff       	sbrs	r18, 6
 8a6:	03 c0       	rjmp	.+6      	; 0x8ae <vfprintf+0x12a>
 8a8:	65 2d       	mov	r22, r5
 8aa:	70 e0       	ldi	r23, 0x00	; 0
 8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <vfprintf+0x12e>
 8ae:	6f ef       	ldi	r22, 0xFF	; 255
 8b0:	7f ef       	ldi	r23, 0xFF	; 255
 8b2:	c5 01       	movw	r24, r10
 8b4:	2c 87       	std	Y+12, r18	; 0x0c
 8b6:	0e 94 c2 05 	call	0xb84	; 0xb84 <strnlen>
 8ba:	2c 01       	movw	r4, r24
 8bc:	83 01       	movw	r16, r6
 8be:	2c 85       	ldd	r18, Y+12	; 0x0c
 8c0:	2f 77       	andi	r18, 0x7F	; 127
 8c2:	22 2e       	mov	r2, r18
 8c4:	17 c0       	rjmp	.+46     	; 0x8f4 <vfprintf+0x170>
 8c6:	38 01       	movw	r6, r16
 8c8:	f2 e0       	ldi	r31, 0x02	; 2
 8ca:	6f 0e       	add	r6, r31
 8cc:	71 1c       	adc	r7, r1
 8ce:	f8 01       	movw	r30, r16
 8d0:	a0 80       	ld	r10, Z
 8d2:	b1 80       	ldd	r11, Z+1	; 0x01
 8d4:	26 ff       	sbrs	r18, 6
 8d6:	03 c0       	rjmp	.+6      	; 0x8de <vfprintf+0x15a>
 8d8:	65 2d       	mov	r22, r5
 8da:	70 e0       	ldi	r23, 0x00	; 0
 8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <vfprintf+0x15e>
 8de:	6f ef       	ldi	r22, 0xFF	; 255
 8e0:	7f ef       	ldi	r23, 0xFF	; 255
 8e2:	c5 01       	movw	r24, r10
 8e4:	2c 87       	std	Y+12, r18	; 0x0c
 8e6:	0e 94 b0 05 	call	0xb60	; 0xb60 <strnlen_P>
 8ea:	2c 01       	movw	r4, r24
 8ec:	2c 85       	ldd	r18, Y+12	; 0x0c
 8ee:	20 68       	ori	r18, 0x80	; 128
 8f0:	22 2e       	mov	r2, r18
 8f2:	83 01       	movw	r16, r6
 8f4:	23 fc       	sbrc	r2, 3
 8f6:	1b c0       	rjmp	.+54     	; 0x92e <vfprintf+0x1aa>
 8f8:	83 2d       	mov	r24, r3
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	48 16       	cp	r4, r24
 8fe:	59 06       	cpc	r5, r25
 900:	b0 f4       	brcc	.+44     	; 0x92e <vfprintf+0x1aa>
 902:	b7 01       	movw	r22, r14
 904:	80 e2       	ldi	r24, 0x20	; 32
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	0e 94 cd 05 	call	0xb9a	; 0xb9a <fputc>
 90c:	3a 94       	dec	r3
 90e:	f4 cf       	rjmp	.-24     	; 0x8f8 <vfprintf+0x174>
 910:	f5 01       	movw	r30, r10
 912:	27 fc       	sbrc	r2, 7
 914:	85 91       	lpm	r24, Z+
 916:	27 fe       	sbrs	r2, 7
 918:	81 91       	ld	r24, Z+
 91a:	5f 01       	movw	r10, r30
 91c:	b7 01       	movw	r22, r14
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	0e 94 cd 05 	call	0xb9a	; 0xb9a <fputc>
 924:	31 10       	cpse	r3, r1
 926:	3a 94       	dec	r3
 928:	f1 e0       	ldi	r31, 0x01	; 1
 92a:	4f 1a       	sub	r4, r31
 92c:	51 08       	sbc	r5, r1
 92e:	41 14       	cp	r4, r1
 930:	51 04       	cpc	r5, r1
 932:	71 f7       	brne	.-36     	; 0x910 <vfprintf+0x18c>
 934:	e5 c0       	rjmp	.+458    	; 0xb00 <vfprintf+0x37c>
 936:	84 36       	cpi	r24, 0x64	; 100
 938:	11 f0       	breq	.+4      	; 0x93e <vfprintf+0x1ba>
 93a:	89 36       	cpi	r24, 0x69	; 105
 93c:	39 f5       	brne	.+78     	; 0x98c <vfprintf+0x208>
 93e:	f8 01       	movw	r30, r16
 940:	27 ff       	sbrs	r18, 7
 942:	07 c0       	rjmp	.+14     	; 0x952 <vfprintf+0x1ce>
 944:	60 81       	ld	r22, Z
 946:	71 81       	ldd	r23, Z+1	; 0x01
 948:	82 81       	ldd	r24, Z+2	; 0x02
 94a:	93 81       	ldd	r25, Z+3	; 0x03
 94c:	0c 5f       	subi	r16, 0xFC	; 252
 94e:	1f 4f       	sbci	r17, 0xFF	; 255
 950:	08 c0       	rjmp	.+16     	; 0x962 <vfprintf+0x1de>
 952:	60 81       	ld	r22, Z
 954:	71 81       	ldd	r23, Z+1	; 0x01
 956:	88 27       	eor	r24, r24
 958:	77 fd       	sbrc	r23, 7
 95a:	80 95       	com	r24
 95c:	98 2f       	mov	r25, r24
 95e:	0e 5f       	subi	r16, 0xFE	; 254
 960:	1f 4f       	sbci	r17, 0xFF	; 255
 962:	2f 76       	andi	r18, 0x6F	; 111
 964:	b2 2e       	mov	r11, r18
 966:	97 ff       	sbrs	r25, 7
 968:	09 c0       	rjmp	.+18     	; 0x97c <vfprintf+0x1f8>
 96a:	90 95       	com	r25
 96c:	80 95       	com	r24
 96e:	70 95       	com	r23
 970:	61 95       	neg	r22
 972:	7f 4f       	sbci	r23, 0xFF	; 255
 974:	8f 4f       	sbci	r24, 0xFF	; 255
 976:	9f 4f       	sbci	r25, 0xFF	; 255
 978:	20 68       	ori	r18, 0x80	; 128
 97a:	b2 2e       	mov	r11, r18
 97c:	2a e0       	ldi	r18, 0x0A	; 10
 97e:	30 e0       	ldi	r19, 0x00	; 0
 980:	a4 01       	movw	r20, r8
 982:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__ultoa_invert>
 986:	a8 2e       	mov	r10, r24
 988:	a8 18       	sub	r10, r8
 98a:	44 c0       	rjmp	.+136    	; 0xa14 <vfprintf+0x290>
 98c:	85 37       	cpi	r24, 0x75	; 117
 98e:	29 f4       	brne	.+10     	; 0x99a <vfprintf+0x216>
 990:	2f 7e       	andi	r18, 0xEF	; 239
 992:	b2 2e       	mov	r11, r18
 994:	2a e0       	ldi	r18, 0x0A	; 10
 996:	30 e0       	ldi	r19, 0x00	; 0
 998:	25 c0       	rjmp	.+74     	; 0x9e4 <vfprintf+0x260>
 99a:	f2 2f       	mov	r31, r18
 99c:	f9 7f       	andi	r31, 0xF9	; 249
 99e:	bf 2e       	mov	r11, r31
 9a0:	8f 36       	cpi	r24, 0x6F	; 111
 9a2:	c1 f0       	breq	.+48     	; 0x9d4 <vfprintf+0x250>
 9a4:	18 f4       	brcc	.+6      	; 0x9ac <vfprintf+0x228>
 9a6:	88 35       	cpi	r24, 0x58	; 88
 9a8:	79 f0       	breq	.+30     	; 0x9c8 <vfprintf+0x244>
 9aa:	b4 c0       	rjmp	.+360    	; 0xb14 <vfprintf+0x390>
 9ac:	80 37       	cpi	r24, 0x70	; 112
 9ae:	19 f0       	breq	.+6      	; 0x9b6 <vfprintf+0x232>
 9b0:	88 37       	cpi	r24, 0x78	; 120
 9b2:	21 f0       	breq	.+8      	; 0x9bc <vfprintf+0x238>
 9b4:	af c0       	rjmp	.+350    	; 0xb14 <vfprintf+0x390>
 9b6:	2f 2f       	mov	r18, r31
 9b8:	20 61       	ori	r18, 0x10	; 16
 9ba:	b2 2e       	mov	r11, r18
 9bc:	b4 fe       	sbrs	r11, 4
 9be:	0d c0       	rjmp	.+26     	; 0x9da <vfprintf+0x256>
 9c0:	8b 2d       	mov	r24, r11
 9c2:	84 60       	ori	r24, 0x04	; 4
 9c4:	b8 2e       	mov	r11, r24
 9c6:	09 c0       	rjmp	.+18     	; 0x9da <vfprintf+0x256>
 9c8:	24 ff       	sbrs	r18, 4
 9ca:	0a c0       	rjmp	.+20     	; 0x9e0 <vfprintf+0x25c>
 9cc:	9f 2f       	mov	r25, r31
 9ce:	96 60       	ori	r25, 0x06	; 6
 9d0:	b9 2e       	mov	r11, r25
 9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <vfprintf+0x25c>
 9d4:	28 e0       	ldi	r18, 0x08	; 8
 9d6:	30 e0       	ldi	r19, 0x00	; 0
 9d8:	05 c0       	rjmp	.+10     	; 0x9e4 <vfprintf+0x260>
 9da:	20 e1       	ldi	r18, 0x10	; 16
 9dc:	30 e0       	ldi	r19, 0x00	; 0
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <vfprintf+0x260>
 9e0:	20 e1       	ldi	r18, 0x10	; 16
 9e2:	32 e0       	ldi	r19, 0x02	; 2
 9e4:	f8 01       	movw	r30, r16
 9e6:	b7 fe       	sbrs	r11, 7
 9e8:	07 c0       	rjmp	.+14     	; 0x9f8 <vfprintf+0x274>
 9ea:	60 81       	ld	r22, Z
 9ec:	71 81       	ldd	r23, Z+1	; 0x01
 9ee:	82 81       	ldd	r24, Z+2	; 0x02
 9f0:	93 81       	ldd	r25, Z+3	; 0x03
 9f2:	0c 5f       	subi	r16, 0xFC	; 252
 9f4:	1f 4f       	sbci	r17, 0xFF	; 255
 9f6:	06 c0       	rjmp	.+12     	; 0xa04 <vfprintf+0x280>
 9f8:	60 81       	ld	r22, Z
 9fa:	71 81       	ldd	r23, Z+1	; 0x01
 9fc:	80 e0       	ldi	r24, 0x00	; 0
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	0e 5f       	subi	r16, 0xFE	; 254
 a02:	1f 4f       	sbci	r17, 0xFF	; 255
 a04:	a4 01       	movw	r20, r8
 a06:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__ultoa_invert>
 a0a:	a8 2e       	mov	r10, r24
 a0c:	a8 18       	sub	r10, r8
 a0e:	fb 2d       	mov	r31, r11
 a10:	ff 77       	andi	r31, 0x7F	; 127
 a12:	bf 2e       	mov	r11, r31
 a14:	b6 fe       	sbrs	r11, 6
 a16:	0b c0       	rjmp	.+22     	; 0xa2e <vfprintf+0x2aa>
 a18:	2b 2d       	mov	r18, r11
 a1a:	2e 7f       	andi	r18, 0xFE	; 254
 a1c:	a5 14       	cp	r10, r5
 a1e:	50 f4       	brcc	.+20     	; 0xa34 <vfprintf+0x2b0>
 a20:	b4 fe       	sbrs	r11, 4
 a22:	0a c0       	rjmp	.+20     	; 0xa38 <vfprintf+0x2b4>
 a24:	b2 fc       	sbrc	r11, 2
 a26:	08 c0       	rjmp	.+16     	; 0xa38 <vfprintf+0x2b4>
 a28:	2b 2d       	mov	r18, r11
 a2a:	2e 7e       	andi	r18, 0xEE	; 238
 a2c:	05 c0       	rjmp	.+10     	; 0xa38 <vfprintf+0x2b4>
 a2e:	7a 2c       	mov	r7, r10
 a30:	2b 2d       	mov	r18, r11
 a32:	03 c0       	rjmp	.+6      	; 0xa3a <vfprintf+0x2b6>
 a34:	7a 2c       	mov	r7, r10
 a36:	01 c0       	rjmp	.+2      	; 0xa3a <vfprintf+0x2b6>
 a38:	75 2c       	mov	r7, r5
 a3a:	24 ff       	sbrs	r18, 4
 a3c:	0d c0       	rjmp	.+26     	; 0xa58 <vfprintf+0x2d4>
 a3e:	fe 01       	movw	r30, r28
 a40:	ea 0d       	add	r30, r10
 a42:	f1 1d       	adc	r31, r1
 a44:	80 81       	ld	r24, Z
 a46:	80 33       	cpi	r24, 0x30	; 48
 a48:	11 f4       	brne	.+4      	; 0xa4e <vfprintf+0x2ca>
 a4a:	29 7e       	andi	r18, 0xE9	; 233
 a4c:	09 c0       	rjmp	.+18     	; 0xa60 <vfprintf+0x2dc>
 a4e:	22 ff       	sbrs	r18, 2
 a50:	06 c0       	rjmp	.+12     	; 0xa5e <vfprintf+0x2da>
 a52:	73 94       	inc	r7
 a54:	73 94       	inc	r7
 a56:	04 c0       	rjmp	.+8      	; 0xa60 <vfprintf+0x2dc>
 a58:	82 2f       	mov	r24, r18
 a5a:	86 78       	andi	r24, 0x86	; 134
 a5c:	09 f0       	breq	.+2      	; 0xa60 <vfprintf+0x2dc>
 a5e:	73 94       	inc	r7
 a60:	23 fd       	sbrc	r18, 3
 a62:	13 c0       	rjmp	.+38     	; 0xa8a <vfprintf+0x306>
 a64:	20 ff       	sbrs	r18, 0
 a66:	06 c0       	rjmp	.+12     	; 0xa74 <vfprintf+0x2f0>
 a68:	5a 2c       	mov	r5, r10
 a6a:	73 14       	cp	r7, r3
 a6c:	18 f4       	brcc	.+6      	; 0xa74 <vfprintf+0x2f0>
 a6e:	53 0c       	add	r5, r3
 a70:	57 18       	sub	r5, r7
 a72:	73 2c       	mov	r7, r3
 a74:	73 14       	cp	r7, r3
 a76:	68 f4       	brcc	.+26     	; 0xa92 <vfprintf+0x30e>
 a78:	b7 01       	movw	r22, r14
 a7a:	80 e2       	ldi	r24, 0x20	; 32
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	2c 87       	std	Y+12, r18	; 0x0c
 a80:	0e 94 cd 05 	call	0xb9a	; 0xb9a <fputc>
 a84:	73 94       	inc	r7
 a86:	2c 85       	ldd	r18, Y+12	; 0x0c
 a88:	f5 cf       	rjmp	.-22     	; 0xa74 <vfprintf+0x2f0>
 a8a:	73 14       	cp	r7, r3
 a8c:	10 f4       	brcc	.+4      	; 0xa92 <vfprintf+0x30e>
 a8e:	37 18       	sub	r3, r7
 a90:	01 c0       	rjmp	.+2      	; 0xa94 <vfprintf+0x310>
 a92:	31 2c       	mov	r3, r1
 a94:	24 ff       	sbrs	r18, 4
 a96:	12 c0       	rjmp	.+36     	; 0xabc <vfprintf+0x338>
 a98:	b7 01       	movw	r22, r14
 a9a:	80 e3       	ldi	r24, 0x30	; 48
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	2c 87       	std	Y+12, r18	; 0x0c
 aa0:	0e 94 cd 05 	call	0xb9a	; 0xb9a <fputc>
 aa4:	2c 85       	ldd	r18, Y+12	; 0x0c
 aa6:	22 ff       	sbrs	r18, 2
 aa8:	17 c0       	rjmp	.+46     	; 0xad8 <vfprintf+0x354>
 aaa:	21 ff       	sbrs	r18, 1
 aac:	03 c0       	rjmp	.+6      	; 0xab4 <vfprintf+0x330>
 aae:	88 e5       	ldi	r24, 0x58	; 88
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	02 c0       	rjmp	.+4      	; 0xab8 <vfprintf+0x334>
 ab4:	88 e7       	ldi	r24, 0x78	; 120
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	b7 01       	movw	r22, r14
 aba:	0c c0       	rjmp	.+24     	; 0xad4 <vfprintf+0x350>
 abc:	82 2f       	mov	r24, r18
 abe:	86 78       	andi	r24, 0x86	; 134
 ac0:	59 f0       	breq	.+22     	; 0xad8 <vfprintf+0x354>
 ac2:	21 fd       	sbrc	r18, 1
 ac4:	02 c0       	rjmp	.+4      	; 0xaca <vfprintf+0x346>
 ac6:	80 e2       	ldi	r24, 0x20	; 32
 ac8:	01 c0       	rjmp	.+2      	; 0xacc <vfprintf+0x348>
 aca:	8b e2       	ldi	r24, 0x2B	; 43
 acc:	27 fd       	sbrc	r18, 7
 ace:	8d e2       	ldi	r24, 0x2D	; 45
 ad0:	b7 01       	movw	r22, r14
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	0e 94 cd 05 	call	0xb9a	; 0xb9a <fputc>
 ad8:	a5 14       	cp	r10, r5
 ada:	38 f4       	brcc	.+14     	; 0xaea <vfprintf+0x366>
 adc:	b7 01       	movw	r22, r14
 ade:	80 e3       	ldi	r24, 0x30	; 48
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <fputc>
 ae6:	5a 94       	dec	r5
 ae8:	f7 cf       	rjmp	.-18     	; 0xad8 <vfprintf+0x354>
 aea:	aa 94       	dec	r10
 aec:	f4 01       	movw	r30, r8
 aee:	ea 0d       	add	r30, r10
 af0:	f1 1d       	adc	r31, r1
 af2:	80 81       	ld	r24, Z
 af4:	b7 01       	movw	r22, r14
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <fputc>
 afc:	a1 10       	cpse	r10, r1
 afe:	f5 cf       	rjmp	.-22     	; 0xaea <vfprintf+0x366>
 b00:	33 20       	and	r3, r3
 b02:	09 f4       	brne	.+2      	; 0xb06 <vfprintf+0x382>
 b04:	51 ce       	rjmp	.-862    	; 0x7a8 <vfprintf+0x24>
 b06:	b7 01       	movw	r22, r14
 b08:	80 e2       	ldi	r24, 0x20	; 32
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <fputc>
 b10:	3a 94       	dec	r3
 b12:	f6 cf       	rjmp	.-20     	; 0xb00 <vfprintf+0x37c>
 b14:	f7 01       	movw	r30, r14
 b16:	86 81       	ldd	r24, Z+6	; 0x06
 b18:	97 81       	ldd	r25, Z+7	; 0x07
 b1a:	02 c0       	rjmp	.+4      	; 0xb20 <vfprintf+0x39c>
 b1c:	8f ef       	ldi	r24, 0xFF	; 255
 b1e:	9f ef       	ldi	r25, 0xFF	; 255
 b20:	2c 96       	adiw	r28, 0x0c	; 12
 b22:	e2 e1       	ldi	r30, 0x12	; 18
 b24:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <__epilogue_restores__>

00000b28 <calloc>:
 b28:	0f 93       	push	r16
 b2a:	1f 93       	push	r17
 b2c:	cf 93       	push	r28
 b2e:	df 93       	push	r29
 b30:	86 9f       	mul	r24, r22
 b32:	80 01       	movw	r16, r0
 b34:	87 9f       	mul	r24, r23
 b36:	10 0d       	add	r17, r0
 b38:	96 9f       	mul	r25, r22
 b3a:	10 0d       	add	r17, r0
 b3c:	11 24       	eor	r1, r1
 b3e:	c8 01       	movw	r24, r16
 b40:	0e 94 3c 02 	call	0x478	; 0x478 <malloc>
 b44:	ec 01       	movw	r28, r24
 b46:	00 97       	sbiw	r24, 0x00	; 0
 b48:	29 f0       	breq	.+10     	; 0xb54 <calloc+0x2c>
 b4a:	a8 01       	movw	r20, r16
 b4c:	60 e0       	ldi	r22, 0x00	; 0
 b4e:	70 e0       	ldi	r23, 0x00	; 0
 b50:	0e 94 bb 05 	call	0xb76	; 0xb76 <memset>
 b54:	ce 01       	movw	r24, r28
 b56:	df 91       	pop	r29
 b58:	cf 91       	pop	r28
 b5a:	1f 91       	pop	r17
 b5c:	0f 91       	pop	r16
 b5e:	08 95       	ret

00000b60 <strnlen_P>:
 b60:	fc 01       	movw	r30, r24
 b62:	05 90       	lpm	r0, Z+
 b64:	61 50       	subi	r22, 0x01	; 1
 b66:	70 40       	sbci	r23, 0x00	; 0
 b68:	01 10       	cpse	r0, r1
 b6a:	d8 f7       	brcc	.-10     	; 0xb62 <strnlen_P+0x2>
 b6c:	80 95       	com	r24
 b6e:	90 95       	com	r25
 b70:	8e 0f       	add	r24, r30
 b72:	9f 1f       	adc	r25, r31
 b74:	08 95       	ret

00000b76 <memset>:
 b76:	dc 01       	movw	r26, r24
 b78:	01 c0       	rjmp	.+2      	; 0xb7c <memset+0x6>
 b7a:	6d 93       	st	X+, r22
 b7c:	41 50       	subi	r20, 0x01	; 1
 b7e:	50 40       	sbci	r21, 0x00	; 0
 b80:	e0 f7       	brcc	.-8      	; 0xb7a <memset+0x4>
 b82:	08 95       	ret

00000b84 <strnlen>:
 b84:	fc 01       	movw	r30, r24
 b86:	61 50       	subi	r22, 0x01	; 1
 b88:	70 40       	sbci	r23, 0x00	; 0
 b8a:	01 90       	ld	r0, Z+
 b8c:	01 10       	cpse	r0, r1
 b8e:	d8 f7       	brcc	.-10     	; 0xb86 <strnlen+0x2>
 b90:	80 95       	com	r24
 b92:	90 95       	com	r25
 b94:	8e 0f       	add	r24, r30
 b96:	9f 1f       	adc	r25, r31
 b98:	08 95       	ret

00000b9a <fputc>:
 b9a:	0f 93       	push	r16
 b9c:	1f 93       	push	r17
 b9e:	cf 93       	push	r28
 ba0:	df 93       	push	r29
 ba2:	18 2f       	mov	r17, r24
 ba4:	09 2f       	mov	r16, r25
 ba6:	eb 01       	movw	r28, r22
 ba8:	8b 81       	ldd	r24, Y+3	; 0x03
 baa:	81 fd       	sbrc	r24, 1
 bac:	03 c0       	rjmp	.+6      	; 0xbb4 <fputc+0x1a>
 bae:	8f ef       	ldi	r24, 0xFF	; 255
 bb0:	9f ef       	ldi	r25, 0xFF	; 255
 bb2:	20 c0       	rjmp	.+64     	; 0xbf4 <fputc+0x5a>
 bb4:	82 ff       	sbrs	r24, 2
 bb6:	10 c0       	rjmp	.+32     	; 0xbd8 <fputc+0x3e>
 bb8:	4e 81       	ldd	r20, Y+6	; 0x06
 bba:	5f 81       	ldd	r21, Y+7	; 0x07
 bbc:	2c 81       	ldd	r18, Y+4	; 0x04
 bbe:	3d 81       	ldd	r19, Y+5	; 0x05
 bc0:	42 17       	cp	r20, r18
 bc2:	53 07       	cpc	r21, r19
 bc4:	7c f4       	brge	.+30     	; 0xbe4 <fputc+0x4a>
 bc6:	e8 81       	ld	r30, Y
 bc8:	f9 81       	ldd	r31, Y+1	; 0x01
 bca:	9f 01       	movw	r18, r30
 bcc:	2f 5f       	subi	r18, 0xFF	; 255
 bce:	3f 4f       	sbci	r19, 0xFF	; 255
 bd0:	39 83       	std	Y+1, r19	; 0x01
 bd2:	28 83       	st	Y, r18
 bd4:	10 83       	st	Z, r17
 bd6:	06 c0       	rjmp	.+12     	; 0xbe4 <fputc+0x4a>
 bd8:	e8 85       	ldd	r30, Y+8	; 0x08
 bda:	f9 85       	ldd	r31, Y+9	; 0x09
 bdc:	81 2f       	mov	r24, r17
 bde:	09 95       	icall
 be0:	89 2b       	or	r24, r25
 be2:	29 f7       	brne	.-54     	; 0xbae <fputc+0x14>
 be4:	2e 81       	ldd	r18, Y+6	; 0x06
 be6:	3f 81       	ldd	r19, Y+7	; 0x07
 be8:	2f 5f       	subi	r18, 0xFF	; 255
 bea:	3f 4f       	sbci	r19, 0xFF	; 255
 bec:	3f 83       	std	Y+7, r19	; 0x07
 bee:	2e 83       	std	Y+6, r18	; 0x06
 bf0:	81 2f       	mov	r24, r17
 bf2:	90 2f       	mov	r25, r16
 bf4:	df 91       	pop	r29
 bf6:	cf 91       	pop	r28
 bf8:	1f 91       	pop	r17
 bfa:	0f 91       	pop	r16
 bfc:	08 95       	ret

00000bfe <__ultoa_invert>:
 bfe:	fa 01       	movw	r30, r20
 c00:	aa 27       	eor	r26, r26
 c02:	28 30       	cpi	r18, 0x08	; 8
 c04:	51 f1       	breq	.+84     	; 0xc5a <__ultoa_invert+0x5c>
 c06:	20 31       	cpi	r18, 0x10	; 16
 c08:	81 f1       	breq	.+96     	; 0xc6a <__ultoa_invert+0x6c>
 c0a:	e8 94       	clt
 c0c:	6f 93       	push	r22
 c0e:	6e 7f       	andi	r22, 0xFE	; 254
 c10:	6e 5f       	subi	r22, 0xFE	; 254
 c12:	7f 4f       	sbci	r23, 0xFF	; 255
 c14:	8f 4f       	sbci	r24, 0xFF	; 255
 c16:	9f 4f       	sbci	r25, 0xFF	; 255
 c18:	af 4f       	sbci	r26, 0xFF	; 255
 c1a:	b1 e0       	ldi	r27, 0x01	; 1
 c1c:	3e d0       	rcall	.+124    	; 0xc9a <__ultoa_invert+0x9c>
 c1e:	b4 e0       	ldi	r27, 0x04	; 4
 c20:	3c d0       	rcall	.+120    	; 0xc9a <__ultoa_invert+0x9c>
 c22:	67 0f       	add	r22, r23
 c24:	78 1f       	adc	r23, r24
 c26:	89 1f       	adc	r24, r25
 c28:	9a 1f       	adc	r25, r26
 c2a:	a1 1d       	adc	r26, r1
 c2c:	68 0f       	add	r22, r24
 c2e:	79 1f       	adc	r23, r25
 c30:	8a 1f       	adc	r24, r26
 c32:	91 1d       	adc	r25, r1
 c34:	a1 1d       	adc	r26, r1
 c36:	6a 0f       	add	r22, r26
 c38:	71 1d       	adc	r23, r1
 c3a:	81 1d       	adc	r24, r1
 c3c:	91 1d       	adc	r25, r1
 c3e:	a1 1d       	adc	r26, r1
 c40:	20 d0       	rcall	.+64     	; 0xc82 <__ultoa_invert+0x84>
 c42:	09 f4       	brne	.+2      	; 0xc46 <__ultoa_invert+0x48>
 c44:	68 94       	set
 c46:	3f 91       	pop	r19
 c48:	2a e0       	ldi	r18, 0x0A	; 10
 c4a:	26 9f       	mul	r18, r22
 c4c:	11 24       	eor	r1, r1
 c4e:	30 19       	sub	r19, r0
 c50:	30 5d       	subi	r19, 0xD0	; 208
 c52:	31 93       	st	Z+, r19
 c54:	de f6       	brtc	.-74     	; 0xc0c <__ultoa_invert+0xe>
 c56:	cf 01       	movw	r24, r30
 c58:	08 95       	ret
 c5a:	46 2f       	mov	r20, r22
 c5c:	47 70       	andi	r20, 0x07	; 7
 c5e:	40 5d       	subi	r20, 0xD0	; 208
 c60:	41 93       	st	Z+, r20
 c62:	b3 e0       	ldi	r27, 0x03	; 3
 c64:	0f d0       	rcall	.+30     	; 0xc84 <__ultoa_invert+0x86>
 c66:	c9 f7       	brne	.-14     	; 0xc5a <__ultoa_invert+0x5c>
 c68:	f6 cf       	rjmp	.-20     	; 0xc56 <__ultoa_invert+0x58>
 c6a:	46 2f       	mov	r20, r22
 c6c:	4f 70       	andi	r20, 0x0F	; 15
 c6e:	40 5d       	subi	r20, 0xD0	; 208
 c70:	4a 33       	cpi	r20, 0x3A	; 58
 c72:	18 f0       	brcs	.+6      	; 0xc7a <__ultoa_invert+0x7c>
 c74:	49 5d       	subi	r20, 0xD9	; 217
 c76:	31 fd       	sbrc	r19, 1
 c78:	40 52       	subi	r20, 0x20	; 32
 c7a:	41 93       	st	Z+, r20
 c7c:	02 d0       	rcall	.+4      	; 0xc82 <__ultoa_invert+0x84>
 c7e:	a9 f7       	brne	.-22     	; 0xc6a <__ultoa_invert+0x6c>
 c80:	ea cf       	rjmp	.-44     	; 0xc56 <__ultoa_invert+0x58>
 c82:	b4 e0       	ldi	r27, 0x04	; 4
 c84:	a6 95       	lsr	r26
 c86:	97 95       	ror	r25
 c88:	87 95       	ror	r24
 c8a:	77 95       	ror	r23
 c8c:	67 95       	ror	r22
 c8e:	ba 95       	dec	r27
 c90:	c9 f7       	brne	.-14     	; 0xc84 <__ultoa_invert+0x86>
 c92:	00 97       	sbiw	r24, 0x00	; 0
 c94:	61 05       	cpc	r22, r1
 c96:	71 05       	cpc	r23, r1
 c98:	08 95       	ret
 c9a:	9b 01       	movw	r18, r22
 c9c:	ac 01       	movw	r20, r24
 c9e:	0a 2e       	mov	r0, r26
 ca0:	06 94       	lsr	r0
 ca2:	57 95       	ror	r21
 ca4:	47 95       	ror	r20
 ca6:	37 95       	ror	r19
 ca8:	27 95       	ror	r18
 caa:	ba 95       	dec	r27
 cac:	c9 f7       	brne	.-14     	; 0xca0 <__ultoa_invert+0xa2>
 cae:	62 0f       	add	r22, r18
 cb0:	73 1f       	adc	r23, r19
 cb2:	84 1f       	adc	r24, r20
 cb4:	95 1f       	adc	r25, r21
 cb6:	a0 1d       	adc	r26, r0
 cb8:	08 95       	ret

00000cba <__prologue_saves__>:
 cba:	2f 92       	push	r2
 cbc:	3f 92       	push	r3
 cbe:	4f 92       	push	r4
 cc0:	5f 92       	push	r5
 cc2:	6f 92       	push	r6
 cc4:	7f 92       	push	r7
 cc6:	8f 92       	push	r8
 cc8:	9f 92       	push	r9
 cca:	af 92       	push	r10
 ccc:	bf 92       	push	r11
 cce:	cf 92       	push	r12
 cd0:	df 92       	push	r13
 cd2:	ef 92       	push	r14
 cd4:	ff 92       	push	r15
 cd6:	0f 93       	push	r16
 cd8:	1f 93       	push	r17
 cda:	cf 93       	push	r28
 cdc:	df 93       	push	r29
 cde:	cd b7       	in	r28, 0x3d	; 61
 ce0:	de b7       	in	r29, 0x3e	; 62
 ce2:	ca 1b       	sub	r28, r26
 ce4:	db 0b       	sbc	r29, r27
 ce6:	0f b6       	in	r0, 0x3f	; 63
 ce8:	f8 94       	cli
 cea:	de bf       	out	0x3e, r29	; 62
 cec:	0f be       	out	0x3f, r0	; 63
 cee:	cd bf       	out	0x3d, r28	; 61
 cf0:	09 94       	ijmp

00000cf2 <__epilogue_restores__>:
 cf2:	2a 88       	ldd	r2, Y+18	; 0x12
 cf4:	39 88       	ldd	r3, Y+17	; 0x11
 cf6:	48 88       	ldd	r4, Y+16	; 0x10
 cf8:	5f 84       	ldd	r5, Y+15	; 0x0f
 cfa:	6e 84       	ldd	r6, Y+14	; 0x0e
 cfc:	7d 84       	ldd	r7, Y+13	; 0x0d
 cfe:	8c 84       	ldd	r8, Y+12	; 0x0c
 d00:	9b 84       	ldd	r9, Y+11	; 0x0b
 d02:	aa 84       	ldd	r10, Y+10	; 0x0a
 d04:	b9 84       	ldd	r11, Y+9	; 0x09
 d06:	c8 84       	ldd	r12, Y+8	; 0x08
 d08:	df 80       	ldd	r13, Y+7	; 0x07
 d0a:	ee 80       	ldd	r14, Y+6	; 0x06
 d0c:	fd 80       	ldd	r15, Y+5	; 0x05
 d0e:	0c 81       	ldd	r16, Y+4	; 0x04
 d10:	1b 81       	ldd	r17, Y+3	; 0x03
 d12:	aa 81       	ldd	r26, Y+2	; 0x02
 d14:	b9 81       	ldd	r27, Y+1	; 0x01
 d16:	ce 0f       	add	r28, r30
 d18:	d1 1d       	adc	r29, r1
 d1a:	0f b6       	in	r0, 0x3f	; 63
 d1c:	f8 94       	cli
 d1e:	de bf       	out	0x3e, r29	; 62
 d20:	0f be       	out	0x3f, r0	; 63
 d22:	cd bf       	out	0x3d, r28	; 61
 d24:	ed 01       	movw	r28, r26
 d26:	08 95       	ret

00000d28 <_exit>:
 d28:	f8 94       	cli

00000d2a <__stop_program>:
 d2a:	ff cf       	rjmp	.-2      	; 0xd2a <__stop_program>
