
PingPongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000c32  00000cc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080011c  0080011c  00000ce2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ce2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000198  00000000  00000000  00000d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018fa  00000000  00000000  00000ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000965  00000000  00000000  000027d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009ba  00000000  00000000  00003135  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003c8  00000000  00000000  00003af0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e3  00000000  00000000  00003eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d31  00000000  00000000  0000439b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  000050cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 e3       	ldi	r30, 0x32	; 50
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ac 31       	cpi	r26, 0x1C	; 28
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	ac e1       	ldi	r26, 0x1C	; 28
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 32       	cpi	r26, 0x28	; 40
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 3f 01 	call	0x27e	; 0x27e <main>
  a6:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <read_adc>:

uint8_t read_adc(int channel)
{
	volatile uint8_t *ADC = (uint8_t*)0x1400;
	uint8_t mux_adress = channel;
	ADC[0] = mux_adress;
  ae:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	86 e6       	ldi	r24, 0x66	; 102
  b4:	92 e0       	ldi	r25, 0x02	; 2
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <read_adc+0x8>
  ba:	00 00       	nop
	_delay_us(500);
	uint8_t val = ADC[0];
  bc:	80 91 00 14 	lds	r24, 0x1400
	return val;
  c0:	08 95       	ret

000000c2 <CAN_init>:

void CAN_init(void)
{
		/*SPI_MasterInit();
		SPI_SlaveInit();*/
		MCP_reset();
  c2:	0e 94 49 01 	call	0x292	; 0x292 <MCP_reset>

		MCP_write(MCP_CANCTRL, MODE_CONFIG);		
  c6:	60 e8       	ldi	r22, 0x80	; 128
  c8:	8f e0       	ldi	r24, 0x0F	; 15
  ca:	0e 94 58 01 	call	0x2b0	; 0x2b0 <MCP_write>

		/*MCP_write(MCP_CNF1, 0x20); // Write config 1
		MCP_write(MCP_CNF2, 0x92); // Write config 2
		MCP_write(MCP_CNF3, 0xC2); // Write config 3*/
		
		MCP_write(MCP_CANINTE, 0x03);	//
  ce:	63 e0       	ldi	r22, 0x03	; 3
  d0:	8b e2       	ldi	r24, 0x2B	; 43
  d2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <MCP_write>
		MCP_write(MCP_CANINTF, 0x00);	//
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	8c e2       	ldi	r24, 0x2C	; 44
  da:	0e 94 58 01 	call	0x2b0	; 0x2b0 <MCP_write>
		MCP_write(MCP_EFLG, 0x00);		//
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	8d e2       	ldi	r24, 0x2D	; 45
  e2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <MCP_write>
		
		MCP_write(0x0C, 0x00);			 // Disable all interrupts
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	8c e0       	ldi	r24, 0x0C	; 12
  ea:	0e 94 58 01 	call	0x2b0	; 0x2b0 <MCP_write>
		MCP_write(0x0D, 0x00);			// Clear TXRTSCTRL
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	8d e0       	ldi	r24, 0x0D	; 13
  f2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <MCP_write>
		
		
		MCP_write(MCP_RXB0CTRL, 0x60);		// Receive buffer 0 control (turn mask/filters off, receive any message) 
  f6:	60 e6       	ldi	r22, 0x60	; 96
  f8:	80 e6       	ldi	r24, 0x60	; 96
  fa:	0e 94 58 01 	call	0x2b0	; 0x2b0 <MCP_write>
		MCP_write(MCP_RXB1CTRL, 0x60);		// Receive buffer 1 control (turn mask/filters off, receive any message)
  fe:	60 e6       	ldi	r22, 0x60	; 96
 100:	80 e7       	ldi	r24, 0x70	; 112
 102:	0e 94 58 01 	call	0x2b0	; 0x2b0 <MCP_write>

		//MCP_write(MCP_CANCTRL, 0x44);		// Enable can controller
		MCP_bit_mod(MCP_CANCTRL,MODE_MASK,MODE_NORMAL);
 106:	40 e0       	ldi	r20, 0x00	; 0
 108:	60 ee       	ldi	r22, 0xE0	; 224
 10a:	8f e0       	ldi	r24, 0x0F	; 15
 10c:	0e 94 6f 01 	call	0x2de	; 0x2de <MCP_bit_mod>
 110:	08 95       	ret

00000112 <CAN_message_send>:

	
}

void CAN_message_send(msg can_tx)
{
 112:	cf 92       	push	r12
 114:	df 92       	push	r13
 116:	ef 92       	push	r14
 118:	ff 92       	push	r15
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	2b 97       	sbiw	r28, 0x0b	; 11
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	f8 94       	cli
 12c:	de bf       	out	0x3e, r29	; 62
 12e:	0f be       	out	0x3f, r0	; 63
 130:	cd bf       	out	0x3d, r28	; 61
 132:	e9 82       	std	Y+1, r14	; 0x01
 134:	fa 82       	std	Y+2, r15	; 0x02
 136:	0b 83       	std	Y+3, r16	; 0x03
 138:	1c 83       	std	Y+4, r17	; 0x04
 13a:	2d 83       	std	Y+5, r18	; 0x05
 13c:	3e 83       	std	Y+6, r19	; 0x06
 13e:	4f 83       	std	Y+7, r20	; 0x07
 140:	58 87       	std	Y+8, r21	; 0x08
 142:	69 87       	std	Y+9, r22	; 0x09
 144:	7a 87       	std	Y+10, r23	; 0x0a
 146:	8b 87       	std	Y+11, r24	; 0x0b
	//MCP_write(MCP_TXB0CTRL, 0x03);				
	printf("\nCan ID sent: %02x \n", can_tx.id);
 148:	ff 92       	push	r15
 14a:	ef 92       	push	r14
 14c:	86 e0       	ldi	r24, 0x06	; 6
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	9f 93       	push	r25
 152:	8f 93       	push	r24
 154:	0e 94 0a 02 	call	0x414	; 0x414 <printf>

	MCP_write(MCP_TXB0SIDH, can_tx.id);
 158:	6e 2d       	mov	r22, r14
 15a:	81 e3       	ldi	r24, 0x31	; 49
 15c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <MCP_write>
	MCP_write(MCP_TXB0SIDH, can_tx.id);
 160:	6e 2d       	mov	r22, r14
 162:	81 e3       	ldi	r24, 0x31	; 49
 164:	0e 94 58 01 	call	0x2b0	; 0x2b0 <MCP_write>

	//MCP_write(MCP_TXB0SIDL, can_tx.id);

	MCP_write(MCP_TXB0DLC, (can_tx.length));
 168:	60 2f       	mov	r22, r16
 16a:	85 e3       	ldi	r24, 0x35	; 53
 16c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <MCP_write>
	for(int i = 0; i < can_tx.length; i++)
 170:	c0 2e       	mov	r12, r16
 172:	d1 2c       	mov	r13, r1
 174:	0f 90       	pop	r0
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	1c 14       	cp	r1, r12
 17e:	1d 04       	cpc	r1, r13
 180:	94 f4       	brge	.+36     	; 0x1a6 <CAN_message_send+0x94>
 182:	7e 01       	movw	r14, r28
 184:	84 e0       	ldi	r24, 0x04	; 4
 186:	e8 0e       	add	r14, r24
 188:	f1 1c       	adc	r15, r1
 18a:	00 e0       	ldi	r16, 0x00	; 0
 18c:	10 e0       	ldi	r17, 0x00	; 0
	{
		MCP_write(MCP_TXB0D0 + i, can_tx.data[i]);
 18e:	f7 01       	movw	r30, r14
 190:	61 91       	ld	r22, Z+
 192:	7f 01       	movw	r14, r30
 194:	86 e3       	ldi	r24, 0x36	; 54
 196:	80 0f       	add	r24, r16
 198:	0e 94 58 01 	call	0x2b0	; 0x2b0 <MCP_write>
	MCP_write(MCP_TXB0SIDH, can_tx.id);

	//MCP_write(MCP_TXB0SIDL, can_tx.id);

	MCP_write(MCP_TXB0DLC, (can_tx.length));
	for(int i = 0; i < can_tx.length; i++)
 19c:	0f 5f       	subi	r16, 0xFF	; 255
 19e:	1f 4f       	sbci	r17, 0xFF	; 255
 1a0:	0c 15       	cp	r16, r12
 1a2:	1d 05       	cpc	r17, r13
 1a4:	a4 f3       	brlt	.-24     	; 0x18e <CAN_message_send+0x7c>
	{
		MCP_write(MCP_TXB0D0 + i, can_tx.data[i]);
	}
	MCP_rts(MCP_RTS_TX0);
 1a6:	81 e8       	ldi	r24, 0x81	; 129
 1a8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_rts>
}
 1ac:	2b 96       	adiw	r28, 0x0b	; 11
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	de bf       	out	0x3e, r29	; 62
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	cd bf       	out	0x3d, r28	; 61
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	ff 90       	pop	r15
 1c2:	ef 90       	pop	r14
 1c4:	df 90       	pop	r13
 1c6:	cf 90       	pop	r12
 1c8:	08 95       	ret

000001ca <test_CAN_joystick>:
				sub_menu = 0;
				break;
			}
		for (k = 0; k < 3; k++)
		{
			for (j = 0; j < 11; j++)
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	2b 97       	sbiw	r28, 0x0b	; 11
	}
	
}

void oled_menu()
{
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	de bf       	out	0x3e, r29	; 62
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	cd bf       	out	0x3d, r28	; 61
 1de:	0e 94 89 01 	call	0x312	; 0x312 <ram_init>
 1e2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MCP_init>
 1e6:	0e 94 61 00 	call	0xc2	; 0xc2 <CAN_init>
						oled_set_column(i+(j*5));
						write_d(pgm_read_byte(&font5[fotball[k][j] - ' '][i]));
					}
				}
			}
			oled_set_page(k+1);
 1ea:	87 b3       	in	r24, 0x17	; 23
 1ec:	88 7f       	andi	r24, 0xF8	; 248
 1ee:	87 bb       	out	0x17, r24	; 23
 1f0:	0f 2e       	mov	r0, r31
 1f2:	f0 e7       	ldi	r31, 0x70	; 112
 1f4:	af 2e       	mov	r10, r31
 1f6:	f0 2d       	mov	r31, r0
 1f8:	71 2c       	mov	r7, r1
 1fa:	0f 2e       	mov	r0, r31
		if(x_volt < 60)
			{
				sub_menu = 0;
				break;
			}
		for (k = 0; k < 3; k++)
 1fc:	f7 e0       	ldi	r31, 0x07	; 7
 1fe:	bf 2e       	mov	r11, r31
 200:	f0 2d       	mov	r31, r0
 202:	88 24       	eor	r8, r8
 204:	83 94       	inc	r8
 206:	85 e0       	ldi	r24, 0x05	; 5
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 20e:	18 2f       	mov	r17, r24
	}
	
}

void oled_menu()
{
 210:	84 e0       	ldi	r24, 0x04	; 4
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 218:	c8 2e       	mov	r12, r24
 21a:	86 e0       	ldi	r24, 0x06	; 6
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 222:	d8 2e       	mov	r13, r24
 224:	87 e0       	ldi	r24, 0x07	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 22c:	46 b3       	in	r20, 0x16	; 22
 22e:	56 b3       	in	r21, 0x16	; 22
 230:	96 b2       	in	r9, 0x16	; 22
 232:	92 fa       	bst	r9, 2
 234:	99 24       	eor	r9, r9
 236:	90 f8       	bld	r9, 0
			
	int count_menu = 4;
	int select_menu = 1;
	int sub_menu = 0;
	while(1){
	while(sub_menu == 1)
 238:	ea 2c       	mov	r14, r10
 23a:	a9 82       	std	Y+1, r10	; 0x01
 23c:	7a 82       	std	Y+2, r7	; 0x02
 23e:	bb 82       	std	Y+3, r11	; 0x03
 240:	1c 83       	std	Y+4, r17	; 0x04
			oled_set_page(k+1);
		}
		_delay_ms(delay);
	}
	
	while (sub_menu == 0)
 242:	cd 82       	std	Y+5, r12	; 0x05
 244:	30 2f       	mov	r19, r16
 246:	38 25       	eor	r19, r8
	{
		int delay = 500; //delay in milliseconds
		oled_set_column(0);
 248:	3e 83       	std	Y+6, r19	; 0x06
 24a:	41 70       	andi	r20, 0x01	; 1
 24c:	4f 83       	std	Y+7, r20	; 0x07
 24e:	56 95       	lsr	r21
 250:	51 70       	andi	r21, 0x01	; 1
 252:	58 87       	std	Y+8, r21	; 0x08
 254:	89 87       	std	Y+9, r24	; 0x09
 256:	da 86       	std	Y+10, r13	; 0x0a
 258:	f7 2c       	mov	r15, r7
 25a:	0b 2d       	mov	r16, r11
 25c:	2c 2d       	mov	r18, r12
 25e:	68 2f       	mov	r22, r24
		oled_set_page(0);
 260:	7d 2d       	mov	r23, r13
 262:	8b 85       	ldd	r24, Y+11	; 0x0b
 264:	0e 94 89 00 	call	0x112	; 0x112 <CAN_message_send>
 268:	2f ef       	ldi	r18, 0xFF	; 255
 26a:	8f e7       	ldi	r24, 0x7F	; 127
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <test_CAN_joystick+0xa4>
 276:	00 c0       	rjmp	.+0      	; 0x278 <test_CAN_joystick+0xae>
		int i,j,k;
		
		unsigned int x_volt = read_adc(ADC_CHANNEL_JOY_X);
 278:	00 c0       	rjmp	.+0      	; 0x27a <test_CAN_joystick+0xb0>
 27a:	09 2d       	mov	r16, r9
 27c:	c4 cf       	rjmp	.-120    	; 0x206 <test_CAN_joystick+0x3c>

0000027e <main>:
 27e:	8f e1       	ldi	r24, 0x1F	; 31
 280:	90 e0       	ldi	r25, 0x00	; 0
		unsigned int y_volt = read_adc(ADC_CHANNEL_JOY_Y);
 282:	0e 94 b0 01 	call	0x360	; 0x360 <USART_Init>
 286:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MCP_init>
 28a:	0e 94 61 00 	call	0xc2	; 0xc2 <CAN_init>
		//printf("%d %d\n", x_volt, y_volt);
		
		if (y_volt < 125 && select_menu < count_menu)
 28e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <test_CAN_joystick>

00000292 <MCP_reset>:
	return 0;
}

int MCP_reset(void)
{
	PORTB &= ~(1 << SS);
 292:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(MCP_RESET);
 294:	80 ec       	ldi	r24, 0xC0	; 192
 296:	0e 94 a4 01 	call	0x348	; 0x348 <SPI_MasterTransmit>
	
	PORTB |= (1 << SS);
 29a:	c4 9a       	sbi	0x18, 4	; 24
	
	return 0;
}
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	08 95       	ret

000002a2 <MCP_init>:
#include "SPI.h"
#include "MCP2515.h"

int MCP_init(void)
{
	SPI_MasterInit();
 2a2:	0e 94 9c 01 	call	0x338	; 0x338 <SPI_MasterInit>
	MCP_reset();
 2a6:	0e 94 49 01 	call	0x292	; 0x292 <MCP_reset>
	
	return 0;
}
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	08 95       	ret

000002b0 <MCP_write>:
	return data;

}

void MCP_write(char address, char data)
{
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	d8 2f       	mov	r29, r24
 2b6:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << SS); 
 2b8:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(MCP_WRITE);
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	0e 94 a4 01 	call	0x348	; 0x348 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
 2c0:	8d 2f       	mov	r24, r29
 2c2:	0e 94 a4 01 	call	0x348	; 0x348 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
 2c6:	8c 2f       	mov	r24, r28
 2c8:	0e 94 a4 01 	call	0x348	; 0x348 <SPI_MasterTransmit>
	
	PORTB |= (1 << SS);
 2cc:	c4 9a       	sbi	0x18, 4	; 24
}
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <MCP_rts>:

void MCP_rts(char rts)
{
	PORTB &= ~(1 << SS);
 2d4:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(rts);
 2d6:	0e 94 a4 01 	call	0x348	; 0x348 <SPI_MasterTransmit>
	
	PORTB |= (1 << SS);
 2da:	c4 9a       	sbi	0x18, 4	; 24
 2dc:	08 95       	ret

000002de <MCP_bit_mod>:
	
	return status;
}

void MCP_bit_mod(char address, char mask, char data)
{
 2de:	1f 93       	push	r17
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	18 2f       	mov	r17, r24
 2e6:	d6 2f       	mov	r29, r22
 2e8:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << SS);
 2ea:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(MCP_BITMOD);
 2ec:	85 e0       	ldi	r24, 0x05	; 5
 2ee:	0e 94 a4 01 	call	0x348	; 0x348 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
 2f2:	81 2f       	mov	r24, r17
 2f4:	0e 94 a4 01 	call	0x348	; 0x348 <SPI_MasterTransmit>
	SPI_MasterTransmit(mask);
 2f8:	8d 2f       	mov	r24, r29
 2fa:	0e 94 a4 01 	call	0x348	; 0x348 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
 2fe:	8c 2f       	mov	r24, r28
 300:	0e 94 a4 01 	call	0x348	; 0x348 <SPI_MasterTransmit>
	
	PORTB |= ~(1 << SS);
 304:	88 b3       	in	r24, 0x18	; 24
 306:	8f 6e       	ori	r24, 0xEF	; 239
 308:	88 bb       	out	0x18, r24	; 24
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	08 95       	ret

00000312 <ram_init>:
#include "define.h"

void ram_init(void)
{
	bit_set(MCUCR, SRE);
 312:	85 b7       	in	r24, 0x35	; 53
 314:	80 68       	ori	r24, 0x80	; 128
 316:	85 bf       	out	0x35, r24	; 53
	
	bit_set(SFIOR, XMM2);
 318:	80 b7       	in	r24, 0x30	; 48
 31a:	80 62       	ori	r24, 0x20	; 32
 31c:	80 bf       	out	0x30, r24	; 48
	bit_clear(SFIOR, XMM1);
 31e:	80 b7       	in	r24, 0x30	; 48
 320:	8f 7e       	andi	r24, 0xEF	; 239
 322:	80 bf       	out	0x30, r24	; 48
	bit_clear(SFIOR, XMM0);
 324:	80 b7       	in	r24, 0x30	; 48
 326:	87 7f       	andi	r24, 0xF7	; 247
 328:	80 bf       	out	0x30, r24	; 48

	bit_set(MCUCR, SRW11);
 32a:	85 b7       	in	r24, 0x35	; 53
 32c:	82 60       	ori	r24, 0x02	; 2
 32e:	85 bf       	out	0x35, r24	; 53
	bit_clear(EMCUCR, SRW10);	
 330:	86 b7       	in	r24, 0x36	; 54
 332:	8f 7b       	andi	r24, 0xBF	; 191
 334:	86 bf       	out	0x36, r24	; 54
 336:	08 95       	ret

00000338 <SPI_MasterInit>:
#define SCK PB7


void SPI_MasterInit(void)
{
	DDRB |= (1 << MOSI) | (1 << SS) | (1 << SCK);
 338:	87 b3       	in	r24, 0x17	; 23
 33a:	80 6b       	ori	r24, 0xB0	; 176
 33c:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << MISO);
 33e:	be 98       	cbi	0x17, 6	; 23
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 340:	8d b1       	in	r24, 0x0d	; 13
 342:	81 65       	ori	r24, 0x51	; 81
 344:	8d b9       	out	0x0d, r24	; 13
 346:	08 95       	ret

00000348 <SPI_MasterTransmit>:
}


void SPI_MasterTransmit(char cdata)
{
	SPDR = cdata;
 348:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
 34a:	77 9b       	sbis	0x0e, 7	; 14
 34c:	fe cf       	rjmp	.-4      	; 0x34a <SPI_MasterTransmit+0x2>
}
 34e:	08 95       	ret

00000350 <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !(UCSR0A & (1 << UDRE0)) );
 350:	5d 9b       	sbis	0x0b, 5	; 11
 352:	fe cf       	rjmp	.-4      	; 0x350 <USART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
 354:	8c b9       	out	0x0c, r24	; 12
 356:	08 95       	ret

00000358 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1 << RXC0)) );
 358:	5f 9b       	sbis	0x0b, 7	; 11
 35a:	fe cf       	rjmp	.-4      	; 0x358 <USART_Receive>
	
	/* Get and return received data from buffer */
	return UDR0;
 35c:	8c b1       	in	r24, 0x0c	; 12
}
 35e:	08 95       	ret

00000360 <USART_Init>:

FILE *uart;

void USART_Init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr >> 8);
 360:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 362:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 364:	88 e1       	ldi	r24, 0x18	; 24
 366:	8a b9       	out	0x0a, r24	; 10
	
	uart = fdevopen(&USART_Transmit, &USART_Receive);
 368:	6c ea       	ldi	r22, 0xAC	; 172
 36a:	71 e0       	ldi	r23, 0x01	; 1
 36c:	88 ea       	ldi	r24, 0xA8	; 168
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	0e 94 bf 01 	call	0x37e	; 0x37e <fdevopen>
 374:	90 93 1d 01 	sts	0x011D, r25
 378:	80 93 1c 01 	sts	0x011C, r24
 37c:	08 95       	ret

0000037e <fdevopen>:
						write_d(~pgm_read_byte(&font5[menu[k][j] - ' '][i]));
					}
					else
					{
						oled_set_column(i+(j*5));
						write_d(pgm_read_byte(&font5[menu[k][j] - ' '][i]));
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	ec 01       	movw	r28, r24
 388:	8b 01       	movw	r16, r22
 38a:	00 97       	sbiw	r24, 0x00	; 0
 38c:	31 f4       	brne	.+12     	; 0x39a <fdevopen+0x1c>
 38e:	61 15       	cp	r22, r1
 390:	71 05       	cpc	r23, r1
 392:	19 f4       	brne	.+6      	; 0x39a <fdevopen+0x1c>
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	38 c0       	rjmp	.+112    	; 0x40a <fdevopen+0x8c>
 39a:	6e e0       	ldi	r22, 0x0E	; 14
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	81 e0       	ldi	r24, 0x01	; 1
		}
		for (k = 0; k < 5; k++)
		{
			for (j = 0; j < 13; j++)
			{
				for (i = 0; i < 5; i++)
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <calloc>
 3a6:	fc 01       	movw	r30, r24
 3a8:	00 97       	sbiw	r24, 0x00	; 0
 3aa:	a1 f3       	breq	.-24     	; 0x394 <fdevopen+0x16>
 3ac:	80 e8       	ldi	r24, 0x80	; 128
 3ae:	83 83       	std	Z+3, r24	; 0x03
 3b0:	01 15       	cp	r16, r1
 3b2:	11 05       	cpc	r17, r1
 3b4:	71 f0       	breq	.+28     	; 0x3d2 <fdevopen+0x54>
			select_menu = 1;
			break;
		}
		for (k = 0; k < 5; k++)
		{
			for (j = 0; j < 13; j++)
 3b6:	13 87       	std	Z+11, r17	; 0x0b
 3b8:	02 87       	std	Z+10, r16	; 0x0a
 3ba:	81 e8       	ldi	r24, 0x81	; 129
 3bc:	83 83       	std	Z+3, r24	; 0x03
 3be:	80 91 1e 01 	lds	r24, 0x011E
 3c2:	90 91 1f 01 	lds	r25, 0x011F
 3c6:	89 2b       	or	r24, r25
		" Arsenal   ",
		" Man.Utd.  ",
	};
			
	int count_menu = 4;
	int select_menu = 1;
 3c8:	21 f4       	brne	.+8      	; 0x3d2 <fdevopen+0x54>
 3ca:	f0 93 1f 01 	sts	0x011F, r31
 3ce:	e0 93 1e 01 	sts	0x011E, r30
 3d2:	20 97       	sbiw	r28, 0x00	; 0
 3d4:	c9 f0       	breq	.+50     	; 0x408 <fdevopen+0x8a>
 3d6:	d1 87       	std	Z+9, r29	; 0x09
 3d8:	c0 87       	std	Z+8, r28	; 0x08
 3da:	83 81       	ldd	r24, Z+3	; 0x03
 3dc:	82 60       	ori	r24, 0x02	; 2
						oled_set_column(i+(j*5));
						write_d(pgm_read_byte(&font5[menu[k][j] - ' '][i]));
					}
				}
			}			
			oled_set_page(k+1);
 3de:	83 83       	std	Z+3, r24	; 0x03
 3e0:	80 91 20 01 	lds	r24, 0x0120
 3e4:	90 91 21 01 	lds	r25, 0x0121
 3e8:	89 2b       	or	r24, r25
 3ea:	71 f4       	brne	.+28     	; 0x408 <fdevopen+0x8a>
 3ec:	f0 93 21 01 	sts	0x0121, r31
			sub_menu = 1;
			clear_oled();
			select_menu = 1;
			break;
		}
		for (k = 0; k < 5; k++)
 3f0:	e0 93 20 01 	sts	0x0120, r30
 3f4:	80 91 22 01 	lds	r24, 0x0122
 3f8:	90 91 23 01 	lds	r25, 0x0123
 3fc:	89 2b       	or	r24, r25
 3fe:	21 f4       	brne	.+8      	; 0x408 <fdevopen+0x8a>
 400:	f0 93 23 01 	sts	0x0123, r31
		" Arsenal   ",
		" Man.Utd.  ",
	};
			
	int count_menu = 4;
	int select_menu = 1;
 404:	e0 93 22 01 	sts	0x0122, r30
 408:	cf 01       	movw	r24, r30
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	0f 91       	pop	r16
 412:	08 95       	ret

00000414 <printf>:
 414:	a0 e0       	ldi	r26, 0x00	; 0
 416:	b0 e0       	ldi	r27, 0x00	; 0
 418:	e0 e1       	ldi	r30, 0x10	; 16
	
		if (y_volt < 125 && select_menu < count_menu-2)
		{
			select_menu++;
		}
		if (y_volt > 135 && select_menu > 1)
 41a:	f2 e0       	ldi	r31, 0x02	; 2
 41c:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__prologue_saves__+0x20>
 420:	fe 01       	movw	r30, r28
 422:	35 96       	adiw	r30, 0x05	; 5
 424:	61 91       	ld	r22, Z+
 426:	71 91       	ld	r23, Z+
 428:	af 01       	movw	r20, r30
 42a:	80 91 20 01 	lds	r24, 0x0120
 42e:	90 91 21 01 	lds	r25, 0x0121
 432:	0e 94 1e 02 	call	0x43c	; 0x43c <vfprintf>
 436:	e2 e0       	ldi	r30, 0x02	; 2
 438:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__epilogue_restores__+0x20>

0000043c <vfprintf>:
 43c:	ac e0       	ldi	r26, 0x0C	; 12
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	e4 e2       	ldi	r30, 0x24	; 36
 442:	f2 e0       	ldi	r31, 0x02	; 2
 444:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__prologue_saves__>
 448:	7c 01       	movw	r14, r24
 44a:	6b 01       	movw	r12, r22
 44c:	8a 01       	movw	r16, r20
 44e:	fc 01       	movw	r30, r24
 450:	17 82       	std	Z+7, r1	; 0x07
 452:	16 82       	std	Z+6, r1	; 0x06
 454:	83 81       	ldd	r24, Z+3	; 0x03
 456:	81 ff       	sbrs	r24, 1
 458:	bd c1       	rjmp	.+890    	; 0x7d4 <__stack+0x2d5>
 45a:	ce 01       	movw	r24, r28
 45c:	01 96       	adiw	r24, 0x01	; 1
 45e:	4c 01       	movw	r8, r24
 460:	f7 01       	movw	r30, r14
 462:	93 81       	ldd	r25, Z+3	; 0x03
 464:	f6 01       	movw	r30, r12
 466:	93 fd       	sbrc	r25, 3
 468:	85 91       	lpm	r24, Z+
 46a:	93 ff       	sbrs	r25, 3
 46c:	81 91       	ld	r24, Z+
 46e:	6f 01       	movw	r12, r30
 470:	88 23       	and	r24, r24
 472:	09 f4       	brne	.+2      	; 0x476 <vfprintf+0x3a>
 474:	ab c1       	rjmp	.+854    	; 0x7cc <__stack+0x2cd>
 476:	85 32       	cpi	r24, 0x25	; 37
 478:	39 f4       	brne	.+14     	; 0x488 <vfprintf+0x4c>
 47a:	93 fd       	sbrc	r25, 3
 47c:	85 91       	lpm	r24, Z+
 47e:	93 ff       	sbrs	r25, 3
 480:	81 91       	ld	r24, Z+
 482:	6f 01       	movw	r12, r30
 484:	85 32       	cpi	r24, 0x25	; 37
 486:	29 f4       	brne	.+10     	; 0x492 <vfprintf+0x56>
 488:	b7 01       	movw	r22, r14
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 490:	e7 cf       	rjmp	.-50     	; 0x460 <vfprintf+0x24>
 492:	51 2c       	mov	r5, r1
 494:	31 2c       	mov	r3, r1
 496:	20 e0       	ldi	r18, 0x00	; 0
 498:	20 32       	cpi	r18, 0x20	; 32
 49a:	a0 f4       	brcc	.+40     	; 0x4c4 <vfprintf+0x88>
 49c:	8b 32       	cpi	r24, 0x2B	; 43
 49e:	69 f0       	breq	.+26     	; 0x4ba <vfprintf+0x7e>
 4a0:	30 f4       	brcc	.+12     	; 0x4ae <vfprintf+0x72>
 4a2:	80 32       	cpi	r24, 0x20	; 32
 4a4:	59 f0       	breq	.+22     	; 0x4bc <vfprintf+0x80>
 4a6:	83 32       	cpi	r24, 0x23	; 35
 4a8:	69 f4       	brne	.+26     	; 0x4c4 <vfprintf+0x88>
 4aa:	20 61       	ori	r18, 0x10	; 16
 4ac:	2c c0       	rjmp	.+88     	; 0x506 <__stack+0x7>
 4ae:	8d 32       	cpi	r24, 0x2D	; 45
 4b0:	39 f0       	breq	.+14     	; 0x4c0 <vfprintf+0x84>
 4b2:	80 33       	cpi	r24, 0x30	; 48
 4b4:	39 f4       	brne	.+14     	; 0x4c4 <vfprintf+0x88>
 4b6:	21 60       	ori	r18, 0x01	; 1
 4b8:	26 c0       	rjmp	.+76     	; 0x506 <__stack+0x7>
 4ba:	22 60       	ori	r18, 0x02	; 2
 4bc:	24 60       	ori	r18, 0x04	; 4
 4be:	23 c0       	rjmp	.+70     	; 0x506 <__stack+0x7>
 4c0:	28 60       	ori	r18, 0x08	; 8
 4c2:	21 c0       	rjmp	.+66     	; 0x506 <__stack+0x7>
 4c4:	27 fd       	sbrc	r18, 7
 4c6:	27 c0       	rjmp	.+78     	; 0x516 <__stack+0x17>
 4c8:	30 ed       	ldi	r19, 0xD0	; 208
 4ca:	38 0f       	add	r19, r24
 4cc:	3a 30       	cpi	r19, 0x0A	; 10
 4ce:	78 f4       	brcc	.+30     	; 0x4ee <vfprintf+0xb2>
 4d0:	26 ff       	sbrs	r18, 6
 4d2:	06 c0       	rjmp	.+12     	; 0x4e0 <vfprintf+0xa4>
 4d4:	fa e0       	ldi	r31, 0x0A	; 10
 4d6:	5f 9e       	mul	r5, r31
 4d8:	30 0d       	add	r19, r0
 4da:	11 24       	eor	r1, r1
 4dc:	53 2e       	mov	r5, r19
 4de:	13 c0       	rjmp	.+38     	; 0x506 <__stack+0x7>
 4e0:	8a e0       	ldi	r24, 0x0A	; 10
 4e2:	38 9e       	mul	r3, r24
 4e4:	30 0d       	add	r19, r0
 4e6:	11 24       	eor	r1, r1
 4e8:	33 2e       	mov	r3, r19
 4ea:	20 62       	ori	r18, 0x20	; 32
 4ec:	0c c0       	rjmp	.+24     	; 0x506 <__stack+0x7>
 4ee:	8e 32       	cpi	r24, 0x2E	; 46
 4f0:	21 f4       	brne	.+8      	; 0x4fa <vfprintf+0xbe>
 4f2:	26 fd       	sbrc	r18, 6
 4f4:	6b c1       	rjmp	.+726    	; 0x7cc <__stack+0x2cd>
 4f6:	20 64       	ori	r18, 0x40	; 64
 4f8:	06 c0       	rjmp	.+12     	; 0x506 <__stack+0x7>
 4fa:	8c 36       	cpi	r24, 0x6C	; 108
 4fc:	11 f4       	brne	.+4      	; 0x502 <__stack+0x3>
 4fe:	20 68       	ori	r18, 0x80	; 128
 500:	02 c0       	rjmp	.+4      	; 0x506 <__stack+0x7>
 502:	88 36       	cpi	r24, 0x68	; 104
 504:	41 f4       	brne	.+16     	; 0x516 <__stack+0x17>
 506:	f6 01       	movw	r30, r12
 508:	93 fd       	sbrc	r25, 3
 50a:	85 91       	lpm	r24, Z+
 50c:	93 ff       	sbrs	r25, 3
 50e:	81 91       	ld	r24, Z+
 510:	6f 01       	movw	r12, r30
 512:	81 11       	cpse	r24, r1
 514:	c1 cf       	rjmp	.-126    	; 0x498 <vfprintf+0x5c>
 516:	98 2f       	mov	r25, r24
 518:	9f 7d       	andi	r25, 0xDF	; 223
 51a:	95 54       	subi	r25, 0x45	; 69
 51c:	93 30       	cpi	r25, 0x03	; 3
 51e:	28 f4       	brcc	.+10     	; 0x52a <__stack+0x2b>
 520:	0c 5f       	subi	r16, 0xFC	; 252
 522:	1f 4f       	sbci	r17, 0xFF	; 255
 524:	ff e3       	ldi	r31, 0x3F	; 63
 526:	f9 83       	std	Y+1, r31	; 0x01
 528:	0d c0       	rjmp	.+26     	; 0x544 <__stack+0x45>
 52a:	83 36       	cpi	r24, 0x63	; 99
 52c:	31 f0       	breq	.+12     	; 0x53a <__stack+0x3b>
 52e:	83 37       	cpi	r24, 0x73	; 115
 530:	71 f0       	breq	.+28     	; 0x54e <__stack+0x4f>
 532:	83 35       	cpi	r24, 0x53	; 83
 534:	09 f0       	breq	.+2      	; 0x538 <__stack+0x39>
 536:	5b c0       	rjmp	.+182    	; 0x5ee <__stack+0xef>
 538:	22 c0       	rjmp	.+68     	; 0x57e <__stack+0x7f>
 53a:	f8 01       	movw	r30, r16
 53c:	80 81       	ld	r24, Z
 53e:	89 83       	std	Y+1, r24	; 0x01
 540:	0e 5f       	subi	r16, 0xFE	; 254
 542:	1f 4f       	sbci	r17, 0xFF	; 255
 544:	44 24       	eor	r4, r4
 546:	43 94       	inc	r4
 548:	51 2c       	mov	r5, r1
 54a:	54 01       	movw	r10, r8
 54c:	15 c0       	rjmp	.+42     	; 0x578 <__stack+0x79>
 54e:	38 01       	movw	r6, r16
 550:	f2 e0       	ldi	r31, 0x02	; 2
 552:	6f 0e       	add	r6, r31
 554:	71 1c       	adc	r7, r1
 556:	f8 01       	movw	r30, r16
 558:	a0 80       	ld	r10, Z
 55a:	b1 80       	ldd	r11, Z+1	; 0x01
 55c:	26 ff       	sbrs	r18, 6
 55e:	03 c0       	rjmp	.+6      	; 0x566 <__stack+0x67>
 560:	65 2d       	mov	r22, r5
 562:	70 e0       	ldi	r23, 0x00	; 0
 564:	02 c0       	rjmp	.+4      	; 0x56a <__stack+0x6b>
 566:	6f ef       	ldi	r22, 0xFF	; 255
 568:	7f ef       	ldi	r23, 0xFF	; 255
 56a:	c5 01       	movw	r24, r10
 56c:	2c 87       	std	Y+12, r18	; 0x0c
 56e:	0e 94 45 05 	call	0xa8a	; 0xa8a <strnlen>
 572:	2c 01       	movw	r4, r24
 574:	83 01       	movw	r16, r6
 576:	2c 85       	ldd	r18, Y+12	; 0x0c
 578:	2f 77       	andi	r18, 0x7F	; 127
 57a:	22 2e       	mov	r2, r18
 57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0xad>
 57e:	38 01       	movw	r6, r16
 580:	f2 e0       	ldi	r31, 0x02	; 2
 582:	6f 0e       	add	r6, r31
 584:	71 1c       	adc	r7, r1
 586:	f8 01       	movw	r30, r16
 588:	a0 80       	ld	r10, Z
 58a:	b1 80       	ldd	r11, Z+1	; 0x01
 58c:	26 ff       	sbrs	r18, 6
 58e:	03 c0       	rjmp	.+6      	; 0x596 <__stack+0x97>
 590:	65 2d       	mov	r22, r5
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	02 c0       	rjmp	.+4      	; 0x59a <__stack+0x9b>
 596:	6f ef       	ldi	r22, 0xFF	; 255
 598:	7f ef       	ldi	r23, 0xFF	; 255
 59a:	c5 01       	movw	r24, r10
 59c:	2c 87       	std	Y+12, r18	; 0x0c
 59e:	0e 94 33 05 	call	0xa66	; 0xa66 <strnlen_P>
 5a2:	2c 01       	movw	r4, r24
 5a4:	2c 85       	ldd	r18, Y+12	; 0x0c
 5a6:	20 68       	ori	r18, 0x80	; 128
 5a8:	22 2e       	mov	r2, r18
 5aa:	83 01       	movw	r16, r6
 5ac:	23 fc       	sbrc	r2, 3
 5ae:	1b c0       	rjmp	.+54     	; 0x5e6 <__stack+0xe7>
 5b0:	83 2d       	mov	r24, r3
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	48 16       	cp	r4, r24
 5b6:	59 06       	cpc	r5, r25
 5b8:	b0 f4       	brcc	.+44     	; 0x5e6 <__stack+0xe7>
 5ba:	b7 01       	movw	r22, r14
 5bc:	80 e2       	ldi	r24, 0x20	; 32
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 5c4:	3a 94       	dec	r3
 5c6:	f4 cf       	rjmp	.-24     	; 0x5b0 <__stack+0xb1>
 5c8:	f5 01       	movw	r30, r10
 5ca:	27 fc       	sbrc	r2, 7
 5cc:	85 91       	lpm	r24, Z+
 5ce:	27 fe       	sbrs	r2, 7
 5d0:	81 91       	ld	r24, Z+
 5d2:	5f 01       	movw	r10, r30
 5d4:	b7 01       	movw	r22, r14
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 5dc:	31 10       	cpse	r3, r1
 5de:	3a 94       	dec	r3
 5e0:	f1 e0       	ldi	r31, 0x01	; 1
 5e2:	4f 1a       	sub	r4, r31
 5e4:	51 08       	sbc	r5, r1
 5e6:	41 14       	cp	r4, r1
 5e8:	51 04       	cpc	r5, r1
 5ea:	71 f7       	brne	.-36     	; 0x5c8 <__stack+0xc9>
 5ec:	e5 c0       	rjmp	.+458    	; 0x7b8 <__stack+0x2b9>
 5ee:	84 36       	cpi	r24, 0x64	; 100
 5f0:	11 f0       	breq	.+4      	; 0x5f6 <__stack+0xf7>
 5f2:	89 36       	cpi	r24, 0x69	; 105
 5f4:	39 f5       	brne	.+78     	; 0x644 <__stack+0x145>
 5f6:	f8 01       	movw	r30, r16
 5f8:	27 ff       	sbrs	r18, 7
 5fa:	07 c0       	rjmp	.+14     	; 0x60a <__stack+0x10b>
 5fc:	60 81       	ld	r22, Z
 5fe:	71 81       	ldd	r23, Z+1	; 0x01
 600:	82 81       	ldd	r24, Z+2	; 0x02
 602:	93 81       	ldd	r25, Z+3	; 0x03
 604:	0c 5f       	subi	r16, 0xFC	; 252
 606:	1f 4f       	sbci	r17, 0xFF	; 255
 608:	08 c0       	rjmp	.+16     	; 0x61a <__stack+0x11b>
 60a:	60 81       	ld	r22, Z
 60c:	71 81       	ldd	r23, Z+1	; 0x01
 60e:	88 27       	eor	r24, r24
 610:	77 fd       	sbrc	r23, 7
 612:	80 95       	com	r24
 614:	98 2f       	mov	r25, r24
 616:	0e 5f       	subi	r16, 0xFE	; 254
 618:	1f 4f       	sbci	r17, 0xFF	; 255
 61a:	2f 76       	andi	r18, 0x6F	; 111
 61c:	b2 2e       	mov	r11, r18
 61e:	97 ff       	sbrs	r25, 7
 620:	09 c0       	rjmp	.+18     	; 0x634 <__stack+0x135>
 622:	90 95       	com	r25
 624:	80 95       	com	r24
 626:	70 95       	com	r23
 628:	61 95       	neg	r22
 62a:	7f 4f       	sbci	r23, 0xFF	; 255
 62c:	8f 4f       	sbci	r24, 0xFF	; 255
 62e:	9f 4f       	sbci	r25, 0xFF	; 255
 630:	20 68       	ori	r18, 0x80	; 128
 632:	b2 2e       	mov	r11, r18
 634:	2a e0       	ldi	r18, 0x0A	; 10
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	a4 01       	movw	r20, r8
 63a:	0e 94 82 05 	call	0xb04	; 0xb04 <__ultoa_invert>
 63e:	a8 2e       	mov	r10, r24
 640:	a8 18       	sub	r10, r8
 642:	44 c0       	rjmp	.+136    	; 0x6cc <__stack+0x1cd>
 644:	85 37       	cpi	r24, 0x75	; 117
 646:	29 f4       	brne	.+10     	; 0x652 <__stack+0x153>
 648:	2f 7e       	andi	r18, 0xEF	; 239
 64a:	b2 2e       	mov	r11, r18
 64c:	2a e0       	ldi	r18, 0x0A	; 10
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	25 c0       	rjmp	.+74     	; 0x69c <__stack+0x19d>
 652:	f2 2f       	mov	r31, r18
 654:	f9 7f       	andi	r31, 0xF9	; 249
 656:	bf 2e       	mov	r11, r31
 658:	8f 36       	cpi	r24, 0x6F	; 111
 65a:	c1 f0       	breq	.+48     	; 0x68c <__stack+0x18d>
 65c:	18 f4       	brcc	.+6      	; 0x664 <__stack+0x165>
 65e:	88 35       	cpi	r24, 0x58	; 88
 660:	79 f0       	breq	.+30     	; 0x680 <__stack+0x181>
 662:	b4 c0       	rjmp	.+360    	; 0x7cc <__stack+0x2cd>
 664:	80 37       	cpi	r24, 0x70	; 112
 666:	19 f0       	breq	.+6      	; 0x66e <__stack+0x16f>
 668:	88 37       	cpi	r24, 0x78	; 120
 66a:	21 f0       	breq	.+8      	; 0x674 <__stack+0x175>
 66c:	af c0       	rjmp	.+350    	; 0x7cc <__stack+0x2cd>
 66e:	2f 2f       	mov	r18, r31
 670:	20 61       	ori	r18, 0x10	; 16
 672:	b2 2e       	mov	r11, r18
 674:	b4 fe       	sbrs	r11, 4
 676:	0d c0       	rjmp	.+26     	; 0x692 <__stack+0x193>
 678:	8b 2d       	mov	r24, r11
 67a:	84 60       	ori	r24, 0x04	; 4
 67c:	b8 2e       	mov	r11, r24
 67e:	09 c0       	rjmp	.+18     	; 0x692 <__stack+0x193>
 680:	24 ff       	sbrs	r18, 4
 682:	0a c0       	rjmp	.+20     	; 0x698 <__stack+0x199>
 684:	9f 2f       	mov	r25, r31
 686:	96 60       	ori	r25, 0x06	; 6
 688:	b9 2e       	mov	r11, r25
 68a:	06 c0       	rjmp	.+12     	; 0x698 <__stack+0x199>
 68c:	28 e0       	ldi	r18, 0x08	; 8
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	05 c0       	rjmp	.+10     	; 0x69c <__stack+0x19d>
 692:	20 e1       	ldi	r18, 0x10	; 16
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	02 c0       	rjmp	.+4      	; 0x69c <__stack+0x19d>
 698:	20 e1       	ldi	r18, 0x10	; 16
 69a:	32 e0       	ldi	r19, 0x02	; 2
 69c:	f8 01       	movw	r30, r16
 69e:	b7 fe       	sbrs	r11, 7
 6a0:	07 c0       	rjmp	.+14     	; 0x6b0 <__stack+0x1b1>
 6a2:	60 81       	ld	r22, Z
 6a4:	71 81       	ldd	r23, Z+1	; 0x01
 6a6:	82 81       	ldd	r24, Z+2	; 0x02
 6a8:	93 81       	ldd	r25, Z+3	; 0x03
 6aa:	0c 5f       	subi	r16, 0xFC	; 252
 6ac:	1f 4f       	sbci	r17, 0xFF	; 255
 6ae:	06 c0       	rjmp	.+12     	; 0x6bc <__stack+0x1bd>
 6b0:	60 81       	ld	r22, Z
 6b2:	71 81       	ldd	r23, Z+1	; 0x01
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	0e 5f       	subi	r16, 0xFE	; 254
 6ba:	1f 4f       	sbci	r17, 0xFF	; 255
 6bc:	a4 01       	movw	r20, r8
 6be:	0e 94 82 05 	call	0xb04	; 0xb04 <__ultoa_invert>
 6c2:	a8 2e       	mov	r10, r24
 6c4:	a8 18       	sub	r10, r8
 6c6:	fb 2d       	mov	r31, r11
 6c8:	ff 77       	andi	r31, 0x7F	; 127
 6ca:	bf 2e       	mov	r11, r31
 6cc:	b6 fe       	sbrs	r11, 6
 6ce:	0b c0       	rjmp	.+22     	; 0x6e6 <__stack+0x1e7>
 6d0:	2b 2d       	mov	r18, r11
 6d2:	2e 7f       	andi	r18, 0xFE	; 254
 6d4:	a5 14       	cp	r10, r5
 6d6:	50 f4       	brcc	.+20     	; 0x6ec <__stack+0x1ed>
 6d8:	b4 fe       	sbrs	r11, 4
 6da:	0a c0       	rjmp	.+20     	; 0x6f0 <__stack+0x1f1>
 6dc:	b2 fc       	sbrc	r11, 2
 6de:	08 c0       	rjmp	.+16     	; 0x6f0 <__stack+0x1f1>
 6e0:	2b 2d       	mov	r18, r11
 6e2:	2e 7e       	andi	r18, 0xEE	; 238
 6e4:	05 c0       	rjmp	.+10     	; 0x6f0 <__stack+0x1f1>
 6e6:	7a 2c       	mov	r7, r10
 6e8:	2b 2d       	mov	r18, r11
 6ea:	03 c0       	rjmp	.+6      	; 0x6f2 <__stack+0x1f3>
 6ec:	7a 2c       	mov	r7, r10
 6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <__stack+0x1f3>
 6f0:	75 2c       	mov	r7, r5
 6f2:	24 ff       	sbrs	r18, 4
 6f4:	0d c0       	rjmp	.+26     	; 0x710 <__stack+0x211>
 6f6:	fe 01       	movw	r30, r28
 6f8:	ea 0d       	add	r30, r10
 6fa:	f1 1d       	adc	r31, r1
 6fc:	80 81       	ld	r24, Z
 6fe:	80 33       	cpi	r24, 0x30	; 48
 700:	11 f4       	brne	.+4      	; 0x706 <__stack+0x207>
 702:	29 7e       	andi	r18, 0xE9	; 233
 704:	09 c0       	rjmp	.+18     	; 0x718 <__stack+0x219>
 706:	22 ff       	sbrs	r18, 2
 708:	06 c0       	rjmp	.+12     	; 0x716 <__stack+0x217>
 70a:	73 94       	inc	r7
 70c:	73 94       	inc	r7
 70e:	04 c0       	rjmp	.+8      	; 0x718 <__stack+0x219>
 710:	82 2f       	mov	r24, r18
 712:	86 78       	andi	r24, 0x86	; 134
 714:	09 f0       	breq	.+2      	; 0x718 <__stack+0x219>
 716:	73 94       	inc	r7
 718:	23 fd       	sbrc	r18, 3
 71a:	13 c0       	rjmp	.+38     	; 0x742 <__stack+0x243>
 71c:	20 ff       	sbrs	r18, 0
 71e:	06 c0       	rjmp	.+12     	; 0x72c <__stack+0x22d>
 720:	5a 2c       	mov	r5, r10
 722:	73 14       	cp	r7, r3
 724:	18 f4       	brcc	.+6      	; 0x72c <__stack+0x22d>
 726:	53 0c       	add	r5, r3
 728:	57 18       	sub	r5, r7
 72a:	73 2c       	mov	r7, r3
 72c:	73 14       	cp	r7, r3
 72e:	68 f4       	brcc	.+26     	; 0x74a <__stack+0x24b>
 730:	b7 01       	movw	r22, r14
 732:	80 e2       	ldi	r24, 0x20	; 32
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	2c 87       	std	Y+12, r18	; 0x0c
 738:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 73c:	73 94       	inc	r7
 73e:	2c 85       	ldd	r18, Y+12	; 0x0c
 740:	f5 cf       	rjmp	.-22     	; 0x72c <__stack+0x22d>
 742:	73 14       	cp	r7, r3
 744:	10 f4       	brcc	.+4      	; 0x74a <__stack+0x24b>
 746:	37 18       	sub	r3, r7
 748:	01 c0       	rjmp	.+2      	; 0x74c <__stack+0x24d>
 74a:	31 2c       	mov	r3, r1
 74c:	24 ff       	sbrs	r18, 4
 74e:	12 c0       	rjmp	.+36     	; 0x774 <__stack+0x275>
 750:	b7 01       	movw	r22, r14
 752:	80 e3       	ldi	r24, 0x30	; 48
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	2c 87       	std	Y+12, r18	; 0x0c
 758:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 75c:	2c 85       	ldd	r18, Y+12	; 0x0c
 75e:	22 ff       	sbrs	r18, 2
 760:	17 c0       	rjmp	.+46     	; 0x790 <__stack+0x291>
 762:	21 ff       	sbrs	r18, 1
 764:	03 c0       	rjmp	.+6      	; 0x76c <__stack+0x26d>
 766:	88 e5       	ldi	r24, 0x58	; 88
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	02 c0       	rjmp	.+4      	; 0x770 <__stack+0x271>
 76c:	88 e7       	ldi	r24, 0x78	; 120
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	b7 01       	movw	r22, r14
 772:	0c c0       	rjmp	.+24     	; 0x78c <__stack+0x28d>
 774:	82 2f       	mov	r24, r18
 776:	86 78       	andi	r24, 0x86	; 134
 778:	59 f0       	breq	.+22     	; 0x790 <__stack+0x291>
 77a:	21 fd       	sbrc	r18, 1
 77c:	02 c0       	rjmp	.+4      	; 0x782 <__stack+0x283>
 77e:	80 e2       	ldi	r24, 0x20	; 32
 780:	01 c0       	rjmp	.+2      	; 0x784 <__stack+0x285>
 782:	8b e2       	ldi	r24, 0x2B	; 43
 784:	27 fd       	sbrc	r18, 7
 786:	8d e2       	ldi	r24, 0x2D	; 45
 788:	b7 01       	movw	r22, r14
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 790:	a5 14       	cp	r10, r5
 792:	38 f4       	brcc	.+14     	; 0x7a2 <__stack+0x2a3>
 794:	b7 01       	movw	r22, r14
 796:	80 e3       	ldi	r24, 0x30	; 48
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 79e:	5a 94       	dec	r5
 7a0:	f7 cf       	rjmp	.-18     	; 0x790 <__stack+0x291>
 7a2:	aa 94       	dec	r10
 7a4:	f4 01       	movw	r30, r8
 7a6:	ea 0d       	add	r30, r10
 7a8:	f1 1d       	adc	r31, r1
 7aa:	80 81       	ld	r24, Z
 7ac:	b7 01       	movw	r22, r14
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 7b4:	a1 10       	cpse	r10, r1
 7b6:	f5 cf       	rjmp	.-22     	; 0x7a2 <__stack+0x2a3>
 7b8:	33 20       	and	r3, r3
 7ba:	09 f4       	brne	.+2      	; 0x7be <__stack+0x2bf>
 7bc:	51 ce       	rjmp	.-862    	; 0x460 <vfprintf+0x24>
 7be:	b7 01       	movw	r22, r14
 7c0:	80 e2       	ldi	r24, 0x20	; 32
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 7c8:	3a 94       	dec	r3
 7ca:	f6 cf       	rjmp	.-20     	; 0x7b8 <__stack+0x2b9>
 7cc:	f7 01       	movw	r30, r14
 7ce:	86 81       	ldd	r24, Z+6	; 0x06
 7d0:	97 81       	ldd	r25, Z+7	; 0x07
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <__stack+0x2d9>
 7d4:	8f ef       	ldi	r24, 0xFF	; 255
 7d6:	9f ef       	ldi	r25, 0xFF	; 255
 7d8:	2c 96       	adiw	r28, 0x0c	; 12
 7da:	e2 e1       	ldi	r30, 0x12	; 18
 7dc:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__epilogue_restores__>

000007e0 <calloc>:
 7e0:	0f 93       	push	r16
 7e2:	1f 93       	push	r17
 7e4:	cf 93       	push	r28
 7e6:	df 93       	push	r29
 7e8:	86 9f       	mul	r24, r22
 7ea:	80 01       	movw	r16, r0
 7ec:	87 9f       	mul	r24, r23
 7ee:	10 0d       	add	r17, r0
 7f0:	96 9f       	mul	r25, r22
 7f2:	10 0d       	add	r17, r0
 7f4:	11 24       	eor	r1, r1
 7f6:	c8 01       	movw	r24, r16
 7f8:	0e 94 0c 04 	call	0x818	; 0x818 <malloc>
 7fc:	ec 01       	movw	r28, r24
 7fe:	00 97       	sbiw	r24, 0x00	; 0
 800:	29 f0       	breq	.+10     	; 0x80c <calloc+0x2c>
 802:	a8 01       	movw	r20, r16
 804:	60 e0       	ldi	r22, 0x00	; 0
 806:	70 e0       	ldi	r23, 0x00	; 0
 808:	0e 94 3e 05 	call	0xa7c	; 0xa7c <memset>
 80c:	ce 01       	movw	r24, r28
 80e:	df 91       	pop	r29
 810:	cf 91       	pop	r28
 812:	1f 91       	pop	r17
 814:	0f 91       	pop	r16
 816:	08 95       	ret

00000818 <malloc>:
 818:	cf 93       	push	r28
 81a:	df 93       	push	r29
 81c:	82 30       	cpi	r24, 0x02	; 2
 81e:	91 05       	cpc	r25, r1
 820:	10 f4       	brcc	.+4      	; 0x826 <malloc+0xe>
 822:	82 e0       	ldi	r24, 0x02	; 2
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	e0 91 26 01 	lds	r30, 0x0126
 82a:	f0 91 27 01 	lds	r31, 0x0127
 82e:	20 e0       	ldi	r18, 0x00	; 0
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	a0 e0       	ldi	r26, 0x00	; 0
 834:	b0 e0       	ldi	r27, 0x00	; 0
 836:	30 97       	sbiw	r30, 0x00	; 0
 838:	39 f1       	breq	.+78     	; 0x888 <malloc+0x70>
 83a:	40 81       	ld	r20, Z
 83c:	51 81       	ldd	r21, Z+1	; 0x01
 83e:	48 17       	cp	r20, r24
 840:	59 07       	cpc	r21, r25
 842:	b8 f0       	brcs	.+46     	; 0x872 <malloc+0x5a>
 844:	48 17       	cp	r20, r24
 846:	59 07       	cpc	r21, r25
 848:	71 f4       	brne	.+28     	; 0x866 <malloc+0x4e>
 84a:	82 81       	ldd	r24, Z+2	; 0x02
 84c:	93 81       	ldd	r25, Z+3	; 0x03
 84e:	10 97       	sbiw	r26, 0x00	; 0
 850:	29 f0       	breq	.+10     	; 0x85c <malloc+0x44>
 852:	13 96       	adiw	r26, 0x03	; 3
 854:	9c 93       	st	X, r25
 856:	8e 93       	st	-X, r24
 858:	12 97       	sbiw	r26, 0x02	; 2
 85a:	2c c0       	rjmp	.+88     	; 0x8b4 <malloc+0x9c>
 85c:	90 93 27 01 	sts	0x0127, r25
 860:	80 93 26 01 	sts	0x0126, r24
 864:	27 c0       	rjmp	.+78     	; 0x8b4 <malloc+0x9c>
 866:	21 15       	cp	r18, r1
 868:	31 05       	cpc	r19, r1
 86a:	31 f0       	breq	.+12     	; 0x878 <malloc+0x60>
 86c:	42 17       	cp	r20, r18
 86e:	53 07       	cpc	r21, r19
 870:	18 f0       	brcs	.+6      	; 0x878 <malloc+0x60>
 872:	a9 01       	movw	r20, r18
 874:	db 01       	movw	r26, r22
 876:	01 c0       	rjmp	.+2      	; 0x87a <malloc+0x62>
 878:	ef 01       	movw	r28, r30
 87a:	9a 01       	movw	r18, r20
 87c:	bd 01       	movw	r22, r26
 87e:	df 01       	movw	r26, r30
 880:	02 80       	ldd	r0, Z+2	; 0x02
 882:	f3 81       	ldd	r31, Z+3	; 0x03
 884:	e0 2d       	mov	r30, r0
 886:	d7 cf       	rjmp	.-82     	; 0x836 <malloc+0x1e>
 888:	21 15       	cp	r18, r1
 88a:	31 05       	cpc	r19, r1
 88c:	f9 f0       	breq	.+62     	; 0x8cc <malloc+0xb4>
 88e:	28 1b       	sub	r18, r24
 890:	39 0b       	sbc	r19, r25
 892:	24 30       	cpi	r18, 0x04	; 4
 894:	31 05       	cpc	r19, r1
 896:	80 f4       	brcc	.+32     	; 0x8b8 <malloc+0xa0>
 898:	8a 81       	ldd	r24, Y+2	; 0x02
 89a:	9b 81       	ldd	r25, Y+3	; 0x03
 89c:	61 15       	cp	r22, r1
 89e:	71 05       	cpc	r23, r1
 8a0:	21 f0       	breq	.+8      	; 0x8aa <malloc+0x92>
 8a2:	fb 01       	movw	r30, r22
 8a4:	93 83       	std	Z+3, r25	; 0x03
 8a6:	82 83       	std	Z+2, r24	; 0x02
 8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <malloc+0x9a>
 8aa:	90 93 27 01 	sts	0x0127, r25
 8ae:	80 93 26 01 	sts	0x0126, r24
 8b2:	fe 01       	movw	r30, r28
 8b4:	32 96       	adiw	r30, 0x02	; 2
 8b6:	44 c0       	rjmp	.+136    	; 0x940 <malloc+0x128>
 8b8:	fe 01       	movw	r30, r28
 8ba:	e2 0f       	add	r30, r18
 8bc:	f3 1f       	adc	r31, r19
 8be:	81 93       	st	Z+, r24
 8c0:	91 93       	st	Z+, r25
 8c2:	22 50       	subi	r18, 0x02	; 2
 8c4:	31 09       	sbc	r19, r1
 8c6:	39 83       	std	Y+1, r19	; 0x01
 8c8:	28 83       	st	Y, r18
 8ca:	3a c0       	rjmp	.+116    	; 0x940 <malloc+0x128>
 8cc:	20 91 24 01 	lds	r18, 0x0124
 8d0:	30 91 25 01 	lds	r19, 0x0125
 8d4:	23 2b       	or	r18, r19
 8d6:	41 f4       	brne	.+16     	; 0x8e8 <malloc+0xd0>
 8d8:	20 91 02 01 	lds	r18, 0x0102
 8dc:	30 91 03 01 	lds	r19, 0x0103
 8e0:	30 93 25 01 	sts	0x0125, r19
 8e4:	20 93 24 01 	sts	0x0124, r18
 8e8:	20 91 00 01 	lds	r18, 0x0100
 8ec:	30 91 01 01 	lds	r19, 0x0101
 8f0:	21 15       	cp	r18, r1
 8f2:	31 05       	cpc	r19, r1
 8f4:	41 f4       	brne	.+16     	; 0x906 <malloc+0xee>
 8f6:	2d b7       	in	r18, 0x3d	; 61
 8f8:	3e b7       	in	r19, 0x3e	; 62
 8fa:	40 91 04 01 	lds	r20, 0x0104
 8fe:	50 91 05 01 	lds	r21, 0x0105
 902:	24 1b       	sub	r18, r20
 904:	35 0b       	sbc	r19, r21
 906:	e0 91 24 01 	lds	r30, 0x0124
 90a:	f0 91 25 01 	lds	r31, 0x0125
 90e:	e2 17       	cp	r30, r18
 910:	f3 07       	cpc	r31, r19
 912:	a0 f4       	brcc	.+40     	; 0x93c <malloc+0x124>
 914:	2e 1b       	sub	r18, r30
 916:	3f 0b       	sbc	r19, r31
 918:	28 17       	cp	r18, r24
 91a:	39 07       	cpc	r19, r25
 91c:	78 f0       	brcs	.+30     	; 0x93c <malloc+0x124>
 91e:	ac 01       	movw	r20, r24
 920:	4e 5f       	subi	r20, 0xFE	; 254
 922:	5f 4f       	sbci	r21, 0xFF	; 255
 924:	24 17       	cp	r18, r20
 926:	35 07       	cpc	r19, r21
 928:	48 f0       	brcs	.+18     	; 0x93c <malloc+0x124>
 92a:	4e 0f       	add	r20, r30
 92c:	5f 1f       	adc	r21, r31
 92e:	50 93 25 01 	sts	0x0125, r21
 932:	40 93 24 01 	sts	0x0124, r20
 936:	81 93       	st	Z+, r24
 938:	91 93       	st	Z+, r25
 93a:	02 c0       	rjmp	.+4      	; 0x940 <malloc+0x128>
 93c:	e0 e0       	ldi	r30, 0x00	; 0
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	cf 01       	movw	r24, r30
 942:	df 91       	pop	r29
 944:	cf 91       	pop	r28
 946:	08 95       	ret

00000948 <free>:
 948:	cf 93       	push	r28
 94a:	df 93       	push	r29
 94c:	00 97       	sbiw	r24, 0x00	; 0
 94e:	09 f4       	brne	.+2      	; 0x952 <free+0xa>
 950:	87 c0       	rjmp	.+270    	; 0xa60 <free+0x118>
 952:	fc 01       	movw	r30, r24
 954:	32 97       	sbiw	r30, 0x02	; 2
 956:	13 82       	std	Z+3, r1	; 0x03
 958:	12 82       	std	Z+2, r1	; 0x02
 95a:	c0 91 26 01 	lds	r28, 0x0126
 95e:	d0 91 27 01 	lds	r29, 0x0127
 962:	20 97       	sbiw	r28, 0x00	; 0
 964:	81 f4       	brne	.+32     	; 0x986 <free+0x3e>
 966:	20 81       	ld	r18, Z
 968:	31 81       	ldd	r19, Z+1	; 0x01
 96a:	28 0f       	add	r18, r24
 96c:	39 1f       	adc	r19, r25
 96e:	80 91 24 01 	lds	r24, 0x0124
 972:	90 91 25 01 	lds	r25, 0x0125
 976:	82 17       	cp	r24, r18
 978:	93 07       	cpc	r25, r19
 97a:	79 f5       	brne	.+94     	; 0x9da <free+0x92>
 97c:	f0 93 25 01 	sts	0x0125, r31
 980:	e0 93 24 01 	sts	0x0124, r30
 984:	6d c0       	rjmp	.+218    	; 0xa60 <free+0x118>
 986:	de 01       	movw	r26, r28
 988:	20 e0       	ldi	r18, 0x00	; 0
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	ae 17       	cp	r26, r30
 98e:	bf 07       	cpc	r27, r31
 990:	50 f4       	brcc	.+20     	; 0x9a6 <free+0x5e>
 992:	12 96       	adiw	r26, 0x02	; 2
 994:	4d 91       	ld	r20, X+
 996:	5c 91       	ld	r21, X
 998:	13 97       	sbiw	r26, 0x03	; 3
 99a:	9d 01       	movw	r18, r26
 99c:	41 15       	cp	r20, r1
 99e:	51 05       	cpc	r21, r1
 9a0:	09 f1       	breq	.+66     	; 0x9e4 <free+0x9c>
 9a2:	da 01       	movw	r26, r20
 9a4:	f3 cf       	rjmp	.-26     	; 0x98c <free+0x44>
 9a6:	b3 83       	std	Z+3, r27	; 0x03
 9a8:	a2 83       	std	Z+2, r26	; 0x02
 9aa:	40 81       	ld	r20, Z
 9ac:	51 81       	ldd	r21, Z+1	; 0x01
 9ae:	84 0f       	add	r24, r20
 9b0:	95 1f       	adc	r25, r21
 9b2:	8a 17       	cp	r24, r26
 9b4:	9b 07       	cpc	r25, r27
 9b6:	71 f4       	brne	.+28     	; 0x9d4 <free+0x8c>
 9b8:	8d 91       	ld	r24, X+
 9ba:	9c 91       	ld	r25, X
 9bc:	11 97       	sbiw	r26, 0x01	; 1
 9be:	84 0f       	add	r24, r20
 9c0:	95 1f       	adc	r25, r21
 9c2:	02 96       	adiw	r24, 0x02	; 2
 9c4:	91 83       	std	Z+1, r25	; 0x01
 9c6:	80 83       	st	Z, r24
 9c8:	12 96       	adiw	r26, 0x02	; 2
 9ca:	8d 91       	ld	r24, X+
 9cc:	9c 91       	ld	r25, X
 9ce:	13 97       	sbiw	r26, 0x03	; 3
 9d0:	93 83       	std	Z+3, r25	; 0x03
 9d2:	82 83       	std	Z+2, r24	; 0x02
 9d4:	21 15       	cp	r18, r1
 9d6:	31 05       	cpc	r19, r1
 9d8:	29 f4       	brne	.+10     	; 0x9e4 <free+0x9c>
 9da:	f0 93 27 01 	sts	0x0127, r31
 9de:	e0 93 26 01 	sts	0x0126, r30
 9e2:	3e c0       	rjmp	.+124    	; 0xa60 <free+0x118>
 9e4:	d9 01       	movw	r26, r18
 9e6:	13 96       	adiw	r26, 0x03	; 3
 9e8:	fc 93       	st	X, r31
 9ea:	ee 93       	st	-X, r30
 9ec:	12 97       	sbiw	r26, 0x02	; 2
 9ee:	4d 91       	ld	r20, X+
 9f0:	5d 91       	ld	r21, X+
 9f2:	a4 0f       	add	r26, r20
 9f4:	b5 1f       	adc	r27, r21
 9f6:	ea 17       	cp	r30, r26
 9f8:	fb 07       	cpc	r31, r27
 9fa:	79 f4       	brne	.+30     	; 0xa1a <free+0xd2>
 9fc:	80 81       	ld	r24, Z
 9fe:	91 81       	ldd	r25, Z+1	; 0x01
 a00:	84 0f       	add	r24, r20
 a02:	95 1f       	adc	r25, r21
 a04:	02 96       	adiw	r24, 0x02	; 2
 a06:	d9 01       	movw	r26, r18
 a08:	11 96       	adiw	r26, 0x01	; 1
 a0a:	9c 93       	st	X, r25
 a0c:	8e 93       	st	-X, r24
 a0e:	82 81       	ldd	r24, Z+2	; 0x02
 a10:	93 81       	ldd	r25, Z+3	; 0x03
 a12:	13 96       	adiw	r26, 0x03	; 3
 a14:	9c 93       	st	X, r25
 a16:	8e 93       	st	-X, r24
 a18:	12 97       	sbiw	r26, 0x02	; 2
 a1a:	e0 e0       	ldi	r30, 0x00	; 0
 a1c:	f0 e0       	ldi	r31, 0x00	; 0
 a1e:	8a 81       	ldd	r24, Y+2	; 0x02
 a20:	9b 81       	ldd	r25, Y+3	; 0x03
 a22:	00 97       	sbiw	r24, 0x00	; 0
 a24:	19 f0       	breq	.+6      	; 0xa2c <free+0xe4>
 a26:	fe 01       	movw	r30, r28
 a28:	ec 01       	movw	r28, r24
 a2a:	f9 cf       	rjmp	.-14     	; 0xa1e <free+0xd6>
 a2c:	ce 01       	movw	r24, r28
 a2e:	02 96       	adiw	r24, 0x02	; 2
 a30:	28 81       	ld	r18, Y
 a32:	39 81       	ldd	r19, Y+1	; 0x01
 a34:	82 0f       	add	r24, r18
 a36:	93 1f       	adc	r25, r19
 a38:	20 91 24 01 	lds	r18, 0x0124
 a3c:	30 91 25 01 	lds	r19, 0x0125
 a40:	28 17       	cp	r18, r24
 a42:	39 07       	cpc	r19, r25
 a44:	69 f4       	brne	.+26     	; 0xa60 <free+0x118>
 a46:	30 97       	sbiw	r30, 0x00	; 0
 a48:	29 f4       	brne	.+10     	; 0xa54 <free+0x10c>
 a4a:	10 92 27 01 	sts	0x0127, r1
 a4e:	10 92 26 01 	sts	0x0126, r1
 a52:	02 c0       	rjmp	.+4      	; 0xa58 <free+0x110>
 a54:	13 82       	std	Z+3, r1	; 0x03
 a56:	12 82       	std	Z+2, r1	; 0x02
 a58:	d0 93 25 01 	sts	0x0125, r29
 a5c:	c0 93 24 01 	sts	0x0124, r28
 a60:	df 91       	pop	r29
 a62:	cf 91       	pop	r28
 a64:	08 95       	ret

00000a66 <strnlen_P>:
 a66:	fc 01       	movw	r30, r24
 a68:	05 90       	lpm	r0, Z+
 a6a:	61 50       	subi	r22, 0x01	; 1
 a6c:	70 40       	sbci	r23, 0x00	; 0
 a6e:	01 10       	cpse	r0, r1
 a70:	d8 f7       	brcc	.-10     	; 0xa68 <strnlen_P+0x2>
 a72:	80 95       	com	r24
 a74:	90 95       	com	r25
 a76:	8e 0f       	add	r24, r30
 a78:	9f 1f       	adc	r25, r31
 a7a:	08 95       	ret

00000a7c <memset>:
 a7c:	dc 01       	movw	r26, r24
 a7e:	01 c0       	rjmp	.+2      	; 0xa82 <memset+0x6>
 a80:	6d 93       	st	X+, r22
 a82:	41 50       	subi	r20, 0x01	; 1
 a84:	50 40       	sbci	r21, 0x00	; 0
 a86:	e0 f7       	brcc	.-8      	; 0xa80 <memset+0x4>
 a88:	08 95       	ret

00000a8a <strnlen>:
 a8a:	fc 01       	movw	r30, r24
 a8c:	61 50       	subi	r22, 0x01	; 1
 a8e:	70 40       	sbci	r23, 0x00	; 0
 a90:	01 90       	ld	r0, Z+
 a92:	01 10       	cpse	r0, r1
 a94:	d8 f7       	brcc	.-10     	; 0xa8c <strnlen+0x2>
 a96:	80 95       	com	r24
 a98:	90 95       	com	r25
 a9a:	8e 0f       	add	r24, r30
 a9c:	9f 1f       	adc	r25, r31
 a9e:	08 95       	ret

00000aa0 <fputc>:
 aa0:	0f 93       	push	r16
 aa2:	1f 93       	push	r17
 aa4:	cf 93       	push	r28
 aa6:	df 93       	push	r29
 aa8:	18 2f       	mov	r17, r24
 aaa:	09 2f       	mov	r16, r25
 aac:	eb 01       	movw	r28, r22
 aae:	8b 81       	ldd	r24, Y+3	; 0x03
 ab0:	81 fd       	sbrc	r24, 1
 ab2:	03 c0       	rjmp	.+6      	; 0xaba <fputc+0x1a>
 ab4:	8f ef       	ldi	r24, 0xFF	; 255
 ab6:	9f ef       	ldi	r25, 0xFF	; 255
 ab8:	20 c0       	rjmp	.+64     	; 0xafa <fputc+0x5a>
 aba:	82 ff       	sbrs	r24, 2
 abc:	10 c0       	rjmp	.+32     	; 0xade <fputc+0x3e>
 abe:	4e 81       	ldd	r20, Y+6	; 0x06
 ac0:	5f 81       	ldd	r21, Y+7	; 0x07
 ac2:	2c 81       	ldd	r18, Y+4	; 0x04
 ac4:	3d 81       	ldd	r19, Y+5	; 0x05
 ac6:	42 17       	cp	r20, r18
 ac8:	53 07       	cpc	r21, r19
 aca:	7c f4       	brge	.+30     	; 0xaea <fputc+0x4a>
 acc:	e8 81       	ld	r30, Y
 ace:	f9 81       	ldd	r31, Y+1	; 0x01
 ad0:	9f 01       	movw	r18, r30
 ad2:	2f 5f       	subi	r18, 0xFF	; 255
 ad4:	3f 4f       	sbci	r19, 0xFF	; 255
 ad6:	39 83       	std	Y+1, r19	; 0x01
 ad8:	28 83       	st	Y, r18
 ada:	10 83       	st	Z, r17
 adc:	06 c0       	rjmp	.+12     	; 0xaea <fputc+0x4a>
 ade:	e8 85       	ldd	r30, Y+8	; 0x08
 ae0:	f9 85       	ldd	r31, Y+9	; 0x09
 ae2:	81 2f       	mov	r24, r17
 ae4:	09 95       	icall
 ae6:	89 2b       	or	r24, r25
 ae8:	29 f7       	brne	.-54     	; 0xab4 <fputc+0x14>
 aea:	2e 81       	ldd	r18, Y+6	; 0x06
 aec:	3f 81       	ldd	r19, Y+7	; 0x07
 aee:	2f 5f       	subi	r18, 0xFF	; 255
 af0:	3f 4f       	sbci	r19, 0xFF	; 255
 af2:	3f 83       	std	Y+7, r19	; 0x07
 af4:	2e 83       	std	Y+6, r18	; 0x06
 af6:	81 2f       	mov	r24, r17
 af8:	90 2f       	mov	r25, r16
 afa:	df 91       	pop	r29
 afc:	cf 91       	pop	r28
 afe:	1f 91       	pop	r17
 b00:	0f 91       	pop	r16
 b02:	08 95       	ret

00000b04 <__ultoa_invert>:
 b04:	fa 01       	movw	r30, r20
 b06:	aa 27       	eor	r26, r26
 b08:	28 30       	cpi	r18, 0x08	; 8
 b0a:	51 f1       	breq	.+84     	; 0xb60 <__ultoa_invert+0x5c>
 b0c:	20 31       	cpi	r18, 0x10	; 16
 b0e:	81 f1       	breq	.+96     	; 0xb70 <__ultoa_invert+0x6c>
 b10:	e8 94       	clt
 b12:	6f 93       	push	r22
 b14:	6e 7f       	andi	r22, 0xFE	; 254
 b16:	6e 5f       	subi	r22, 0xFE	; 254
 b18:	7f 4f       	sbci	r23, 0xFF	; 255
 b1a:	8f 4f       	sbci	r24, 0xFF	; 255
 b1c:	9f 4f       	sbci	r25, 0xFF	; 255
 b1e:	af 4f       	sbci	r26, 0xFF	; 255
 b20:	b1 e0       	ldi	r27, 0x01	; 1
 b22:	3e d0       	rcall	.+124    	; 0xba0 <__ultoa_invert+0x9c>
 b24:	b4 e0       	ldi	r27, 0x04	; 4
 b26:	3c d0       	rcall	.+120    	; 0xba0 <__ultoa_invert+0x9c>
 b28:	67 0f       	add	r22, r23
 b2a:	78 1f       	adc	r23, r24
 b2c:	89 1f       	adc	r24, r25
 b2e:	9a 1f       	adc	r25, r26
 b30:	a1 1d       	adc	r26, r1
 b32:	68 0f       	add	r22, r24
 b34:	79 1f       	adc	r23, r25
 b36:	8a 1f       	adc	r24, r26
 b38:	91 1d       	adc	r25, r1
 b3a:	a1 1d       	adc	r26, r1
 b3c:	6a 0f       	add	r22, r26
 b3e:	71 1d       	adc	r23, r1
 b40:	81 1d       	adc	r24, r1
 b42:	91 1d       	adc	r25, r1
 b44:	a1 1d       	adc	r26, r1
 b46:	20 d0       	rcall	.+64     	; 0xb88 <__ultoa_invert+0x84>
 b48:	09 f4       	brne	.+2      	; 0xb4c <__ultoa_invert+0x48>
 b4a:	68 94       	set
 b4c:	3f 91       	pop	r19
 b4e:	2a e0       	ldi	r18, 0x0A	; 10
 b50:	26 9f       	mul	r18, r22
 b52:	11 24       	eor	r1, r1
 b54:	30 19       	sub	r19, r0
 b56:	30 5d       	subi	r19, 0xD0	; 208
 b58:	31 93       	st	Z+, r19
 b5a:	de f6       	brtc	.-74     	; 0xb12 <__ultoa_invert+0xe>
 b5c:	cf 01       	movw	r24, r30
 b5e:	08 95       	ret
 b60:	46 2f       	mov	r20, r22
 b62:	47 70       	andi	r20, 0x07	; 7
 b64:	40 5d       	subi	r20, 0xD0	; 208
 b66:	41 93       	st	Z+, r20
 b68:	b3 e0       	ldi	r27, 0x03	; 3
 b6a:	0f d0       	rcall	.+30     	; 0xb8a <__ultoa_invert+0x86>
 b6c:	c9 f7       	brne	.-14     	; 0xb60 <__ultoa_invert+0x5c>
 b6e:	f6 cf       	rjmp	.-20     	; 0xb5c <__ultoa_invert+0x58>
 b70:	46 2f       	mov	r20, r22
 b72:	4f 70       	andi	r20, 0x0F	; 15
 b74:	40 5d       	subi	r20, 0xD0	; 208
 b76:	4a 33       	cpi	r20, 0x3A	; 58
 b78:	18 f0       	brcs	.+6      	; 0xb80 <__ultoa_invert+0x7c>
 b7a:	49 5d       	subi	r20, 0xD9	; 217
 b7c:	31 fd       	sbrc	r19, 1
 b7e:	40 52       	subi	r20, 0x20	; 32
 b80:	41 93       	st	Z+, r20
 b82:	02 d0       	rcall	.+4      	; 0xb88 <__ultoa_invert+0x84>
 b84:	a9 f7       	brne	.-22     	; 0xb70 <__ultoa_invert+0x6c>
 b86:	ea cf       	rjmp	.-44     	; 0xb5c <__ultoa_invert+0x58>
 b88:	b4 e0       	ldi	r27, 0x04	; 4
 b8a:	a6 95       	lsr	r26
 b8c:	97 95       	ror	r25
 b8e:	87 95       	ror	r24
 b90:	77 95       	ror	r23
 b92:	67 95       	ror	r22
 b94:	ba 95       	dec	r27
 b96:	c9 f7       	brne	.-14     	; 0xb8a <__ultoa_invert+0x86>
 b98:	00 97       	sbiw	r24, 0x00	; 0
 b9a:	61 05       	cpc	r22, r1
 b9c:	71 05       	cpc	r23, r1
 b9e:	08 95       	ret
 ba0:	9b 01       	movw	r18, r22
 ba2:	ac 01       	movw	r20, r24
 ba4:	0a 2e       	mov	r0, r26
 ba6:	06 94       	lsr	r0
 ba8:	57 95       	ror	r21
 baa:	47 95       	ror	r20
 bac:	37 95       	ror	r19
 bae:	27 95       	ror	r18
 bb0:	ba 95       	dec	r27
 bb2:	c9 f7       	brne	.-14     	; 0xba6 <__ultoa_invert+0xa2>
 bb4:	62 0f       	add	r22, r18
 bb6:	73 1f       	adc	r23, r19
 bb8:	84 1f       	adc	r24, r20
 bba:	95 1f       	adc	r25, r21
 bbc:	a0 1d       	adc	r26, r0
 bbe:	08 95       	ret

00000bc0 <__prologue_saves__>:
 bc0:	2f 92       	push	r2
 bc2:	3f 92       	push	r3
 bc4:	4f 92       	push	r4
 bc6:	5f 92       	push	r5
 bc8:	6f 92       	push	r6
 bca:	7f 92       	push	r7
 bcc:	8f 92       	push	r8
 bce:	9f 92       	push	r9
 bd0:	af 92       	push	r10
 bd2:	bf 92       	push	r11
 bd4:	cf 92       	push	r12
 bd6:	df 92       	push	r13
 bd8:	ef 92       	push	r14
 bda:	ff 92       	push	r15
 bdc:	0f 93       	push	r16
 bde:	1f 93       	push	r17
 be0:	cf 93       	push	r28
 be2:	df 93       	push	r29
 be4:	cd b7       	in	r28, 0x3d	; 61
 be6:	de b7       	in	r29, 0x3e	; 62
 be8:	ca 1b       	sub	r28, r26
 bea:	db 0b       	sbc	r29, r27
 bec:	0f b6       	in	r0, 0x3f	; 63
 bee:	f8 94       	cli
 bf0:	de bf       	out	0x3e, r29	; 62
 bf2:	0f be       	out	0x3f, r0	; 63
 bf4:	cd bf       	out	0x3d, r28	; 61
 bf6:	09 94       	ijmp

00000bf8 <__epilogue_restores__>:
 bf8:	2a 88       	ldd	r2, Y+18	; 0x12
 bfa:	39 88       	ldd	r3, Y+17	; 0x11
 bfc:	48 88       	ldd	r4, Y+16	; 0x10
 bfe:	5f 84       	ldd	r5, Y+15	; 0x0f
 c00:	6e 84       	ldd	r6, Y+14	; 0x0e
 c02:	7d 84       	ldd	r7, Y+13	; 0x0d
 c04:	8c 84       	ldd	r8, Y+12	; 0x0c
 c06:	9b 84       	ldd	r9, Y+11	; 0x0b
 c08:	aa 84       	ldd	r10, Y+10	; 0x0a
 c0a:	b9 84       	ldd	r11, Y+9	; 0x09
 c0c:	c8 84       	ldd	r12, Y+8	; 0x08
 c0e:	df 80       	ldd	r13, Y+7	; 0x07
 c10:	ee 80       	ldd	r14, Y+6	; 0x06
 c12:	fd 80       	ldd	r15, Y+5	; 0x05
 c14:	0c 81       	ldd	r16, Y+4	; 0x04
 c16:	1b 81       	ldd	r17, Y+3	; 0x03
 c18:	aa 81       	ldd	r26, Y+2	; 0x02
 c1a:	b9 81       	ldd	r27, Y+1	; 0x01
 c1c:	ce 0f       	add	r28, r30
 c1e:	d1 1d       	adc	r29, r1
 c20:	0f b6       	in	r0, 0x3f	; 63
 c22:	f8 94       	cli
 c24:	de bf       	out	0x3e, r29	; 62
 c26:	0f be       	out	0x3f, r0	; 63
 c28:	cd bf       	out	0x3d, r28	; 61
 c2a:	ed 01       	movw	r28, r26
 c2c:	08 95       	ret

00000c2e <_exit>:
 c2e:	f8 94       	cli

00000c30 <__stop_program>:
 c30:	ff cf       	rjmp	.-2      	; 0xc30 <__stop_program>
