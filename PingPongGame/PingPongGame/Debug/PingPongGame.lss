
PingPongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000049c  00000530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000049c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080010a  0080010a  0000053a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000053a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000596  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001062  00000000  00000000  0000069e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000718  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000067a  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  00002494  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f1  00000000  00000000  000026a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000383  00000000  00000000  00002a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00002e18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

uint8_t read_adc(int channel)
{
	volatile uint8_t *ADC = (uint8_t*)0x1400;
	uint8_t mux_adress = channel;
	ADC[0] = mux_adress;
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
	_delay_us(500);
	uint8_t val = ADC[0];
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
	return val;
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
{
	bit_set(MCUCR, SRE);
	
	bit_set(SFIOR, XMM2);
	bit_clear(SFIOR, XMM1);
	bit_clear(SFIOR, XMM0);
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

	bit_set(MCUCR, SRW11);
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
	bit_clear(EMCUCR, SRW10);	
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
void SRAM_test(void) 
{ 
	MCUCR |= (1 << SRE);
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM 
	uint16_t ext_ram_size = 0x800; 
	uint16_t write_errors = 0; 
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
		uint8_t some_value = rand(); 
		ext_ram[i] = some_value; uint8_t retreived_value = ext_ram[i]; 
		
		if (retreived_value != some_value) 
		{ 
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value); 
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored srand(seed); 
	
	for (uint16_t i = 0; i < ext_ram_size; i++) 
	{ 
		uint8_t some_value = rand(); 
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
		ext_ram[i] = some_value; uint8_t retreived_value = ext_ram[i]; 
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
		
		if (retreived_value != some_value) 
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
		{ 
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value); 
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
			write_errors++; 
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
	// rand() stores some internal state, so calling this function in a loop will 
	// yield different seeds each time (unless srand() is called before this function) 
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored srand(seed); 
	
	for (uint16_t i = 0; i < ext_ram_size; i++) 
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
			write_errors++; 
		} 
	}
	
	// Retrieval phase: Check that no values were changed during or after the write phase 
	srand(seed);	// reset the PRNG to the state it had before the write phase 
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
	
	for (uint16_t i = 0; i < ext_ram_size; i++) 
  82:	ec e9       	ldi	r30, 0x9C	; 156
  84:	f4 e0       	ldi	r31, 0x04	; 4
{ 
	MCUCR |= (1 << SRE);
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM 
	uint16_t ext_ram_size = 0x800; 
	uint16_t write_errors = 0; 
	uint16_t retrieval_errors = 0;
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
		uint8_t some_value = rand(); 
		uint8_t retreived_value = ext_ram[i]; 
		
		if (retreived_value != some_value) 
		{ 
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value); 
  8a:	0d 92       	st	X+, r0
  8c:	aa 30       	cpi	r26, 0x0A	; 10
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	aa e0       	ldi	r26, 0x0A	; 10
	// Retrieval phase: Check that no values were changed during or after the write phase 
	srand(seed);	// reset the PRNG to the state it had before the write phase 
	
	for (uint16_t i = 0; i < ext_ram_size; i++) 
	{ 
		uint8_t some_value = rand(); 
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a6 31       	cpi	r26, 0x16	; 22
		uint8_t retreived_value = ext_ram[i]; 
  9e:	b2 07       	cpc	r27, r18
		
		if (retreived_value != some_value) 
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
		{ 
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value); 
  a6:	0c 94 4c 02 	jmp	0x498	; 0x498 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:
  ae:	8f e1       	ldi	r24, 0x1F	; 31
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 a8 00 	call	0x150	; 0x150 <USART_Init>
  b6:	0e 94 72 00 	call	0xe4	; 0xe4 <init_program>
			retrieval_errors++; 
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_c>
  c0:	80 e1       	ldi	r24, 0x10	; 16
  c2:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_c>
  c6:	80 eb       	ldi	r24, 0xB0	; 176
  c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <write_c>
  cc:	8f e0       	ldi	r24, 0x0F	; 15
  ce:	0e 94 6e 00 	call	0xdc	; 0xdc <write_d>
	}
	
	// Retrieval phase: Check that no values were changed during or after the write phase 
	srand(seed);	// reset the PRNG to the state it had before the write phase 
	
	for (uint16_t i = 0; i < ext_ram_size; i++) 
  d2:	f3 cf       	rjmp	.-26     	; 0xba <main+0xc>

000000d4 <write_c>:
  d4:	80 93 00 10 	sts	0x1000, r24
  d8:	80 e0       	ldi	r24, 0x00	; 0
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value); 
			retrieval_errors++; 
		} 
	} 
	
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors); 
  da:	08 95       	ret

000000dc <write_d>:
  dc:	80 93 00 12 	sts	0x1200, r24
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	08 95       	ret

000000e4 <init_program>:
  e4:	e0 e0       	ldi	r30, 0x00	; 0
  e6:	f0 e1       	ldi	r31, 0x10	; 16
  e8:	8e ea       	ldi	r24, 0xAE	; 174
  ea:	80 83       	st	Z, r24
  ec:	81 ea       	ldi	r24, 0xA1	; 161
  ee:	80 83       	st	Z, r24
  f0:	8a ed       	ldi	r24, 0xDA	; 218
  f2:	80 83       	st	Z, r24
  f4:	82 e1       	ldi	r24, 0x12	; 18
  f6:	80 83       	st	Z, r24
  f8:	88 ec       	ldi	r24, 0xC8	; 200
  fa:	80 83       	st	Z, r24
  fc:	88 ea       	ldi	r24, 0xA8	; 168
  fe:	80 83       	st	Z, r24
 100:	8f e3       	ldi	r24, 0x3F	; 63
 102:	80 83       	st	Z, r24
 104:	85 ed       	ldi	r24, 0xD5	; 213
 106:	80 83       	st	Z, r24
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	80 83       	st	Z, r24
#include "define.h"

uint8_t write_c(unsigned char out_com)
{
	volatile char *OLEDc = (char*)OLED_COMMAND_MEMORY_START;
	*OLEDc = out_com;
 10c:	81 e8       	ldi	r24, 0x81	; 129
 10e:	80 83       	st	Z, r24
 110:	80 e5       	ldi	r24, 0x50	; 80
 112:	80 83       	st	Z, r24
 114:	89 ed       	ldi	r24, 0xD9	; 217
 116:	80 83       	st	Z, r24
 118:	81 e2       	ldi	r24, 0x21	; 33
 11a:	80 83       	st	Z, r24
 11c:	80 e2       	ldi	r24, 0x20	; 32
 11e:	80 83       	st	Z, r24
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	80 83       	st	Z, r24
 124:	8d eb       	ldi	r24, 0xBD	; 189
 126:	80 83       	st	Z, r24
 128:	80 e3       	ldi	r24, 0x30	; 48
 12a:	80 83       	st	Z, r24
 12c:	8d ea       	ldi	r24, 0xAD	; 173
 12e:	80 83       	st	Z, r24
 130:	10 82       	st	Z, r1
 132:	84 ea       	ldi	r24, 0xA4	; 164
 134:	80 83       	st	Z, r24
 136:	86 ea       	ldi	r24, 0xA6	; 166
 138:	80 83       	st	Z, r24
 13a:	8f ea       	ldi	r24, 0xAF	; 175
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !(UCSR0A & (1 << UDRE0)) );
 140:	5d 9b       	sbis	0x0b, 5	; 11
 142:	fe cf       	rjmp	.-4      	; 0x140 <USART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
 144:	8c b9       	out	0x0c, r24	; 12
 146:	08 95       	ret

00000148 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1 << RXC0)) );
 148:	5f 9b       	sbis	0x0b, 7	; 11
 14a:	fe cf       	rjmp	.-4      	; 0x148 <USART_Receive>
	
	/* Get and return received data from buffer */
	return UDR0;
 14c:	8c b1       	in	r24, 0x0c	; 12
}
 14e:	08 95       	ret

00000150 <USART_Init>:

FILE *uart;

void USART_Init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr >> 8);
 150:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 152:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 154:	88 e1       	ldi	r24, 0x18	; 24
 156:	8a b9       	out	0x0a, r24	; 10
	
	uart = fdevopen(&USART_Transmit, &USART_Receive);
 158:	64 ea       	ldi	r22, 0xA4	; 164
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	80 ea       	ldi	r24, 0xA0	; 160
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 b7 00 	call	0x16e	; 0x16e <fdevopen>
 164:	90 93 0b 01 	sts	0x010B, r25
 168:	80 93 0a 01 	sts	0x010A, r24
 16c:	08 95       	ret

0000016e <fdevopen>:
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
 178:	8b 01       	movw	r16, r22
 17a:	00 97       	sbiw	r24, 0x00	; 0
 17c:	31 f4       	brne	.+12     	; 0x18a <fdevopen+0x1c>
 17e:	61 15       	cp	r22, r1
 180:	71 05       	cpc	r23, r1
 182:	19 f4       	brne	.+6      	; 0x18a <fdevopen+0x1c>
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	38 c0       	rjmp	.+112    	; 0x1fa <fdevopen+0x8c>
 18a:	6e e0       	ldi	r22, 0x0E	; 14
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 02 01 	call	0x204	; 0x204 <calloc>
 196:	fc 01       	movw	r30, r24
 198:	00 97       	sbiw	r24, 0x00	; 0
 19a:	a1 f3       	breq	.-24     	; 0x184 <fdevopen+0x16>
 19c:	80 e8       	ldi	r24, 0x80	; 128
 19e:	83 83       	std	Z+3, r24	; 0x03
 1a0:	01 15       	cp	r16, r1
 1a2:	11 05       	cpc	r17, r1
 1a4:	71 f0       	breq	.+28     	; 0x1c2 <fdevopen+0x54>
 1a6:	13 87       	std	Z+11, r17	; 0x0b
 1a8:	02 87       	std	Z+10, r16	; 0x0a
 1aa:	81 e8       	ldi	r24, 0x81	; 129
 1ac:	83 83       	std	Z+3, r24	; 0x03
 1ae:	80 91 0c 01 	lds	r24, 0x010C
 1b2:	90 91 0d 01 	lds	r25, 0x010D
 1b6:	89 2b       	or	r24, r25
 1b8:	21 f4       	brne	.+8      	; 0x1c2 <fdevopen+0x54>
 1ba:	f0 93 0d 01 	sts	0x010D, r31
 1be:	e0 93 0c 01 	sts	0x010C, r30
 1c2:	20 97       	sbiw	r28, 0x00	; 0
 1c4:	c9 f0       	breq	.+50     	; 0x1f8 <fdevopen+0x8a>
 1c6:	d1 87       	std	Z+9, r29	; 0x09
 1c8:	c0 87       	std	Z+8, r28	; 0x08
 1ca:	83 81       	ldd	r24, Z+3	; 0x03
 1cc:	82 60       	ori	r24, 0x02	; 2
 1ce:	83 83       	std	Z+3, r24	; 0x03
 1d0:	80 91 0e 01 	lds	r24, 0x010E
 1d4:	90 91 0f 01 	lds	r25, 0x010F
 1d8:	89 2b       	or	r24, r25
 1da:	71 f4       	brne	.+28     	; 0x1f8 <fdevopen+0x8a>
 1dc:	f0 93 0f 01 	sts	0x010F, r31
 1e0:	e0 93 0e 01 	sts	0x010E, r30
 1e4:	80 91 10 01 	lds	r24, 0x0110
 1e8:	90 91 11 01 	lds	r25, 0x0111
 1ec:	89 2b       	or	r24, r25
 1ee:	21 f4       	brne	.+8      	; 0x1f8 <fdevopen+0x8a>
 1f0:	f0 93 11 01 	sts	0x0111, r31
 1f4:	e0 93 10 01 	sts	0x0110, r30
 1f8:	cf 01       	movw	r24, r30
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	08 95       	ret

00000204 <calloc>:
 204:	0f 93       	push	r16
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	86 9f       	mul	r24, r22
 20e:	80 01       	movw	r16, r0
 210:	87 9f       	mul	r24, r23
 212:	10 0d       	add	r17, r0
 214:	96 9f       	mul	r25, r22
 216:	10 0d       	add	r17, r0
 218:	11 24       	eor	r1, r1
 21a:	c8 01       	movw	r24, r16
 21c:	0e 94 1e 01 	call	0x23c	; 0x23c <malloc>
 220:	ec 01       	movw	r28, r24
 222:	00 97       	sbiw	r24, 0x00	; 0
 224:	29 f0       	breq	.+10     	; 0x230 <calloc+0x2c>
 226:	a8 01       	movw	r20, r16
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	0e 94 45 02 	call	0x48a	; 0x48a <memset>
 230:	ce 01       	movw	r24, r28
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	08 95       	ret

0000023c <malloc>:
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	82 30       	cpi	r24, 0x02	; 2
 242:	91 05       	cpc	r25, r1
 244:	10 f4       	brcc	.+4      	; 0x24a <malloc+0xe>
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	e0 91 14 01 	lds	r30, 0x0114
 24e:	f0 91 15 01 	lds	r31, 0x0115
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	a0 e0       	ldi	r26, 0x00	; 0
 258:	b0 e0       	ldi	r27, 0x00	; 0
 25a:	30 97       	sbiw	r30, 0x00	; 0
 25c:	39 f1       	breq	.+78     	; 0x2ac <malloc+0x70>
 25e:	40 81       	ld	r20, Z
 260:	51 81       	ldd	r21, Z+1	; 0x01
 262:	48 17       	cp	r20, r24
 264:	59 07       	cpc	r21, r25
 266:	b8 f0       	brcs	.+46     	; 0x296 <malloc+0x5a>
 268:	48 17       	cp	r20, r24
 26a:	59 07       	cpc	r21, r25
 26c:	71 f4       	brne	.+28     	; 0x28a <malloc+0x4e>
 26e:	82 81       	ldd	r24, Z+2	; 0x02
 270:	93 81       	ldd	r25, Z+3	; 0x03
 272:	10 97       	sbiw	r26, 0x00	; 0
 274:	29 f0       	breq	.+10     	; 0x280 <malloc+0x44>
 276:	13 96       	adiw	r26, 0x03	; 3
 278:	9c 93       	st	X, r25
 27a:	8e 93       	st	-X, r24
 27c:	12 97       	sbiw	r26, 0x02	; 2
 27e:	2c c0       	rjmp	.+88     	; 0x2d8 <malloc+0x9c>
 280:	90 93 15 01 	sts	0x0115, r25
 284:	80 93 14 01 	sts	0x0114, r24
 288:	27 c0       	rjmp	.+78     	; 0x2d8 <malloc+0x9c>
 28a:	21 15       	cp	r18, r1
 28c:	31 05       	cpc	r19, r1
 28e:	31 f0       	breq	.+12     	; 0x29c <malloc+0x60>
 290:	42 17       	cp	r20, r18
 292:	53 07       	cpc	r21, r19
 294:	18 f0       	brcs	.+6      	; 0x29c <malloc+0x60>
 296:	a9 01       	movw	r20, r18
 298:	db 01       	movw	r26, r22
 29a:	01 c0       	rjmp	.+2      	; 0x29e <malloc+0x62>
 29c:	ef 01       	movw	r28, r30
 29e:	9a 01       	movw	r18, r20
 2a0:	bd 01       	movw	r22, r26
 2a2:	df 01       	movw	r26, r30
 2a4:	02 80       	ldd	r0, Z+2	; 0x02
 2a6:	f3 81       	ldd	r31, Z+3	; 0x03
 2a8:	e0 2d       	mov	r30, r0
 2aa:	d7 cf       	rjmp	.-82     	; 0x25a <malloc+0x1e>
 2ac:	21 15       	cp	r18, r1
 2ae:	31 05       	cpc	r19, r1
 2b0:	f9 f0       	breq	.+62     	; 0x2f0 <malloc+0xb4>
 2b2:	28 1b       	sub	r18, r24
 2b4:	39 0b       	sbc	r19, r25
 2b6:	24 30       	cpi	r18, 0x04	; 4
 2b8:	31 05       	cpc	r19, r1
 2ba:	80 f4       	brcc	.+32     	; 0x2dc <malloc+0xa0>
 2bc:	8a 81       	ldd	r24, Y+2	; 0x02
 2be:	9b 81       	ldd	r25, Y+3	; 0x03
 2c0:	61 15       	cp	r22, r1
 2c2:	71 05       	cpc	r23, r1
 2c4:	21 f0       	breq	.+8      	; 0x2ce <malloc+0x92>
 2c6:	fb 01       	movw	r30, r22
 2c8:	93 83       	std	Z+3, r25	; 0x03
 2ca:	82 83       	std	Z+2, r24	; 0x02
 2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <malloc+0x9a>
 2ce:	90 93 15 01 	sts	0x0115, r25
 2d2:	80 93 14 01 	sts	0x0114, r24
 2d6:	fe 01       	movw	r30, r28
 2d8:	32 96       	adiw	r30, 0x02	; 2
 2da:	44 c0       	rjmp	.+136    	; 0x364 <malloc+0x128>
 2dc:	fe 01       	movw	r30, r28
 2de:	e2 0f       	add	r30, r18
 2e0:	f3 1f       	adc	r31, r19
 2e2:	81 93       	st	Z+, r24
 2e4:	91 93       	st	Z+, r25
 2e6:	22 50       	subi	r18, 0x02	; 2
 2e8:	31 09       	sbc	r19, r1
 2ea:	39 83       	std	Y+1, r19	; 0x01
 2ec:	28 83       	st	Y, r18
 2ee:	3a c0       	rjmp	.+116    	; 0x364 <malloc+0x128>
 2f0:	20 91 12 01 	lds	r18, 0x0112
 2f4:	30 91 13 01 	lds	r19, 0x0113
 2f8:	23 2b       	or	r18, r19
 2fa:	41 f4       	brne	.+16     	; 0x30c <malloc+0xd0>
 2fc:	20 91 06 01 	lds	r18, 0x0106
 300:	30 91 07 01 	lds	r19, 0x0107
 304:	30 93 13 01 	sts	0x0113, r19
 308:	20 93 12 01 	sts	0x0112, r18
 30c:	20 91 04 01 	lds	r18, 0x0104
 310:	30 91 05 01 	lds	r19, 0x0105
 314:	21 15       	cp	r18, r1
 316:	31 05       	cpc	r19, r1
 318:	41 f4       	brne	.+16     	; 0x32a <malloc+0xee>
 31a:	2d b7       	in	r18, 0x3d	; 61
 31c:	3e b7       	in	r19, 0x3e	; 62
 31e:	40 91 08 01 	lds	r20, 0x0108
 322:	50 91 09 01 	lds	r21, 0x0109
 326:	24 1b       	sub	r18, r20
 328:	35 0b       	sbc	r19, r21
 32a:	e0 91 12 01 	lds	r30, 0x0112
 32e:	f0 91 13 01 	lds	r31, 0x0113
 332:	e2 17       	cp	r30, r18
 334:	f3 07       	cpc	r31, r19
 336:	a0 f4       	brcc	.+40     	; 0x360 <malloc+0x124>
 338:	2e 1b       	sub	r18, r30
 33a:	3f 0b       	sbc	r19, r31
 33c:	28 17       	cp	r18, r24
 33e:	39 07       	cpc	r19, r25
 340:	78 f0       	brcs	.+30     	; 0x360 <malloc+0x124>
 342:	ac 01       	movw	r20, r24
 344:	4e 5f       	subi	r20, 0xFE	; 254
 346:	5f 4f       	sbci	r21, 0xFF	; 255
 348:	24 17       	cp	r18, r20
 34a:	35 07       	cpc	r19, r21
 34c:	48 f0       	brcs	.+18     	; 0x360 <malloc+0x124>
 34e:	4e 0f       	add	r20, r30
 350:	5f 1f       	adc	r21, r31
 352:	50 93 13 01 	sts	0x0113, r21
 356:	40 93 12 01 	sts	0x0112, r20
 35a:	81 93       	st	Z+, r24
 35c:	91 93       	st	Z+, r25
 35e:	02 c0       	rjmp	.+4      	; 0x364 <malloc+0x128>
 360:	e0 e0       	ldi	r30, 0x00	; 0
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	cf 01       	movw	r24, r30
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <free>:
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	00 97       	sbiw	r24, 0x00	; 0
 372:	09 f4       	brne	.+2      	; 0x376 <free+0xa>
 374:	87 c0       	rjmp	.+270    	; 0x484 <free+0x118>
 376:	fc 01       	movw	r30, r24
 378:	32 97       	sbiw	r30, 0x02	; 2
 37a:	13 82       	std	Z+3, r1	; 0x03
 37c:	12 82       	std	Z+2, r1	; 0x02
 37e:	c0 91 14 01 	lds	r28, 0x0114
 382:	d0 91 15 01 	lds	r29, 0x0115
 386:	20 97       	sbiw	r28, 0x00	; 0
 388:	81 f4       	brne	.+32     	; 0x3aa <free+0x3e>
 38a:	20 81       	ld	r18, Z
 38c:	31 81       	ldd	r19, Z+1	; 0x01
 38e:	28 0f       	add	r18, r24
 390:	39 1f       	adc	r19, r25
 392:	80 91 12 01 	lds	r24, 0x0112
 396:	90 91 13 01 	lds	r25, 0x0113
 39a:	82 17       	cp	r24, r18
 39c:	93 07       	cpc	r25, r19
 39e:	79 f5       	brne	.+94     	; 0x3fe <free+0x92>
 3a0:	f0 93 13 01 	sts	0x0113, r31
 3a4:	e0 93 12 01 	sts	0x0112, r30
 3a8:	6d c0       	rjmp	.+218    	; 0x484 <free+0x118>
 3aa:	de 01       	movw	r26, r28
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	ae 17       	cp	r26, r30
 3b2:	bf 07       	cpc	r27, r31
 3b4:	50 f4       	brcc	.+20     	; 0x3ca <free+0x5e>
 3b6:	12 96       	adiw	r26, 0x02	; 2
 3b8:	4d 91       	ld	r20, X+
 3ba:	5c 91       	ld	r21, X
 3bc:	13 97       	sbiw	r26, 0x03	; 3
 3be:	9d 01       	movw	r18, r26
 3c0:	41 15       	cp	r20, r1
 3c2:	51 05       	cpc	r21, r1
 3c4:	09 f1       	breq	.+66     	; 0x408 <free+0x9c>
 3c6:	da 01       	movw	r26, r20
 3c8:	f3 cf       	rjmp	.-26     	; 0x3b0 <free+0x44>
 3ca:	b3 83       	std	Z+3, r27	; 0x03
 3cc:	a2 83       	std	Z+2, r26	; 0x02
 3ce:	40 81       	ld	r20, Z
 3d0:	51 81       	ldd	r21, Z+1	; 0x01
 3d2:	84 0f       	add	r24, r20
 3d4:	95 1f       	adc	r25, r21
 3d6:	8a 17       	cp	r24, r26
 3d8:	9b 07       	cpc	r25, r27
 3da:	71 f4       	brne	.+28     	; 0x3f8 <free+0x8c>
 3dc:	8d 91       	ld	r24, X+
 3de:	9c 91       	ld	r25, X
 3e0:	11 97       	sbiw	r26, 0x01	; 1
 3e2:	84 0f       	add	r24, r20
 3e4:	95 1f       	adc	r25, r21
 3e6:	02 96       	adiw	r24, 0x02	; 2
 3e8:	91 83       	std	Z+1, r25	; 0x01
 3ea:	80 83       	st	Z, r24
 3ec:	12 96       	adiw	r26, 0x02	; 2
 3ee:	8d 91       	ld	r24, X+
 3f0:	9c 91       	ld	r25, X
 3f2:	13 97       	sbiw	r26, 0x03	; 3
 3f4:	93 83       	std	Z+3, r25	; 0x03
 3f6:	82 83       	std	Z+2, r24	; 0x02
 3f8:	21 15       	cp	r18, r1
 3fa:	31 05       	cpc	r19, r1
 3fc:	29 f4       	brne	.+10     	; 0x408 <free+0x9c>
 3fe:	f0 93 15 01 	sts	0x0115, r31
 402:	e0 93 14 01 	sts	0x0114, r30
 406:	3e c0       	rjmp	.+124    	; 0x484 <free+0x118>
 408:	d9 01       	movw	r26, r18
 40a:	13 96       	adiw	r26, 0x03	; 3
 40c:	fc 93       	st	X, r31
 40e:	ee 93       	st	-X, r30
 410:	12 97       	sbiw	r26, 0x02	; 2
 412:	4d 91       	ld	r20, X+
 414:	5d 91       	ld	r21, X+
 416:	a4 0f       	add	r26, r20
 418:	b5 1f       	adc	r27, r21
 41a:	ea 17       	cp	r30, r26
 41c:	fb 07       	cpc	r31, r27
 41e:	79 f4       	brne	.+30     	; 0x43e <free+0xd2>
 420:	80 81       	ld	r24, Z
 422:	91 81       	ldd	r25, Z+1	; 0x01
 424:	84 0f       	add	r24, r20
 426:	95 1f       	adc	r25, r21
 428:	02 96       	adiw	r24, 0x02	; 2
 42a:	d9 01       	movw	r26, r18
 42c:	11 96       	adiw	r26, 0x01	; 1
 42e:	9c 93       	st	X, r25
 430:	8e 93       	st	-X, r24
 432:	82 81       	ldd	r24, Z+2	; 0x02
 434:	93 81       	ldd	r25, Z+3	; 0x03
 436:	13 96       	adiw	r26, 0x03	; 3
 438:	9c 93       	st	X, r25
 43a:	8e 93       	st	-X, r24
 43c:	12 97       	sbiw	r26, 0x02	; 2
 43e:	e0 e0       	ldi	r30, 0x00	; 0
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	8a 81       	ldd	r24, Y+2	; 0x02
 444:	9b 81       	ldd	r25, Y+3	; 0x03
 446:	00 97       	sbiw	r24, 0x00	; 0
 448:	19 f0       	breq	.+6      	; 0x450 <free+0xe4>
 44a:	fe 01       	movw	r30, r28
 44c:	ec 01       	movw	r28, r24
 44e:	f9 cf       	rjmp	.-14     	; 0x442 <free+0xd6>
 450:	ce 01       	movw	r24, r28
 452:	02 96       	adiw	r24, 0x02	; 2
 454:	28 81       	ld	r18, Y
 456:	39 81       	ldd	r19, Y+1	; 0x01
 458:	82 0f       	add	r24, r18
 45a:	93 1f       	adc	r25, r19
 45c:	20 91 12 01 	lds	r18, 0x0112
 460:	30 91 13 01 	lds	r19, 0x0113
 464:	28 17       	cp	r18, r24
 466:	39 07       	cpc	r19, r25
 468:	69 f4       	brne	.+26     	; 0x484 <free+0x118>
 46a:	30 97       	sbiw	r30, 0x00	; 0
 46c:	29 f4       	brne	.+10     	; 0x478 <free+0x10c>
 46e:	10 92 15 01 	sts	0x0115, r1
 472:	10 92 14 01 	sts	0x0114, r1
 476:	02 c0       	rjmp	.+4      	; 0x47c <free+0x110>
 478:	13 82       	std	Z+3, r1	; 0x03
 47a:	12 82       	std	Z+2, r1	; 0x02
 47c:	d0 93 13 01 	sts	0x0113, r29
 480:	c0 93 12 01 	sts	0x0112, r28
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <memset>:
 48a:	dc 01       	movw	r26, r24
 48c:	01 c0       	rjmp	.+2      	; 0x490 <memset+0x6>
 48e:	6d 93       	st	X+, r22
 490:	41 50       	subi	r20, 0x01	; 1
 492:	50 40       	sbci	r21, 0x00	; 0
 494:	e0 f7       	brcc	.-8      	; 0x48e <memset+0x4>
 496:	08 95       	ret

00000498 <_exit>:
 498:	f8 94       	cli

0000049a <__stop_program>:
 49a:	ff cf       	rjmp	.-2      	; 0x49a <__stop_program>
