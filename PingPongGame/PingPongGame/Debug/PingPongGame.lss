
PingPongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800100  00000d3c  00000dd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008001c4  008001c4  00000e94  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000198  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018b4  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000097a  00000000  00000000  0000293c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009c7  00000000  00000000  000032b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e4  00000000  00000000  00003c80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e5  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dc1  00000000  00000000  00004549  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000190  00000000  00000000  0000530a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec e3       	ldi	r30, 0x3C	; 60
  84:	fd e0       	ldi	r31, 0x0D	; 13
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 3c       	cpi	r26, 0xC4	; 196
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a4 ec       	ldi	r26, 0xC4	; 196
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 3d       	cpi	r26, 0xD0	; 208
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 b5 01 	call	0x36a	; 0x36a <main>
  a6:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <read_adc>:

uint8_t read_adc(int channel)
{
	volatile uint8_t *ADC = (uint8_t*)0x1400;
	uint8_t mux_adress = channel;
	ADC[0] = mux_adress;
  ae:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	86 ea       	ldi	r24, 0xA6	; 166
  b4:	8a 95       	dec	r24
  b6:	f1 f7       	brne	.-4      	; 0xb4 <read_adc+0x6>
  b8:	00 c0       	rjmp	.+0      	; 0xba <read_adc+0xc>
	_delay_us(500);
	uint8_t val = ADC[0];
  ba:	80 91 00 14 	lds	r24, 0x1400
	return val;
  be:	08 95       	ret

000000c0 <CAN_init>:

void CAN_init(void)
{
		/*SPI_MasterInit();
		SPI_SlaveInit();*/
		MCP_reset();
  c0:	0e 94 bb 01 	call	0x376	; 0x376 <MCP_reset>

		MCP_write(MCP_CANCTRL, MODE_CONFIG);		
  c4:	60 e8       	ldi	r22, 0x80	; 128
  c6:	8f e0       	ldi	r24, 0x0F	; 15
  c8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MCP_write>

		/*MCP_write(MCP_CNF1, 0x20); // Write config 1
		MCP_write(MCP_CNF2, 0x92); // Write config 2
		MCP_write(MCP_CNF3, 0xC2); // Write config 3*/
		
		MCP_write(MCP_CANINTE, 0x03);	//
  cc:	63 e0       	ldi	r22, 0x03	; 3
  ce:	8b e2       	ldi	r24, 0x2B	; 43
  d0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MCP_write>
		MCP_write(MCP_CANINTF, 0x00);	//
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	8c e2       	ldi	r24, 0x2C	; 44
  d8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MCP_write>
		MCP_write(MCP_EFLG, 0x00);		//
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	8d e2       	ldi	r24, 0x2D	; 45
  e0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MCP_write>
		
		MCP_write(0x0C, 0x00);			 // Disable all interrupts
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	8c e0       	ldi	r24, 0x0C	; 12
  e8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MCP_write>
		MCP_write(0x0D, 0x00);			// Clear TXRTSCTRL
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	8d e0       	ldi	r24, 0x0D	; 13
  f0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MCP_write>
		
		
		MCP_write(MCP_RXB0CTRL, 0x60);		// Receive buffer 0 control (turn mask/filters off, receive any message) 
  f4:	60 e6       	ldi	r22, 0x60	; 96
  f6:	80 e6       	ldi	r24, 0x60	; 96
  f8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MCP_write>
		MCP_write(MCP_RXB1CTRL, 0x60);		// Receive buffer 1 control (turn mask/filters off, receive any message)
  fc:	60 e6       	ldi	r22, 0x60	; 96
  fe:	80 e7       	ldi	r24, 0x70	; 112
 100:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MCP_write>

		//MCP_write(MCP_CANCTRL, 0x44);		// Enable can controller
		MCP_bit_mod(MCP_CANCTRL,MODE_MASK,MODE_LOOPBACK);
 104:	40 e4       	ldi	r20, 0x40	; 64
 106:	60 ee       	ldi	r22, 0xE0	; 224
 108:	8f e0       	ldi	r24, 0x0F	; 15
 10a:	0e 94 ef 01 	call	0x3de	; 0x3de <MCP_bit_mod>
 10e:	08 95       	ret

00000110 <CAN_message_send>:

	
}

void CAN_message_send(msg can_tx)
{
 110:	cf 92       	push	r12
 112:	df 92       	push	r13
 114:	ef 92       	push	r14
 116:	ff 92       	push	r15
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
 124:	2b 97       	sbiw	r28, 0x0b	; 11
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	f8 94       	cli
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	cd bf       	out	0x3d, r28	; 61
 130:	e9 82       	std	Y+1, r14	; 0x01
 132:	fa 82       	std	Y+2, r15	; 0x02
 134:	0b 83       	std	Y+3, r16	; 0x03
 136:	1c 83       	std	Y+4, r17	; 0x04
 138:	2d 83       	std	Y+5, r18	; 0x05
 13a:	3e 83       	std	Y+6, r19	; 0x06
 13c:	4f 83       	std	Y+7, r20	; 0x07
 13e:	58 87       	std	Y+8, r21	; 0x08
 140:	69 87       	std	Y+9, r22	; 0x09
 142:	7a 87       	std	Y+10, r23	; 0x0a
 144:	8b 87       	std	Y+11, r24	; 0x0b
	//MCP_write(MCP_TXB0CTRL, 0x03);				
	printf("\nCan ID sent: %02x \n", can_tx.id);
 146:	ff 92       	push	r15
 148:	ef 92       	push	r14
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	9f 93       	push	r25
 150:	8f 93       	push	r24
 152:	0e 94 b6 03 	call	0x76c	; 0x76c <printf>

	MCP_write(MCP_TXB0SIDH, can_tx.id);
 156:	6e 2d       	mov	r22, r14
 158:	81 e3       	ldi	r24, 0x31	; 49
 15a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MCP_write>
	MCP_write(MCP_TXB0SIDH, can_tx.id);
 15e:	6e 2d       	mov	r22, r14
 160:	81 e3       	ldi	r24, 0x31	; 49
 162:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MCP_write>

	//MCP_write(MCP_TXB0SIDL, can_tx.id);

	MCP_write(MCP_TXB0DLC, (can_tx.length));
 166:	60 2f       	mov	r22, r16
 168:	85 e3       	ldi	r24, 0x35	; 53
 16a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MCP_write>
	for(int i = 0; i < can_tx.length; i++)
 16e:	c0 2e       	mov	r12, r16
 170:	d1 2c       	mov	r13, r1
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	1c 14       	cp	r1, r12
 17c:	1d 04       	cpc	r1, r13
 17e:	94 f4       	brge	.+36     	; 0x1a4 <CAN_message_send+0x94>
 180:	7e 01       	movw	r14, r28
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	e8 0e       	add	r14, r24
 186:	f1 1c       	adc	r15, r1
 188:	00 e0       	ldi	r16, 0x00	; 0
 18a:	10 e0       	ldi	r17, 0x00	; 0
	{
		MCP_write(MCP_TXB0D0 + i, can_tx.data[i]);
 18c:	f7 01       	movw	r30, r14
 18e:	61 91       	ld	r22, Z+
 190:	7f 01       	movw	r14, r30
 192:	86 e3       	ldi	r24, 0x36	; 54
 194:	80 0f       	add	r24, r16
 196:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MCP_write>
	MCP_write(MCP_TXB0SIDH, can_tx.id);

	//MCP_write(MCP_TXB0SIDL, can_tx.id);

	MCP_write(MCP_TXB0DLC, (can_tx.length));
	for(int i = 0; i < can_tx.length; i++)
 19a:	0f 5f       	subi	r16, 0xFF	; 255
 19c:	1f 4f       	sbci	r17, 0xFF	; 255
 19e:	0c 15       	cp	r16, r12
 1a0:	1d 05       	cpc	r17, r13
 1a2:	a4 f3       	brlt	.-24     	; 0x18c <CAN_message_send+0x7c>
	{
		MCP_write(MCP_TXB0D0 + i, can_tx.data[i]);
	}
	MCP_rts(MCP_RTS_TX0);
 1a4:	81 e8       	ldi	r24, 0x81	; 129
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <MCP_rts>
}
 1ac:	2b 96       	adiw	r28, 0x0b	; 11
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	de bf       	out	0x3e, r29	; 62
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	cd bf       	out	0x3d, r28	; 61
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	ff 90       	pop	r15
 1c2:	ef 90       	pop	r14
 1c4:	df 90       	pop	r13
 1c6:	cf 90       	pop	r12
 1c8:	08 95       	ret

000001ca <CAN_data_receive>:

void CAN_data_receive(msg *message)
{
 1ca:	ef 92       	push	r14
 1cc:	ff 92       	push	r15
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	7c 01       	movw	r14, r24
	//msg message;

	message->id = (MCP_read(MCP_RXB0SIDH));
 1d8:	81 e6       	ldi	r24, 0x61	; 97
 1da:	0e 94 ca 01 	call	0x394	; 0x394 <MCP_read>
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	f7 01       	movw	r30, r14
 1e2:	91 83       	std	Z+1, r25	; 0x01
 1e4:	80 83       	st	Z, r24

	//message.id = MCP_read(MCP_RXB0SIDL);

	message->length = MCP_read(MCP_RXB0DLC);
 1e6:	85 e6       	ldi	r24, 0x65	; 101
 1e8:	0e 94 ca 01 	call	0x394	; 0x394 <MCP_read>
 1ec:	f7 01       	movw	r30, r14
 1ee:	82 83       	std	Z+2, r24	; 0x02

	for(int i = 0; i < message->length; i++) 
 1f0:	88 23       	and	r24, r24
 1f2:	99 f0       	breq	.+38     	; 0x21a <CAN_data_receive+0x50>
 1f4:	87 01       	movw	r16, r14
 1f6:	0d 5f       	subi	r16, 0xFD	; 253
 1f8:	1f 4f       	sbci	r17, 0xFF	; 255
 1fa:	c0 e0       	ldi	r28, 0x00	; 0
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		message->data[i] = MCP_read(MCP_RXB0DM + i);
 1fe:	8c 2f       	mov	r24, r28
 200:	8a 59       	subi	r24, 0x9A	; 154
 202:	0e 94 ca 01 	call	0x394	; 0x394 <MCP_read>
 206:	f8 01       	movw	r30, r16
 208:	81 93       	st	Z+, r24
 20a:	8f 01       	movw	r16, r30

	//message.id = MCP_read(MCP_RXB0SIDL);

	message->length = MCP_read(MCP_RXB0DLC);

	for(int i = 0; i < message->length; i++) 
 20c:	21 96       	adiw	r28, 0x01	; 1
 20e:	f7 01       	movw	r30, r14
 210:	22 81       	ldd	r18, Z+2	; 0x02
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	c2 17       	cp	r28, r18
 216:	d3 07       	cpc	r29, r19
 218:	94 f3       	brlt	.-28     	; 0x1fe <CAN_data_receive+0x34>
	{
		message->data[i] = MCP_read(MCP_RXB0DM + i);
	}

	MCP_bit_mod(MCP_CANINTF,0x01,0);
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	8c e2       	ldi	r24, 0x2C	; 44
 220:	0e 94 ef 01 	call	0x3de	; 0x3de <MCP_bit_mod>

	//return message;
}
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	ff 90       	pop	r15
 22e:	ef 90       	pop	r14
 230:	08 95       	ret

00000232 <test_CAN_joystick>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	cd b7       	in	r28, 0x3d	; 61
			
	int count_menu = 4;
	int select_menu = 1;
	int sub_menu = 0;
	while(1){
	while(sub_menu == 1)
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	2b 97       	sbiw	r28, 0x0b	; 11
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
			oled_set_page(k+1);
		}
		_delay_ms(delay);
	}
	
	while (sub_menu == 0)
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
 246:	0e 94 09 02 	call	0x412	; 0x412 <ram_init>
	{
		int delay = 500; //delay in milliseconds
		oled_set_column(0);
 24a:	0e 94 c3 01 	call	0x386	; 0x386 <MCP_init>
 24e:	0e 94 60 00 	call	0xc0	; 0xc0 <CAN_init>
 252:	0f 2e       	mov	r0, r31
 254:	f0 e5       	ldi	r31, 0x50	; 80
 256:	4f 2e       	mov	r4, r31
 258:	f0 2d       	mov	r31, r0
 25a:	21 2c       	mov	r2, r1
 25c:	0f 2e       	mov	r0, r31
 25e:	f3 e0       	ldi	r31, 0x03	; 3
		oled_set_page(0);
 260:	3f 2e       	mov	r3, r31
 262:	f0 2d       	mov	r31, r0
 264:	0f 2e       	mov	r0, r31
 266:	f4 e9       	ldi	r31, 0x94	; 148
 268:	cf 2e       	mov	r12, r31
 26a:	f1 e0       	ldi	r31, 0x01	; 1
 26c:	df 2e       	mov	r13, r31
 26e:	f0 2d       	mov	r31, r0
 270:	0f 2e       	mov	r0, r31
 272:	f3 ea       	ldi	r31, 0xA3	; 163
 274:	af 2e       	mov	r10, r31
 276:	f1 e0       	ldi	r31, 0x01	; 1
		int i,j,k;
		
		unsigned int x_volt = read_adc(ADC_CHANNEL_JOY_X);
 278:	bf 2e       	mov	r11, r31
 27a:	f0 2d       	mov	r31, r0
 27c:	0f 2e       	mov	r0, r31
 27e:	f7 eb       	ldi	r31, 0xB7	; 183
 280:	6f 2e       	mov	r6, r31
		unsigned int y_volt = read_adc(ADC_CHANNEL_JOY_Y);
 282:	f1 e0       	ldi	r31, 0x01	; 1
 284:	7f 2e       	mov	r7, r31
 286:	f0 2d       	mov	r31, r0
 288:	85 e0       	ldi	r24, 0x05	; 5
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
		//printf("%d %d\n", x_volt, y_volt);
		
		if (y_volt < 125 && select_menu < count_menu)
 290:	18 2f       	mov	r17, r24
 292:	84 e0       	ldi	r24, 0x04	; 4
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 29a:	56 b2       	in	r5, 0x16	; 22
		{
			select_menu++;
 29c:	52 fa       	bst	r5, 2
 29e:	55 24       	eor	r5, r5
 2a0:	50 f8       	bld	r5, 0
		}
		if (y_volt > 130 && select_menu > 1)
 2a2:	e4 2c       	mov	r14, r4
 2a4:	49 82       	std	Y+1, r4	; 0x01
 2a6:	2a 82       	std	Y+2, r2	; 0x02
 2a8:	3b 82       	std	Y+3, r3	; 0x03
 2aa:	1c 83       	std	Y+4, r17	; 0x04
 2ac:	8d 83       	std	Y+5, r24	; 0x05
 2ae:	31 e0       	ldi	r19, 0x01	; 1
		{
			select_menu--;
 2b0:	30 27       	eor	r19, r16
 2b2:	3e 83       	std	Y+6, r19	; 0x06
 2b4:	f2 2c       	mov	r15, r2
		}
		printf("%d\n",select_menu);
 2b6:	03 2d       	mov	r16, r3
 2b8:	28 2f       	mov	r18, r24
 2ba:	4f 81       	ldd	r20, Y+7	; 0x07
 2bc:	58 85       	ldd	r21, Y+8	; 0x08
 2be:	69 85       	ldd	r22, Y+9	; 0x09
 2c0:	7a 85       	ldd	r23, Y+10	; 0x0a
 2c2:	8b 85       	ldd	r24, Y+11	; 0x0b
 2c4:	0e 94 88 00 	call	0x110	; 0x110 <CAN_message_send>
		
		if(x_volt > 135 && select_menu == 2)
 2c8:	83 ec       	ldi	r24, 0xC3	; 195
 2ca:	99 e0       	ldi	r25, 0x09	; 9
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <test_CAN_joystick+0x9a>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <test_CAN_joystick+0xa0>
 2d2:	00 00       	nop
 2d4:	8b e0       	ldi	r24, 0x0B	; 11
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 44 02 	call	0x488	; 0x488 <malloc>
 2dc:	4c 01       	movw	r8, r24
 2de:	0e 94 e5 00 	call	0x1ca	; 0x1ca <CAN_data_receive>
 2e2:	f4 01       	movw	r30, r8
 2e4:	82 81       	ldd	r24, Z+2	; 0x02
 2e6:	88 23       	and	r24, r24
		" Arsenal   ",
		" Man.Utd.  ",
	};
			
	int count_menu = 4;
	int select_menu = 1;
 2e8:	f9 f0       	breq	.+62     	; 0x328 <test_CAN_joystick+0xf6>
 2ea:	74 01       	movw	r14, r8
 2ec:	f3 e0       	ldi	r31, 0x03	; 3
 2ee:	ef 0e       	add	r14, r31
 2f0:	f1 1c       	adc	r15, r1
 2f2:	00 e0       	ldi	r16, 0x00	; 0
 2f4:	10 e0       	ldi	r17, 0x00	; 0
 2f6:	f7 01       	movw	r30, r14
 2f8:	81 91       	ld	r24, Z+
 2fa:	7f 01       	movw	r14, r30
 2fc:	1f 92       	push	r1
 2fe:	8f 93       	push	r24
 300:	1f 93       	push	r17
 302:	0f 93       	push	r16
 304:	df 92       	push	r13
 306:	cf 92       	push	r12
 308:	0e 94 b6 03 	call	0x76c	; 0x76c <printf>
 30c:	0f 5f       	subi	r16, 0xFF	; 255
 30e:	1f 4f       	sbci	r17, 0xFF	; 255
 310:	f4 01       	movw	r30, r8
 312:	82 81       	ldd	r24, Z+2	; 0x02
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	08 17       	cp	r16, r24
 324:	19 07       	cpc	r17, r25
		printf("%d\n",select_menu);
		
		if(x_volt > 135 && select_menu == 2)
		{
			sub_menu = 1;
			clear_oled();
 326:	3c f3       	brlt	.-50     	; 0x2f6 <test_CAN_joystick+0xc4>
 328:	f4 01       	movw	r30, r8
		}
		printf("%d\n",select_menu);
		
		if(x_volt > 135 && select_menu == 2)
		{
			sub_menu = 1;
 32a:	81 81       	ldd	r24, Z+1	; 0x01
 32c:	8f 93       	push	r24
 32e:	80 81       	ld	r24, Z
			clear_oled();
			select_menu = 1;
 330:	8f 93       	push	r24
 332:	bf 92       	push	r11
 334:	af 92       	push	r10
			break;
 336:	0e 94 b6 03 	call	0x76c	; 0x76c <printf>
		{
			for (j = 0; j < 13; j++)
			{
				for (i = 0; i < 5; i++)
				{
					if(select_menu==k)
 33a:	f4 01       	movw	r30, r8
 33c:	82 81       	ldd	r24, Z+2	; 0x02
					{
						oled_set_column(i+(j*5));
 33e:	1f 92       	push	r1
 340:	8f 93       	push	r24
 342:	7f 92       	push	r7
 344:	6f 92       	push	r6
 346:	0e 94 b6 03 	call	0x76c	; 0x76c <printf>
						write_d(~pgm_read_byte(&font5[menu[k][j] - ' '][i]));
 34a:	ff eb       	ldi	r31, 0xBF	; 191
 34c:	27 e2       	ldi	r18, 0x27	; 39
 34e:	89 e0       	ldi	r24, 0x09	; 9
 350:	f1 50       	subi	r31, 0x01	; 1
 352:	20 40       	sbci	r18, 0x00	; 0
 354:	80 40       	sbci	r24, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <test_CAN_joystick+0x11e>
 358:	00 c0       	rjmp	.+0      	; 0x35a <test_CAN_joystick+0x128>
 35a:	00 00       	nop
 35c:	05 2d       	mov	r16, r5
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	f8 94       	cli
 362:	de bf       	out	0x3e, r29	; 62
 364:	0f be       	out	0x3f, r0	; 63
 366:	cd bf       	out	0x3d, r28	; 61
 368:	8f cf       	rjmp	.-226    	; 0x288 <test_CAN_joystick+0x56>

0000036a <main>:
 36a:	8f e1       	ldi	r24, 0x1F	; 31
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 35 02 	call	0x46a	; 0x46a <USART_Init>
					}
					else
					{
						oled_set_column(i+(j*5));
 372:	0e 94 19 01 	call	0x232	; 0x232 <test_CAN_joystick>

00000376 <MCP_reset>:
	return 0;
}

int MCP_reset(void)
{
	PORTB &= ~(1 << SS);
 376:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(MCP_RESET);
 378:	80 ec       	ldi	r24, 0xC0	; 192
 37a:	0e 94 24 02 	call	0x448	; 0x448 <SPI_MasterTransmit>
	
	PORTB |= (1 << SS);
 37e:	c4 9a       	sbi	0x18, 4	; 24
	
	return 0;
}
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	08 95       	ret

00000386 <MCP_init>:
#include "SPI.h"
#include "MCP2515.h"

int MCP_init(void)
{
	SPI_MasterInit();
 386:	0e 94 1c 02 	call	0x438	; 0x438 <SPI_MasterInit>
	MCP_reset();
 38a:	0e 94 bb 01 	call	0x376	; 0x376 <MCP_reset>
	
	return 0;
}
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	08 95       	ret

00000394 <MCP_read>:
	
	return 0;
}

char MCP_read(char address)
{
 394:	cf 93       	push	r28
 396:	c8 2f       	mov	r28, r24
	PORTB &= ~(1 << SS); 
 398:	c4 98       	cbi	0x18, 4	; 24
		
	SPI_MasterTransmit(MCP_READ);
 39a:	83 e0       	ldi	r24, 0x03	; 3
 39c:	0e 94 24 02 	call	0x448	; 0x448 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
 3a0:	8c 2f       	mov	r24, r28
 3a2:	0e 94 24 02 	call	0x448	; 0x448 <SPI_MasterTransmit>
	
	char data = SPI_SlaveReceive();
 3a6:	0e 94 28 02 	call	0x450	; 0x450 <SPI_SlaveReceive>
	
	PORTB |= (1 << SS);
 3aa:	c4 9a       	sbi	0x18, 4	; 24
	
	return data;

}
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <MCP_write>:

void MCP_write(char address, char data)
{
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	d8 2f       	mov	r29, r24
 3b6:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << SS); 
 3b8:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(MCP_WRITE);
 3ba:	82 e0       	ldi	r24, 0x02	; 2
 3bc:	0e 94 24 02 	call	0x448	; 0x448 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
 3c0:	8d 2f       	mov	r24, r29
 3c2:	0e 94 24 02 	call	0x448	; 0x448 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
 3c6:	8c 2f       	mov	r24, r28
 3c8:	0e 94 24 02 	call	0x448	; 0x448 <SPI_MasterTransmit>
	
	PORTB |= (1 << SS);
 3cc:	c4 9a       	sbi	0x18, 4	; 24
}
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	08 95       	ret

000003d4 <MCP_rts>:

void MCP_rts(char rts)
{
	PORTB &= ~(1 << SS);
 3d4:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(rts);
 3d6:	0e 94 24 02 	call	0x448	; 0x448 <SPI_MasterTransmit>
	
	PORTB |= (1 << SS);
 3da:	c4 9a       	sbi	0x18, 4	; 24
 3dc:	08 95       	ret

000003de <MCP_bit_mod>:
	
	return status;
}

void MCP_bit_mod(char address, char mask, char data)
{
 3de:	1f 93       	push	r17
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	18 2f       	mov	r17, r24
 3e6:	d6 2f       	mov	r29, r22
 3e8:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << SS);
 3ea:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(MCP_BITMOD);
 3ec:	85 e0       	ldi	r24, 0x05	; 5
 3ee:	0e 94 24 02 	call	0x448	; 0x448 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
 3f2:	81 2f       	mov	r24, r17
 3f4:	0e 94 24 02 	call	0x448	; 0x448 <SPI_MasterTransmit>
	SPI_MasterTransmit(mask);
 3f8:	8d 2f       	mov	r24, r29
 3fa:	0e 94 24 02 	call	0x448	; 0x448 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
 3fe:	8c 2f       	mov	r24, r28
 400:	0e 94 24 02 	call	0x448	; 0x448 <SPI_MasterTransmit>
	
	PORTB |= ~(1 << SS);
 404:	88 b3       	in	r24, 0x18	; 24
 406:	8f 6e       	ori	r24, 0xEF	; 239
 408:	88 bb       	out	0x18, r24	; 24
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	08 95       	ret

00000412 <ram_init>:
#include "define.h"

void ram_init(void)
{
	bit_set(MCUCR, SRE);
 412:	85 b7       	in	r24, 0x35	; 53
 414:	80 68       	ori	r24, 0x80	; 128
 416:	85 bf       	out	0x35, r24	; 53
	
	bit_set(SFIOR, XMM2);
 418:	80 b7       	in	r24, 0x30	; 48
 41a:	80 62       	ori	r24, 0x20	; 32
 41c:	80 bf       	out	0x30, r24	; 48
	bit_clear(SFIOR, XMM1);
 41e:	80 b7       	in	r24, 0x30	; 48
 420:	8f 7e       	andi	r24, 0xEF	; 239
 422:	80 bf       	out	0x30, r24	; 48
	bit_clear(SFIOR, XMM0);
 424:	80 b7       	in	r24, 0x30	; 48
 426:	87 7f       	andi	r24, 0xF7	; 247
 428:	80 bf       	out	0x30, r24	; 48

	bit_set(MCUCR, SRW11);
 42a:	85 b7       	in	r24, 0x35	; 53
 42c:	82 60       	ori	r24, 0x02	; 2
 42e:	85 bf       	out	0x35, r24	; 53
	bit_clear(EMCUCR, SRW10);	
 430:	86 b7       	in	r24, 0x36	; 54
 432:	8f 7b       	andi	r24, 0xBF	; 191
 434:	86 bf       	out	0x36, r24	; 54
 436:	08 95       	ret

00000438 <SPI_MasterInit>:
#define SCK PB7


void SPI_MasterInit(void)
{
	DDRB |= (1 << MOSI) | (1 << SS) | (1 << SCK);
 438:	87 b3       	in	r24, 0x17	; 23
 43a:	80 6b       	ori	r24, 0xB0	; 176
 43c:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << MISO);
 43e:	be 98       	cbi	0x17, 6	; 23
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 440:	8d b1       	in	r24, 0x0d	; 13
 442:	81 65       	ori	r24, 0x51	; 81
 444:	8d b9       	out	0x0d, r24	; 13
 446:	08 95       	ret

00000448 <SPI_MasterTransmit>:
}


void SPI_MasterTransmit(char cdata)
{
	SPDR = cdata;
 448:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
 44a:	77 9b       	sbis	0x0e, 7	; 14
 44c:	fe cf       	rjmp	.-4      	; 0x44a <SPI_MasterTransmit+0x2>
}
 44e:	08 95       	ret

00000450 <SPI_SlaveReceive>:
}


uint8_t SPI_SlaveReceive(void)
{
	SPI_MasterTransmit(0);
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 24 02 	call	0x448	; 0x448 <SPI_MasterTransmit>
	return SPDR;
 456:	8f b1       	in	r24, 0x0f	; 15
 458:	08 95       	ret

0000045a <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !(UCSR0A & (1 << UDRE0)) );
 45a:	5d 9b       	sbis	0x0b, 5	; 11
 45c:	fe cf       	rjmp	.-4      	; 0x45a <USART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
 45e:	8c b9       	out	0x0c, r24	; 12
 460:	08 95       	ret

00000462 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1 << RXC0)) );
 462:	5f 9b       	sbis	0x0b, 7	; 11
 464:	fe cf       	rjmp	.-4      	; 0x462 <USART_Receive>
	
	/* Get and return received data from buffer */
	return UDR0;
 466:	8c b1       	in	r24, 0x0c	; 12
}
 468:	08 95       	ret

0000046a <USART_Init>:

FILE *uart;

void USART_Init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr >> 8);
 46a:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 46c:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 46e:	88 e1       	ldi	r24, 0x18	; 24
 470:	8a b9       	out	0x0a, r24	; 10
	
	uart = fdevopen(&USART_Transmit, &USART_Receive);
 472:	61 e3       	ldi	r22, 0x31	; 49
 474:	72 e0       	ldi	r23, 0x02	; 2
 476:	8d e2       	ldi	r24, 0x2D	; 45
 478:	92 e0       	ldi	r25, 0x02	; 2
 47a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <fdevopen>
 47e:	90 93 c5 01 	sts	0x01C5, r25
 482:	80 93 c4 01 	sts	0x01C4, r24
 486:	08 95       	ret

00000488 <malloc>:
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	82 30       	cpi	r24, 0x02	; 2
 48e:	91 05       	cpc	r25, r1
 490:	10 f4       	brcc	.+4      	; 0x496 <malloc+0xe>
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	e0 91 c8 01 	lds	r30, 0x01C8
 49a:	f0 91 c9 01 	lds	r31, 0x01C9
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	a0 e0       	ldi	r26, 0x00	; 0
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	30 97       	sbiw	r30, 0x00	; 0
 4a8:	39 f1       	breq	.+78     	; 0x4f8 <malloc+0x70>
 4aa:	40 81       	ld	r20, Z
 4ac:	51 81       	ldd	r21, Z+1	; 0x01
 4ae:	48 17       	cp	r20, r24
 4b0:	59 07       	cpc	r21, r25
 4b2:	b8 f0       	brcs	.+46     	; 0x4e2 <malloc+0x5a>
 4b4:	48 17       	cp	r20, r24
 4b6:	59 07       	cpc	r21, r25
 4b8:	71 f4       	brne	.+28     	; 0x4d6 <malloc+0x4e>
 4ba:	82 81       	ldd	r24, Z+2	; 0x02
 4bc:	93 81       	ldd	r25, Z+3	; 0x03
 4be:	10 97       	sbiw	r26, 0x00	; 0
 4c0:	29 f0       	breq	.+10     	; 0x4cc <malloc+0x44>
 4c2:	13 96       	adiw	r26, 0x03	; 3
 4c4:	9c 93       	st	X, r25
 4c6:	8e 93       	st	-X, r24
 4c8:	12 97       	sbiw	r26, 0x02	; 2
 4ca:	2c c0       	rjmp	.+88     	; 0x524 <__stack+0x25>
 4cc:	90 93 c9 01 	sts	0x01C9, r25
 4d0:	80 93 c8 01 	sts	0x01C8, r24
 4d4:	27 c0       	rjmp	.+78     	; 0x524 <__stack+0x25>
 4d6:	21 15       	cp	r18, r1
 4d8:	31 05       	cpc	r19, r1
 4da:	31 f0       	breq	.+12     	; 0x4e8 <malloc+0x60>
 4dc:	42 17       	cp	r20, r18
 4de:	53 07       	cpc	r21, r19
 4e0:	18 f0       	brcs	.+6      	; 0x4e8 <malloc+0x60>
 4e2:	a9 01       	movw	r20, r18
 4e4:	db 01       	movw	r26, r22
 4e6:	01 c0       	rjmp	.+2      	; 0x4ea <malloc+0x62>
 4e8:	ef 01       	movw	r28, r30
 4ea:	9a 01       	movw	r18, r20
 4ec:	bd 01       	movw	r22, r26
 4ee:	df 01       	movw	r26, r30
 4f0:	02 80       	ldd	r0, Z+2	; 0x02
 4f2:	f3 81       	ldd	r31, Z+3	; 0x03
 4f4:	e0 2d       	mov	r30, r0
 4f6:	d7 cf       	rjmp	.-82     	; 0x4a6 <malloc+0x1e>
 4f8:	21 15       	cp	r18, r1
 4fa:	31 05       	cpc	r19, r1
 4fc:	f9 f0       	breq	.+62     	; 0x53c <__stack+0x3d>
 4fe:	28 1b       	sub	r18, r24
 500:	39 0b       	sbc	r19, r25
 502:	24 30       	cpi	r18, 0x04	; 4
 504:	31 05       	cpc	r19, r1
 506:	80 f4       	brcc	.+32     	; 0x528 <__stack+0x29>
 508:	8a 81       	ldd	r24, Y+2	; 0x02
 50a:	9b 81       	ldd	r25, Y+3	; 0x03
 50c:	61 15       	cp	r22, r1
 50e:	71 05       	cpc	r23, r1
 510:	21 f0       	breq	.+8      	; 0x51a <__stack+0x1b>
 512:	fb 01       	movw	r30, r22
 514:	93 83       	std	Z+3, r25	; 0x03
 516:	82 83       	std	Z+2, r24	; 0x02
 518:	04 c0       	rjmp	.+8      	; 0x522 <__stack+0x23>
 51a:	90 93 c9 01 	sts	0x01C9, r25
 51e:	80 93 c8 01 	sts	0x01C8, r24
 522:	fe 01       	movw	r30, r28
 524:	32 96       	adiw	r30, 0x02	; 2
 526:	44 c0       	rjmp	.+136    	; 0x5b0 <__stack+0xb1>
 528:	fe 01       	movw	r30, r28
 52a:	e2 0f       	add	r30, r18
 52c:	f3 1f       	adc	r31, r19
 52e:	81 93       	st	Z+, r24
 530:	91 93       	st	Z+, r25
 532:	22 50       	subi	r18, 0x02	; 2
 534:	31 09       	sbc	r19, r1
 536:	39 83       	std	Y+1, r19	; 0x01
 538:	28 83       	st	Y, r18
 53a:	3a c0       	rjmp	.+116    	; 0x5b0 <__stack+0xb1>
 53c:	20 91 c6 01 	lds	r18, 0x01C6
 540:	30 91 c7 01 	lds	r19, 0x01C7
 544:	23 2b       	or	r18, r19
 546:	41 f4       	brne	.+16     	; 0x558 <__stack+0x59>
 548:	20 91 02 01 	lds	r18, 0x0102
 54c:	30 91 03 01 	lds	r19, 0x0103
 550:	30 93 c7 01 	sts	0x01C7, r19
 554:	20 93 c6 01 	sts	0x01C6, r18
 558:	20 91 00 01 	lds	r18, 0x0100
 55c:	30 91 01 01 	lds	r19, 0x0101
 560:	21 15       	cp	r18, r1
 562:	31 05       	cpc	r19, r1
 564:	41 f4       	brne	.+16     	; 0x576 <__stack+0x77>
 566:	2d b7       	in	r18, 0x3d	; 61
 568:	3e b7       	in	r19, 0x3e	; 62
 56a:	40 91 04 01 	lds	r20, 0x0104
 56e:	50 91 05 01 	lds	r21, 0x0105
 572:	24 1b       	sub	r18, r20
 574:	35 0b       	sbc	r19, r21
 576:	e0 91 c6 01 	lds	r30, 0x01C6
 57a:	f0 91 c7 01 	lds	r31, 0x01C7
 57e:	e2 17       	cp	r30, r18
 580:	f3 07       	cpc	r31, r19
 582:	a0 f4       	brcc	.+40     	; 0x5ac <__stack+0xad>
 584:	2e 1b       	sub	r18, r30
 586:	3f 0b       	sbc	r19, r31
 588:	28 17       	cp	r18, r24
 58a:	39 07       	cpc	r19, r25
 58c:	78 f0       	brcs	.+30     	; 0x5ac <__stack+0xad>
 58e:	ac 01       	movw	r20, r24
 590:	4e 5f       	subi	r20, 0xFE	; 254
 592:	5f 4f       	sbci	r21, 0xFF	; 255
 594:	24 17       	cp	r18, r20
 596:	35 07       	cpc	r19, r21
 598:	48 f0       	brcs	.+18     	; 0x5ac <__stack+0xad>
 59a:	4e 0f       	add	r20, r30
 59c:	5f 1f       	adc	r21, r31
 59e:	50 93 c7 01 	sts	0x01C7, r21
 5a2:	40 93 c6 01 	sts	0x01C6, r20
 5a6:	81 93       	st	Z+, r24
 5a8:	91 93       	st	Z+, r25
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <__stack+0xb1>
 5ac:	e0 e0       	ldi	r30, 0x00	; 0
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	cf 01       	movw	r24, r30
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	08 95       	ret

000005b8 <free>:
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	00 97       	sbiw	r24, 0x00	; 0
 5be:	09 f4       	brne	.+2      	; 0x5c2 <free+0xa>
 5c0:	87 c0       	rjmp	.+270    	; 0x6d0 <free+0x118>
 5c2:	fc 01       	movw	r30, r24
 5c4:	32 97       	sbiw	r30, 0x02	; 2
 5c6:	13 82       	std	Z+3, r1	; 0x03
 5c8:	12 82       	std	Z+2, r1	; 0x02
 5ca:	c0 91 c8 01 	lds	r28, 0x01C8
 5ce:	d0 91 c9 01 	lds	r29, 0x01C9
 5d2:	20 97       	sbiw	r28, 0x00	; 0
 5d4:	81 f4       	brne	.+32     	; 0x5f6 <free+0x3e>
 5d6:	20 81       	ld	r18, Z
 5d8:	31 81       	ldd	r19, Z+1	; 0x01
 5da:	28 0f       	add	r18, r24
 5dc:	39 1f       	adc	r19, r25
 5de:	80 91 c6 01 	lds	r24, 0x01C6
 5e2:	90 91 c7 01 	lds	r25, 0x01C7
 5e6:	82 17       	cp	r24, r18
 5e8:	93 07       	cpc	r25, r19
 5ea:	79 f5       	brne	.+94     	; 0x64a <free+0x92>
 5ec:	f0 93 c7 01 	sts	0x01C7, r31
 5f0:	e0 93 c6 01 	sts	0x01C6, r30
 5f4:	6d c0       	rjmp	.+218    	; 0x6d0 <free+0x118>
 5f6:	de 01       	movw	r26, r28
 5f8:	20 e0       	ldi	r18, 0x00	; 0
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	ae 17       	cp	r26, r30
 5fe:	bf 07       	cpc	r27, r31
 600:	50 f4       	brcc	.+20     	; 0x616 <free+0x5e>
 602:	12 96       	adiw	r26, 0x02	; 2
 604:	4d 91       	ld	r20, X+
 606:	5c 91       	ld	r21, X
 608:	13 97       	sbiw	r26, 0x03	; 3
 60a:	9d 01       	movw	r18, r26
 60c:	41 15       	cp	r20, r1
 60e:	51 05       	cpc	r21, r1
 610:	09 f1       	breq	.+66     	; 0x654 <free+0x9c>
 612:	da 01       	movw	r26, r20
 614:	f3 cf       	rjmp	.-26     	; 0x5fc <free+0x44>
 616:	b3 83       	std	Z+3, r27	; 0x03
 618:	a2 83       	std	Z+2, r26	; 0x02
 61a:	40 81       	ld	r20, Z
 61c:	51 81       	ldd	r21, Z+1	; 0x01
 61e:	84 0f       	add	r24, r20
 620:	95 1f       	adc	r25, r21
 622:	8a 17       	cp	r24, r26
 624:	9b 07       	cpc	r25, r27
 626:	71 f4       	brne	.+28     	; 0x644 <free+0x8c>
 628:	8d 91       	ld	r24, X+
 62a:	9c 91       	ld	r25, X
 62c:	11 97       	sbiw	r26, 0x01	; 1
 62e:	84 0f       	add	r24, r20
 630:	95 1f       	adc	r25, r21
 632:	02 96       	adiw	r24, 0x02	; 2
 634:	91 83       	std	Z+1, r25	; 0x01
 636:	80 83       	st	Z, r24
 638:	12 96       	adiw	r26, 0x02	; 2
 63a:	8d 91       	ld	r24, X+
 63c:	9c 91       	ld	r25, X
 63e:	13 97       	sbiw	r26, 0x03	; 3
 640:	93 83       	std	Z+3, r25	; 0x03
 642:	82 83       	std	Z+2, r24	; 0x02
 644:	21 15       	cp	r18, r1
 646:	31 05       	cpc	r19, r1
 648:	29 f4       	brne	.+10     	; 0x654 <free+0x9c>
 64a:	f0 93 c9 01 	sts	0x01C9, r31
 64e:	e0 93 c8 01 	sts	0x01C8, r30
 652:	3e c0       	rjmp	.+124    	; 0x6d0 <free+0x118>
 654:	d9 01       	movw	r26, r18
 656:	13 96       	adiw	r26, 0x03	; 3
 658:	fc 93       	st	X, r31
 65a:	ee 93       	st	-X, r30
 65c:	12 97       	sbiw	r26, 0x02	; 2
 65e:	4d 91       	ld	r20, X+
 660:	5d 91       	ld	r21, X+
 662:	a4 0f       	add	r26, r20
 664:	b5 1f       	adc	r27, r21
 666:	ea 17       	cp	r30, r26
 668:	fb 07       	cpc	r31, r27
 66a:	79 f4       	brne	.+30     	; 0x68a <free+0xd2>
 66c:	80 81       	ld	r24, Z
 66e:	91 81       	ldd	r25, Z+1	; 0x01
 670:	84 0f       	add	r24, r20
 672:	95 1f       	adc	r25, r21
 674:	02 96       	adiw	r24, 0x02	; 2
 676:	d9 01       	movw	r26, r18
 678:	11 96       	adiw	r26, 0x01	; 1
 67a:	9c 93       	st	X, r25
 67c:	8e 93       	st	-X, r24
 67e:	82 81       	ldd	r24, Z+2	; 0x02
 680:	93 81       	ldd	r25, Z+3	; 0x03
 682:	13 96       	adiw	r26, 0x03	; 3
 684:	9c 93       	st	X, r25
 686:	8e 93       	st	-X, r24
 688:	12 97       	sbiw	r26, 0x02	; 2
 68a:	e0 e0       	ldi	r30, 0x00	; 0
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	8a 81       	ldd	r24, Y+2	; 0x02
 690:	9b 81       	ldd	r25, Y+3	; 0x03
 692:	00 97       	sbiw	r24, 0x00	; 0
 694:	19 f0       	breq	.+6      	; 0x69c <free+0xe4>
 696:	fe 01       	movw	r30, r28
 698:	ec 01       	movw	r28, r24
 69a:	f9 cf       	rjmp	.-14     	; 0x68e <free+0xd6>
 69c:	ce 01       	movw	r24, r28
 69e:	02 96       	adiw	r24, 0x02	; 2
 6a0:	28 81       	ld	r18, Y
 6a2:	39 81       	ldd	r19, Y+1	; 0x01
 6a4:	82 0f       	add	r24, r18
 6a6:	93 1f       	adc	r25, r19
 6a8:	20 91 c6 01 	lds	r18, 0x01C6
 6ac:	30 91 c7 01 	lds	r19, 0x01C7
 6b0:	28 17       	cp	r18, r24
 6b2:	39 07       	cpc	r19, r25
 6b4:	69 f4       	brne	.+26     	; 0x6d0 <free+0x118>
 6b6:	30 97       	sbiw	r30, 0x00	; 0
 6b8:	29 f4       	brne	.+10     	; 0x6c4 <free+0x10c>
 6ba:	10 92 c9 01 	sts	0x01C9, r1
 6be:	10 92 c8 01 	sts	0x01C8, r1
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <free+0x110>
 6c4:	13 82       	std	Z+3, r1	; 0x03
 6c6:	12 82       	std	Z+2, r1	; 0x02
 6c8:	d0 93 c7 01 	sts	0x01C7, r29
 6cc:	c0 93 c6 01 	sts	0x01C6, r28
 6d0:	df 91       	pop	r29
 6d2:	cf 91       	pop	r28
 6d4:	08 95       	ret

000006d6 <fdevopen>:
 6d6:	0f 93       	push	r16
 6d8:	1f 93       	push	r17
 6da:	cf 93       	push	r28
 6dc:	df 93       	push	r29
 6de:	ec 01       	movw	r28, r24
 6e0:	8b 01       	movw	r16, r22
 6e2:	00 97       	sbiw	r24, 0x00	; 0
 6e4:	31 f4       	brne	.+12     	; 0x6f2 <fdevopen+0x1c>
 6e6:	61 15       	cp	r22, r1
 6e8:	71 05       	cpc	r23, r1
 6ea:	19 f4       	brne	.+6      	; 0x6f2 <fdevopen+0x1c>
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	38 c0       	rjmp	.+112    	; 0x762 <fdevopen+0x8c>
 6f2:	6e e0       	ldi	r22, 0x0E	; 14
 6f4:	70 e0       	ldi	r23, 0x00	; 0
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	0e 94 9c 05 	call	0xb38	; 0xb38 <calloc>
 6fe:	fc 01       	movw	r30, r24
 700:	00 97       	sbiw	r24, 0x00	; 0
 702:	a1 f3       	breq	.-24     	; 0x6ec <fdevopen+0x16>
 704:	80 e8       	ldi	r24, 0x80	; 128
 706:	83 83       	std	Z+3, r24	; 0x03
 708:	01 15       	cp	r16, r1
 70a:	11 05       	cpc	r17, r1
 70c:	71 f0       	breq	.+28     	; 0x72a <fdevopen+0x54>
 70e:	13 87       	std	Z+11, r17	; 0x0b
 710:	02 87       	std	Z+10, r16	; 0x0a
 712:	81 e8       	ldi	r24, 0x81	; 129
 714:	83 83       	std	Z+3, r24	; 0x03
 716:	80 91 ca 01 	lds	r24, 0x01CA
 71a:	90 91 cb 01 	lds	r25, 0x01CB
 71e:	89 2b       	or	r24, r25
 720:	21 f4       	brne	.+8      	; 0x72a <fdevopen+0x54>
 722:	f0 93 cb 01 	sts	0x01CB, r31
 726:	e0 93 ca 01 	sts	0x01CA, r30
 72a:	20 97       	sbiw	r28, 0x00	; 0
 72c:	c9 f0       	breq	.+50     	; 0x760 <fdevopen+0x8a>
 72e:	d1 87       	std	Z+9, r29	; 0x09
 730:	c0 87       	std	Z+8, r28	; 0x08
 732:	83 81       	ldd	r24, Z+3	; 0x03
 734:	82 60       	ori	r24, 0x02	; 2
 736:	83 83       	std	Z+3, r24	; 0x03
 738:	80 91 cc 01 	lds	r24, 0x01CC
 73c:	90 91 cd 01 	lds	r25, 0x01CD
 740:	89 2b       	or	r24, r25
 742:	71 f4       	brne	.+28     	; 0x760 <fdevopen+0x8a>
 744:	f0 93 cd 01 	sts	0x01CD, r31
 748:	e0 93 cc 01 	sts	0x01CC, r30
 74c:	80 91 ce 01 	lds	r24, 0x01CE
 750:	90 91 cf 01 	lds	r25, 0x01CF
 754:	89 2b       	or	r24, r25
 756:	21 f4       	brne	.+8      	; 0x760 <fdevopen+0x8a>
 758:	f0 93 cf 01 	sts	0x01CF, r31
 75c:	e0 93 ce 01 	sts	0x01CE, r30
 760:	cf 01       	movw	r24, r30
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	1f 91       	pop	r17
 768:	0f 91       	pop	r16
 76a:	08 95       	ret

0000076c <printf>:
 76c:	a0 e0       	ldi	r26, 0x00	; 0
 76e:	b0 e0       	ldi	r27, 0x00	; 0
 770:	ec eb       	ldi	r30, 0xBC	; 188
 772:	f3 e0       	ldi	r31, 0x03	; 3
 774:	0c 94 75 06 	jmp	0xcea	; 0xcea <__prologue_saves__+0x20>
 778:	fe 01       	movw	r30, r28
 77a:	35 96       	adiw	r30, 0x05	; 5
 77c:	61 91       	ld	r22, Z+
 77e:	71 91       	ld	r23, Z+
 780:	af 01       	movw	r20, r30
 782:	80 91 cc 01 	lds	r24, 0x01CC
 786:	90 91 cd 01 	lds	r25, 0x01CD
 78a:	0e 94 ca 03 	call	0x794	; 0x794 <vfprintf>
 78e:	e2 e0       	ldi	r30, 0x02	; 2
 790:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__epilogue_restores__+0x20>

00000794 <vfprintf>:
 794:	ac e0       	ldi	r26, 0x0C	; 12
 796:	b0 e0       	ldi	r27, 0x00	; 0
 798:	e0 ed       	ldi	r30, 0xD0	; 208
 79a:	f3 e0       	ldi	r31, 0x03	; 3
 79c:	0c 94 65 06 	jmp	0xcca	; 0xcca <__prologue_saves__>
 7a0:	7c 01       	movw	r14, r24
 7a2:	6b 01       	movw	r12, r22
 7a4:	8a 01       	movw	r16, r20
 7a6:	fc 01       	movw	r30, r24
 7a8:	17 82       	std	Z+7, r1	; 0x07
 7aa:	16 82       	std	Z+6, r1	; 0x06
 7ac:	83 81       	ldd	r24, Z+3	; 0x03
 7ae:	81 ff       	sbrs	r24, 1
 7b0:	bd c1       	rjmp	.+890    	; 0xb2c <vfprintf+0x398>
 7b2:	ce 01       	movw	r24, r28
 7b4:	01 96       	adiw	r24, 0x01	; 1
 7b6:	4c 01       	movw	r8, r24
 7b8:	f7 01       	movw	r30, r14
 7ba:	93 81       	ldd	r25, Z+3	; 0x03
 7bc:	f6 01       	movw	r30, r12
 7be:	93 fd       	sbrc	r25, 3
 7c0:	85 91       	lpm	r24, Z+
 7c2:	93 ff       	sbrs	r25, 3
 7c4:	81 91       	ld	r24, Z+
 7c6:	6f 01       	movw	r12, r30
 7c8:	88 23       	and	r24, r24
 7ca:	09 f4       	brne	.+2      	; 0x7ce <vfprintf+0x3a>
 7cc:	ab c1       	rjmp	.+854    	; 0xb24 <vfprintf+0x390>
 7ce:	85 32       	cpi	r24, 0x25	; 37
 7d0:	39 f4       	brne	.+14     	; 0x7e0 <vfprintf+0x4c>
 7d2:	93 fd       	sbrc	r25, 3
 7d4:	85 91       	lpm	r24, Z+
 7d6:	93 ff       	sbrs	r25, 3
 7d8:	81 91       	ld	r24, Z+
 7da:	6f 01       	movw	r12, r30
 7dc:	85 32       	cpi	r24, 0x25	; 37
 7de:	29 f4       	brne	.+10     	; 0x7ea <vfprintf+0x56>
 7e0:	b7 01       	movw	r22, r14
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 d5 05 	call	0xbaa	; 0xbaa <fputc>
 7e8:	e7 cf       	rjmp	.-50     	; 0x7b8 <vfprintf+0x24>
 7ea:	51 2c       	mov	r5, r1
 7ec:	31 2c       	mov	r3, r1
 7ee:	20 e0       	ldi	r18, 0x00	; 0
 7f0:	20 32       	cpi	r18, 0x20	; 32
 7f2:	a0 f4       	brcc	.+40     	; 0x81c <vfprintf+0x88>
 7f4:	8b 32       	cpi	r24, 0x2B	; 43
 7f6:	69 f0       	breq	.+26     	; 0x812 <vfprintf+0x7e>
 7f8:	30 f4       	brcc	.+12     	; 0x806 <vfprintf+0x72>
 7fa:	80 32       	cpi	r24, 0x20	; 32
 7fc:	59 f0       	breq	.+22     	; 0x814 <vfprintf+0x80>
 7fe:	83 32       	cpi	r24, 0x23	; 35
 800:	69 f4       	brne	.+26     	; 0x81c <vfprintf+0x88>
 802:	20 61       	ori	r18, 0x10	; 16
 804:	2c c0       	rjmp	.+88     	; 0x85e <vfprintf+0xca>
 806:	8d 32       	cpi	r24, 0x2D	; 45
 808:	39 f0       	breq	.+14     	; 0x818 <vfprintf+0x84>
 80a:	80 33       	cpi	r24, 0x30	; 48
 80c:	39 f4       	brne	.+14     	; 0x81c <vfprintf+0x88>
 80e:	21 60       	ori	r18, 0x01	; 1
 810:	26 c0       	rjmp	.+76     	; 0x85e <vfprintf+0xca>
 812:	22 60       	ori	r18, 0x02	; 2
 814:	24 60       	ori	r18, 0x04	; 4
 816:	23 c0       	rjmp	.+70     	; 0x85e <vfprintf+0xca>
 818:	28 60       	ori	r18, 0x08	; 8
 81a:	21 c0       	rjmp	.+66     	; 0x85e <vfprintf+0xca>
 81c:	27 fd       	sbrc	r18, 7
 81e:	27 c0       	rjmp	.+78     	; 0x86e <vfprintf+0xda>
 820:	30 ed       	ldi	r19, 0xD0	; 208
 822:	38 0f       	add	r19, r24
 824:	3a 30       	cpi	r19, 0x0A	; 10
 826:	78 f4       	brcc	.+30     	; 0x846 <vfprintf+0xb2>
 828:	26 ff       	sbrs	r18, 6
 82a:	06 c0       	rjmp	.+12     	; 0x838 <vfprintf+0xa4>
 82c:	fa e0       	ldi	r31, 0x0A	; 10
 82e:	5f 9e       	mul	r5, r31
 830:	30 0d       	add	r19, r0
 832:	11 24       	eor	r1, r1
 834:	53 2e       	mov	r5, r19
 836:	13 c0       	rjmp	.+38     	; 0x85e <vfprintf+0xca>
 838:	8a e0       	ldi	r24, 0x0A	; 10
 83a:	38 9e       	mul	r3, r24
 83c:	30 0d       	add	r19, r0
 83e:	11 24       	eor	r1, r1
 840:	33 2e       	mov	r3, r19
 842:	20 62       	ori	r18, 0x20	; 32
 844:	0c c0       	rjmp	.+24     	; 0x85e <vfprintf+0xca>
 846:	8e 32       	cpi	r24, 0x2E	; 46
 848:	21 f4       	brne	.+8      	; 0x852 <vfprintf+0xbe>
 84a:	26 fd       	sbrc	r18, 6
 84c:	6b c1       	rjmp	.+726    	; 0xb24 <vfprintf+0x390>
 84e:	20 64       	ori	r18, 0x40	; 64
 850:	06 c0       	rjmp	.+12     	; 0x85e <vfprintf+0xca>
 852:	8c 36       	cpi	r24, 0x6C	; 108
 854:	11 f4       	brne	.+4      	; 0x85a <vfprintf+0xc6>
 856:	20 68       	ori	r18, 0x80	; 128
 858:	02 c0       	rjmp	.+4      	; 0x85e <vfprintf+0xca>
 85a:	88 36       	cpi	r24, 0x68	; 104
 85c:	41 f4       	brne	.+16     	; 0x86e <vfprintf+0xda>
 85e:	f6 01       	movw	r30, r12
 860:	93 fd       	sbrc	r25, 3
 862:	85 91       	lpm	r24, Z+
 864:	93 ff       	sbrs	r25, 3
 866:	81 91       	ld	r24, Z+
 868:	6f 01       	movw	r12, r30
 86a:	81 11       	cpse	r24, r1
 86c:	c1 cf       	rjmp	.-126    	; 0x7f0 <vfprintf+0x5c>
 86e:	98 2f       	mov	r25, r24
 870:	9f 7d       	andi	r25, 0xDF	; 223
 872:	95 54       	subi	r25, 0x45	; 69
 874:	93 30       	cpi	r25, 0x03	; 3
 876:	28 f4       	brcc	.+10     	; 0x882 <vfprintf+0xee>
 878:	0c 5f       	subi	r16, 0xFC	; 252
 87a:	1f 4f       	sbci	r17, 0xFF	; 255
 87c:	ff e3       	ldi	r31, 0x3F	; 63
 87e:	f9 83       	std	Y+1, r31	; 0x01
 880:	0d c0       	rjmp	.+26     	; 0x89c <vfprintf+0x108>
 882:	83 36       	cpi	r24, 0x63	; 99
 884:	31 f0       	breq	.+12     	; 0x892 <vfprintf+0xfe>
 886:	83 37       	cpi	r24, 0x73	; 115
 888:	71 f0       	breq	.+28     	; 0x8a6 <vfprintf+0x112>
 88a:	83 35       	cpi	r24, 0x53	; 83
 88c:	09 f0       	breq	.+2      	; 0x890 <vfprintf+0xfc>
 88e:	5b c0       	rjmp	.+182    	; 0x946 <vfprintf+0x1b2>
 890:	22 c0       	rjmp	.+68     	; 0x8d6 <vfprintf+0x142>
 892:	f8 01       	movw	r30, r16
 894:	80 81       	ld	r24, Z
 896:	89 83       	std	Y+1, r24	; 0x01
 898:	0e 5f       	subi	r16, 0xFE	; 254
 89a:	1f 4f       	sbci	r17, 0xFF	; 255
 89c:	44 24       	eor	r4, r4
 89e:	43 94       	inc	r4
 8a0:	51 2c       	mov	r5, r1
 8a2:	54 01       	movw	r10, r8
 8a4:	15 c0       	rjmp	.+42     	; 0x8d0 <vfprintf+0x13c>
 8a6:	38 01       	movw	r6, r16
 8a8:	f2 e0       	ldi	r31, 0x02	; 2
 8aa:	6f 0e       	add	r6, r31
 8ac:	71 1c       	adc	r7, r1
 8ae:	f8 01       	movw	r30, r16
 8b0:	a0 80       	ld	r10, Z
 8b2:	b1 80       	ldd	r11, Z+1	; 0x01
 8b4:	26 ff       	sbrs	r18, 6
 8b6:	03 c0       	rjmp	.+6      	; 0x8be <vfprintf+0x12a>
 8b8:	65 2d       	mov	r22, r5
 8ba:	70 e0       	ldi	r23, 0x00	; 0
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <vfprintf+0x12e>
 8be:	6f ef       	ldi	r22, 0xFF	; 255
 8c0:	7f ef       	ldi	r23, 0xFF	; 255
 8c2:	c5 01       	movw	r24, r10
 8c4:	2c 87       	std	Y+12, r18	; 0x0c
 8c6:	0e 94 ca 05 	call	0xb94	; 0xb94 <strnlen>
 8ca:	2c 01       	movw	r4, r24
 8cc:	83 01       	movw	r16, r6
 8ce:	2c 85       	ldd	r18, Y+12	; 0x0c
 8d0:	2f 77       	andi	r18, 0x7F	; 127
 8d2:	22 2e       	mov	r2, r18
 8d4:	17 c0       	rjmp	.+46     	; 0x904 <vfprintf+0x170>
 8d6:	38 01       	movw	r6, r16
 8d8:	f2 e0       	ldi	r31, 0x02	; 2
 8da:	6f 0e       	add	r6, r31
 8dc:	71 1c       	adc	r7, r1
 8de:	f8 01       	movw	r30, r16
 8e0:	a0 80       	ld	r10, Z
 8e2:	b1 80       	ldd	r11, Z+1	; 0x01
 8e4:	26 ff       	sbrs	r18, 6
 8e6:	03 c0       	rjmp	.+6      	; 0x8ee <vfprintf+0x15a>
 8e8:	65 2d       	mov	r22, r5
 8ea:	70 e0       	ldi	r23, 0x00	; 0
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <vfprintf+0x15e>
 8ee:	6f ef       	ldi	r22, 0xFF	; 255
 8f0:	7f ef       	ldi	r23, 0xFF	; 255
 8f2:	c5 01       	movw	r24, r10
 8f4:	2c 87       	std	Y+12, r18	; 0x0c
 8f6:	0e 94 b8 05 	call	0xb70	; 0xb70 <strnlen_P>
 8fa:	2c 01       	movw	r4, r24
 8fc:	2c 85       	ldd	r18, Y+12	; 0x0c
 8fe:	20 68       	ori	r18, 0x80	; 128
 900:	22 2e       	mov	r2, r18
 902:	83 01       	movw	r16, r6
 904:	23 fc       	sbrc	r2, 3
 906:	1b c0       	rjmp	.+54     	; 0x93e <vfprintf+0x1aa>
 908:	83 2d       	mov	r24, r3
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	48 16       	cp	r4, r24
 90e:	59 06       	cpc	r5, r25
 910:	b0 f4       	brcc	.+44     	; 0x93e <vfprintf+0x1aa>
 912:	b7 01       	movw	r22, r14
 914:	80 e2       	ldi	r24, 0x20	; 32
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 d5 05 	call	0xbaa	; 0xbaa <fputc>
 91c:	3a 94       	dec	r3
 91e:	f4 cf       	rjmp	.-24     	; 0x908 <vfprintf+0x174>
 920:	f5 01       	movw	r30, r10
 922:	27 fc       	sbrc	r2, 7
 924:	85 91       	lpm	r24, Z+
 926:	27 fe       	sbrs	r2, 7
 928:	81 91       	ld	r24, Z+
 92a:	5f 01       	movw	r10, r30
 92c:	b7 01       	movw	r22, r14
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e 94 d5 05 	call	0xbaa	; 0xbaa <fputc>
 934:	31 10       	cpse	r3, r1
 936:	3a 94       	dec	r3
 938:	f1 e0       	ldi	r31, 0x01	; 1
 93a:	4f 1a       	sub	r4, r31
 93c:	51 08       	sbc	r5, r1
 93e:	41 14       	cp	r4, r1
 940:	51 04       	cpc	r5, r1
 942:	71 f7       	brne	.-36     	; 0x920 <vfprintf+0x18c>
 944:	e5 c0       	rjmp	.+458    	; 0xb10 <vfprintf+0x37c>
 946:	84 36       	cpi	r24, 0x64	; 100
 948:	11 f0       	breq	.+4      	; 0x94e <vfprintf+0x1ba>
 94a:	89 36       	cpi	r24, 0x69	; 105
 94c:	39 f5       	brne	.+78     	; 0x99c <vfprintf+0x208>
 94e:	f8 01       	movw	r30, r16
 950:	27 ff       	sbrs	r18, 7
 952:	07 c0       	rjmp	.+14     	; 0x962 <vfprintf+0x1ce>
 954:	60 81       	ld	r22, Z
 956:	71 81       	ldd	r23, Z+1	; 0x01
 958:	82 81       	ldd	r24, Z+2	; 0x02
 95a:	93 81       	ldd	r25, Z+3	; 0x03
 95c:	0c 5f       	subi	r16, 0xFC	; 252
 95e:	1f 4f       	sbci	r17, 0xFF	; 255
 960:	08 c0       	rjmp	.+16     	; 0x972 <vfprintf+0x1de>
 962:	60 81       	ld	r22, Z
 964:	71 81       	ldd	r23, Z+1	; 0x01
 966:	88 27       	eor	r24, r24
 968:	77 fd       	sbrc	r23, 7
 96a:	80 95       	com	r24
 96c:	98 2f       	mov	r25, r24
 96e:	0e 5f       	subi	r16, 0xFE	; 254
 970:	1f 4f       	sbci	r17, 0xFF	; 255
 972:	2f 76       	andi	r18, 0x6F	; 111
 974:	b2 2e       	mov	r11, r18
 976:	97 ff       	sbrs	r25, 7
 978:	09 c0       	rjmp	.+18     	; 0x98c <vfprintf+0x1f8>
 97a:	90 95       	com	r25
 97c:	80 95       	com	r24
 97e:	70 95       	com	r23
 980:	61 95       	neg	r22
 982:	7f 4f       	sbci	r23, 0xFF	; 255
 984:	8f 4f       	sbci	r24, 0xFF	; 255
 986:	9f 4f       	sbci	r25, 0xFF	; 255
 988:	20 68       	ori	r18, 0x80	; 128
 98a:	b2 2e       	mov	r11, r18
 98c:	2a e0       	ldi	r18, 0x0A	; 10
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	a4 01       	movw	r20, r8
 992:	0e 94 07 06 	call	0xc0e	; 0xc0e <__ultoa_invert>
 996:	a8 2e       	mov	r10, r24
 998:	a8 18       	sub	r10, r8
 99a:	44 c0       	rjmp	.+136    	; 0xa24 <vfprintf+0x290>
 99c:	85 37       	cpi	r24, 0x75	; 117
 99e:	29 f4       	brne	.+10     	; 0x9aa <vfprintf+0x216>
 9a0:	2f 7e       	andi	r18, 0xEF	; 239
 9a2:	b2 2e       	mov	r11, r18
 9a4:	2a e0       	ldi	r18, 0x0A	; 10
 9a6:	30 e0       	ldi	r19, 0x00	; 0
 9a8:	25 c0       	rjmp	.+74     	; 0x9f4 <vfprintf+0x260>
 9aa:	f2 2f       	mov	r31, r18
 9ac:	f9 7f       	andi	r31, 0xF9	; 249
 9ae:	bf 2e       	mov	r11, r31
 9b0:	8f 36       	cpi	r24, 0x6F	; 111
 9b2:	c1 f0       	breq	.+48     	; 0x9e4 <vfprintf+0x250>
 9b4:	18 f4       	brcc	.+6      	; 0x9bc <vfprintf+0x228>
 9b6:	88 35       	cpi	r24, 0x58	; 88
 9b8:	79 f0       	breq	.+30     	; 0x9d8 <vfprintf+0x244>
 9ba:	b4 c0       	rjmp	.+360    	; 0xb24 <vfprintf+0x390>
 9bc:	80 37       	cpi	r24, 0x70	; 112
 9be:	19 f0       	breq	.+6      	; 0x9c6 <vfprintf+0x232>
 9c0:	88 37       	cpi	r24, 0x78	; 120
 9c2:	21 f0       	breq	.+8      	; 0x9cc <vfprintf+0x238>
 9c4:	af c0       	rjmp	.+350    	; 0xb24 <vfprintf+0x390>
 9c6:	2f 2f       	mov	r18, r31
 9c8:	20 61       	ori	r18, 0x10	; 16
 9ca:	b2 2e       	mov	r11, r18
 9cc:	b4 fe       	sbrs	r11, 4
 9ce:	0d c0       	rjmp	.+26     	; 0x9ea <vfprintf+0x256>
 9d0:	8b 2d       	mov	r24, r11
 9d2:	84 60       	ori	r24, 0x04	; 4
 9d4:	b8 2e       	mov	r11, r24
 9d6:	09 c0       	rjmp	.+18     	; 0x9ea <vfprintf+0x256>
 9d8:	24 ff       	sbrs	r18, 4
 9da:	0a c0       	rjmp	.+20     	; 0x9f0 <vfprintf+0x25c>
 9dc:	9f 2f       	mov	r25, r31
 9de:	96 60       	ori	r25, 0x06	; 6
 9e0:	b9 2e       	mov	r11, r25
 9e2:	06 c0       	rjmp	.+12     	; 0x9f0 <vfprintf+0x25c>
 9e4:	28 e0       	ldi	r18, 0x08	; 8
 9e6:	30 e0       	ldi	r19, 0x00	; 0
 9e8:	05 c0       	rjmp	.+10     	; 0x9f4 <vfprintf+0x260>
 9ea:	20 e1       	ldi	r18, 0x10	; 16
 9ec:	30 e0       	ldi	r19, 0x00	; 0
 9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <vfprintf+0x260>
 9f0:	20 e1       	ldi	r18, 0x10	; 16
 9f2:	32 e0       	ldi	r19, 0x02	; 2
 9f4:	f8 01       	movw	r30, r16
 9f6:	b7 fe       	sbrs	r11, 7
 9f8:	07 c0       	rjmp	.+14     	; 0xa08 <vfprintf+0x274>
 9fa:	60 81       	ld	r22, Z
 9fc:	71 81       	ldd	r23, Z+1	; 0x01
 9fe:	82 81       	ldd	r24, Z+2	; 0x02
 a00:	93 81       	ldd	r25, Z+3	; 0x03
 a02:	0c 5f       	subi	r16, 0xFC	; 252
 a04:	1f 4f       	sbci	r17, 0xFF	; 255
 a06:	06 c0       	rjmp	.+12     	; 0xa14 <vfprintf+0x280>
 a08:	60 81       	ld	r22, Z
 a0a:	71 81       	ldd	r23, Z+1	; 0x01
 a0c:	80 e0       	ldi	r24, 0x00	; 0
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	0e 5f       	subi	r16, 0xFE	; 254
 a12:	1f 4f       	sbci	r17, 0xFF	; 255
 a14:	a4 01       	movw	r20, r8
 a16:	0e 94 07 06 	call	0xc0e	; 0xc0e <__ultoa_invert>
 a1a:	a8 2e       	mov	r10, r24
 a1c:	a8 18       	sub	r10, r8
 a1e:	fb 2d       	mov	r31, r11
 a20:	ff 77       	andi	r31, 0x7F	; 127
 a22:	bf 2e       	mov	r11, r31
 a24:	b6 fe       	sbrs	r11, 6
 a26:	0b c0       	rjmp	.+22     	; 0xa3e <vfprintf+0x2aa>
 a28:	2b 2d       	mov	r18, r11
 a2a:	2e 7f       	andi	r18, 0xFE	; 254
 a2c:	a5 14       	cp	r10, r5
 a2e:	50 f4       	brcc	.+20     	; 0xa44 <vfprintf+0x2b0>
 a30:	b4 fe       	sbrs	r11, 4
 a32:	0a c0       	rjmp	.+20     	; 0xa48 <vfprintf+0x2b4>
 a34:	b2 fc       	sbrc	r11, 2
 a36:	08 c0       	rjmp	.+16     	; 0xa48 <vfprintf+0x2b4>
 a38:	2b 2d       	mov	r18, r11
 a3a:	2e 7e       	andi	r18, 0xEE	; 238
 a3c:	05 c0       	rjmp	.+10     	; 0xa48 <vfprintf+0x2b4>
 a3e:	7a 2c       	mov	r7, r10
 a40:	2b 2d       	mov	r18, r11
 a42:	03 c0       	rjmp	.+6      	; 0xa4a <vfprintf+0x2b6>
 a44:	7a 2c       	mov	r7, r10
 a46:	01 c0       	rjmp	.+2      	; 0xa4a <vfprintf+0x2b6>
 a48:	75 2c       	mov	r7, r5
 a4a:	24 ff       	sbrs	r18, 4
 a4c:	0d c0       	rjmp	.+26     	; 0xa68 <vfprintf+0x2d4>
 a4e:	fe 01       	movw	r30, r28
 a50:	ea 0d       	add	r30, r10
 a52:	f1 1d       	adc	r31, r1
 a54:	80 81       	ld	r24, Z
 a56:	80 33       	cpi	r24, 0x30	; 48
 a58:	11 f4       	brne	.+4      	; 0xa5e <vfprintf+0x2ca>
 a5a:	29 7e       	andi	r18, 0xE9	; 233
 a5c:	09 c0       	rjmp	.+18     	; 0xa70 <vfprintf+0x2dc>
 a5e:	22 ff       	sbrs	r18, 2
 a60:	06 c0       	rjmp	.+12     	; 0xa6e <vfprintf+0x2da>
 a62:	73 94       	inc	r7
 a64:	73 94       	inc	r7
 a66:	04 c0       	rjmp	.+8      	; 0xa70 <vfprintf+0x2dc>
 a68:	82 2f       	mov	r24, r18
 a6a:	86 78       	andi	r24, 0x86	; 134
 a6c:	09 f0       	breq	.+2      	; 0xa70 <vfprintf+0x2dc>
 a6e:	73 94       	inc	r7
 a70:	23 fd       	sbrc	r18, 3
 a72:	13 c0       	rjmp	.+38     	; 0xa9a <vfprintf+0x306>
 a74:	20 ff       	sbrs	r18, 0
 a76:	06 c0       	rjmp	.+12     	; 0xa84 <vfprintf+0x2f0>
 a78:	5a 2c       	mov	r5, r10
 a7a:	73 14       	cp	r7, r3
 a7c:	18 f4       	brcc	.+6      	; 0xa84 <vfprintf+0x2f0>
 a7e:	53 0c       	add	r5, r3
 a80:	57 18       	sub	r5, r7
 a82:	73 2c       	mov	r7, r3
 a84:	73 14       	cp	r7, r3
 a86:	68 f4       	brcc	.+26     	; 0xaa2 <vfprintf+0x30e>
 a88:	b7 01       	movw	r22, r14
 a8a:	80 e2       	ldi	r24, 0x20	; 32
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	2c 87       	std	Y+12, r18	; 0x0c
 a90:	0e 94 d5 05 	call	0xbaa	; 0xbaa <fputc>
 a94:	73 94       	inc	r7
 a96:	2c 85       	ldd	r18, Y+12	; 0x0c
 a98:	f5 cf       	rjmp	.-22     	; 0xa84 <vfprintf+0x2f0>
 a9a:	73 14       	cp	r7, r3
 a9c:	10 f4       	brcc	.+4      	; 0xaa2 <vfprintf+0x30e>
 a9e:	37 18       	sub	r3, r7
 aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <vfprintf+0x310>
 aa2:	31 2c       	mov	r3, r1
 aa4:	24 ff       	sbrs	r18, 4
 aa6:	12 c0       	rjmp	.+36     	; 0xacc <vfprintf+0x338>
 aa8:	b7 01       	movw	r22, r14
 aaa:	80 e3       	ldi	r24, 0x30	; 48
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	2c 87       	std	Y+12, r18	; 0x0c
 ab0:	0e 94 d5 05 	call	0xbaa	; 0xbaa <fputc>
 ab4:	2c 85       	ldd	r18, Y+12	; 0x0c
 ab6:	22 ff       	sbrs	r18, 2
 ab8:	17 c0       	rjmp	.+46     	; 0xae8 <vfprintf+0x354>
 aba:	21 ff       	sbrs	r18, 1
 abc:	03 c0       	rjmp	.+6      	; 0xac4 <vfprintf+0x330>
 abe:	88 e5       	ldi	r24, 0x58	; 88
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	02 c0       	rjmp	.+4      	; 0xac8 <vfprintf+0x334>
 ac4:	88 e7       	ldi	r24, 0x78	; 120
 ac6:	90 e0       	ldi	r25, 0x00	; 0
 ac8:	b7 01       	movw	r22, r14
 aca:	0c c0       	rjmp	.+24     	; 0xae4 <vfprintf+0x350>
 acc:	82 2f       	mov	r24, r18
 ace:	86 78       	andi	r24, 0x86	; 134
 ad0:	59 f0       	breq	.+22     	; 0xae8 <vfprintf+0x354>
 ad2:	21 fd       	sbrc	r18, 1
 ad4:	02 c0       	rjmp	.+4      	; 0xada <vfprintf+0x346>
 ad6:	80 e2       	ldi	r24, 0x20	; 32
 ad8:	01 c0       	rjmp	.+2      	; 0xadc <vfprintf+0x348>
 ada:	8b e2       	ldi	r24, 0x2B	; 43
 adc:	27 fd       	sbrc	r18, 7
 ade:	8d e2       	ldi	r24, 0x2D	; 45
 ae0:	b7 01       	movw	r22, r14
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	0e 94 d5 05 	call	0xbaa	; 0xbaa <fputc>
 ae8:	a5 14       	cp	r10, r5
 aea:	38 f4       	brcc	.+14     	; 0xafa <vfprintf+0x366>
 aec:	b7 01       	movw	r22, r14
 aee:	80 e3       	ldi	r24, 0x30	; 48
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	0e 94 d5 05 	call	0xbaa	; 0xbaa <fputc>
 af6:	5a 94       	dec	r5
 af8:	f7 cf       	rjmp	.-18     	; 0xae8 <vfprintf+0x354>
 afa:	aa 94       	dec	r10
 afc:	f4 01       	movw	r30, r8
 afe:	ea 0d       	add	r30, r10
 b00:	f1 1d       	adc	r31, r1
 b02:	80 81       	ld	r24, Z
 b04:	b7 01       	movw	r22, r14
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	0e 94 d5 05 	call	0xbaa	; 0xbaa <fputc>
 b0c:	a1 10       	cpse	r10, r1
 b0e:	f5 cf       	rjmp	.-22     	; 0xafa <vfprintf+0x366>
 b10:	33 20       	and	r3, r3
 b12:	09 f4       	brne	.+2      	; 0xb16 <vfprintf+0x382>
 b14:	51 ce       	rjmp	.-862    	; 0x7b8 <vfprintf+0x24>
 b16:	b7 01       	movw	r22, r14
 b18:	80 e2       	ldi	r24, 0x20	; 32
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <fputc>
 b20:	3a 94       	dec	r3
 b22:	f6 cf       	rjmp	.-20     	; 0xb10 <vfprintf+0x37c>
 b24:	f7 01       	movw	r30, r14
 b26:	86 81       	ldd	r24, Z+6	; 0x06
 b28:	97 81       	ldd	r25, Z+7	; 0x07
 b2a:	02 c0       	rjmp	.+4      	; 0xb30 <vfprintf+0x39c>
 b2c:	8f ef       	ldi	r24, 0xFF	; 255
 b2e:	9f ef       	ldi	r25, 0xFF	; 255
 b30:	2c 96       	adiw	r28, 0x0c	; 12
 b32:	e2 e1       	ldi	r30, 0x12	; 18
 b34:	0c 94 81 06 	jmp	0xd02	; 0xd02 <__epilogue_restores__>

00000b38 <calloc>:
 b38:	0f 93       	push	r16
 b3a:	1f 93       	push	r17
 b3c:	cf 93       	push	r28
 b3e:	df 93       	push	r29
 b40:	86 9f       	mul	r24, r22
 b42:	80 01       	movw	r16, r0
 b44:	87 9f       	mul	r24, r23
 b46:	10 0d       	add	r17, r0
 b48:	96 9f       	mul	r25, r22
 b4a:	10 0d       	add	r17, r0
 b4c:	11 24       	eor	r1, r1
 b4e:	c8 01       	movw	r24, r16
 b50:	0e 94 44 02 	call	0x488	; 0x488 <malloc>
 b54:	ec 01       	movw	r28, r24
 b56:	00 97       	sbiw	r24, 0x00	; 0
 b58:	29 f0       	breq	.+10     	; 0xb64 <calloc+0x2c>
 b5a:	a8 01       	movw	r20, r16
 b5c:	60 e0       	ldi	r22, 0x00	; 0
 b5e:	70 e0       	ldi	r23, 0x00	; 0
 b60:	0e 94 c3 05 	call	0xb86	; 0xb86 <memset>
 b64:	ce 01       	movw	r24, r28
 b66:	df 91       	pop	r29
 b68:	cf 91       	pop	r28
 b6a:	1f 91       	pop	r17
 b6c:	0f 91       	pop	r16
 b6e:	08 95       	ret

00000b70 <strnlen_P>:
 b70:	fc 01       	movw	r30, r24
 b72:	05 90       	lpm	r0, Z+
 b74:	61 50       	subi	r22, 0x01	; 1
 b76:	70 40       	sbci	r23, 0x00	; 0
 b78:	01 10       	cpse	r0, r1
 b7a:	d8 f7       	brcc	.-10     	; 0xb72 <strnlen_P+0x2>
 b7c:	80 95       	com	r24
 b7e:	90 95       	com	r25
 b80:	8e 0f       	add	r24, r30
 b82:	9f 1f       	adc	r25, r31
 b84:	08 95       	ret

00000b86 <memset>:
 b86:	dc 01       	movw	r26, r24
 b88:	01 c0       	rjmp	.+2      	; 0xb8c <memset+0x6>
 b8a:	6d 93       	st	X+, r22
 b8c:	41 50       	subi	r20, 0x01	; 1
 b8e:	50 40       	sbci	r21, 0x00	; 0
 b90:	e0 f7       	brcc	.-8      	; 0xb8a <memset+0x4>
 b92:	08 95       	ret

00000b94 <strnlen>:
 b94:	fc 01       	movw	r30, r24
 b96:	61 50       	subi	r22, 0x01	; 1
 b98:	70 40       	sbci	r23, 0x00	; 0
 b9a:	01 90       	ld	r0, Z+
 b9c:	01 10       	cpse	r0, r1
 b9e:	d8 f7       	brcc	.-10     	; 0xb96 <strnlen+0x2>
 ba0:	80 95       	com	r24
 ba2:	90 95       	com	r25
 ba4:	8e 0f       	add	r24, r30
 ba6:	9f 1f       	adc	r25, r31
 ba8:	08 95       	ret

00000baa <fputc>:
 baa:	0f 93       	push	r16
 bac:	1f 93       	push	r17
 bae:	cf 93       	push	r28
 bb0:	df 93       	push	r29
 bb2:	18 2f       	mov	r17, r24
 bb4:	09 2f       	mov	r16, r25
 bb6:	eb 01       	movw	r28, r22
 bb8:	8b 81       	ldd	r24, Y+3	; 0x03
 bba:	81 fd       	sbrc	r24, 1
 bbc:	03 c0       	rjmp	.+6      	; 0xbc4 <fputc+0x1a>
 bbe:	8f ef       	ldi	r24, 0xFF	; 255
 bc0:	9f ef       	ldi	r25, 0xFF	; 255
 bc2:	20 c0       	rjmp	.+64     	; 0xc04 <fputc+0x5a>
 bc4:	82 ff       	sbrs	r24, 2
 bc6:	10 c0       	rjmp	.+32     	; 0xbe8 <fputc+0x3e>
 bc8:	4e 81       	ldd	r20, Y+6	; 0x06
 bca:	5f 81       	ldd	r21, Y+7	; 0x07
 bcc:	2c 81       	ldd	r18, Y+4	; 0x04
 bce:	3d 81       	ldd	r19, Y+5	; 0x05
 bd0:	42 17       	cp	r20, r18
 bd2:	53 07       	cpc	r21, r19
 bd4:	7c f4       	brge	.+30     	; 0xbf4 <fputc+0x4a>
 bd6:	e8 81       	ld	r30, Y
 bd8:	f9 81       	ldd	r31, Y+1	; 0x01
 bda:	9f 01       	movw	r18, r30
 bdc:	2f 5f       	subi	r18, 0xFF	; 255
 bde:	3f 4f       	sbci	r19, 0xFF	; 255
 be0:	39 83       	std	Y+1, r19	; 0x01
 be2:	28 83       	st	Y, r18
 be4:	10 83       	st	Z, r17
 be6:	06 c0       	rjmp	.+12     	; 0xbf4 <fputc+0x4a>
 be8:	e8 85       	ldd	r30, Y+8	; 0x08
 bea:	f9 85       	ldd	r31, Y+9	; 0x09
 bec:	81 2f       	mov	r24, r17
 bee:	09 95       	icall
 bf0:	89 2b       	or	r24, r25
 bf2:	29 f7       	brne	.-54     	; 0xbbe <fputc+0x14>
 bf4:	2e 81       	ldd	r18, Y+6	; 0x06
 bf6:	3f 81       	ldd	r19, Y+7	; 0x07
 bf8:	2f 5f       	subi	r18, 0xFF	; 255
 bfa:	3f 4f       	sbci	r19, 0xFF	; 255
 bfc:	3f 83       	std	Y+7, r19	; 0x07
 bfe:	2e 83       	std	Y+6, r18	; 0x06
 c00:	81 2f       	mov	r24, r17
 c02:	90 2f       	mov	r25, r16
 c04:	df 91       	pop	r29
 c06:	cf 91       	pop	r28
 c08:	1f 91       	pop	r17
 c0a:	0f 91       	pop	r16
 c0c:	08 95       	ret

00000c0e <__ultoa_invert>:
 c0e:	fa 01       	movw	r30, r20
 c10:	aa 27       	eor	r26, r26
 c12:	28 30       	cpi	r18, 0x08	; 8
 c14:	51 f1       	breq	.+84     	; 0xc6a <__ultoa_invert+0x5c>
 c16:	20 31       	cpi	r18, 0x10	; 16
 c18:	81 f1       	breq	.+96     	; 0xc7a <__ultoa_invert+0x6c>
 c1a:	e8 94       	clt
 c1c:	6f 93       	push	r22
 c1e:	6e 7f       	andi	r22, 0xFE	; 254
 c20:	6e 5f       	subi	r22, 0xFE	; 254
 c22:	7f 4f       	sbci	r23, 0xFF	; 255
 c24:	8f 4f       	sbci	r24, 0xFF	; 255
 c26:	9f 4f       	sbci	r25, 0xFF	; 255
 c28:	af 4f       	sbci	r26, 0xFF	; 255
 c2a:	b1 e0       	ldi	r27, 0x01	; 1
 c2c:	3e d0       	rcall	.+124    	; 0xcaa <__ultoa_invert+0x9c>
 c2e:	b4 e0       	ldi	r27, 0x04	; 4
 c30:	3c d0       	rcall	.+120    	; 0xcaa <__ultoa_invert+0x9c>
 c32:	67 0f       	add	r22, r23
 c34:	78 1f       	adc	r23, r24
 c36:	89 1f       	adc	r24, r25
 c38:	9a 1f       	adc	r25, r26
 c3a:	a1 1d       	adc	r26, r1
 c3c:	68 0f       	add	r22, r24
 c3e:	79 1f       	adc	r23, r25
 c40:	8a 1f       	adc	r24, r26
 c42:	91 1d       	adc	r25, r1
 c44:	a1 1d       	adc	r26, r1
 c46:	6a 0f       	add	r22, r26
 c48:	71 1d       	adc	r23, r1
 c4a:	81 1d       	adc	r24, r1
 c4c:	91 1d       	adc	r25, r1
 c4e:	a1 1d       	adc	r26, r1
 c50:	20 d0       	rcall	.+64     	; 0xc92 <__ultoa_invert+0x84>
 c52:	09 f4       	brne	.+2      	; 0xc56 <__ultoa_invert+0x48>
 c54:	68 94       	set
 c56:	3f 91       	pop	r19
 c58:	2a e0       	ldi	r18, 0x0A	; 10
 c5a:	26 9f       	mul	r18, r22
 c5c:	11 24       	eor	r1, r1
 c5e:	30 19       	sub	r19, r0
 c60:	30 5d       	subi	r19, 0xD0	; 208
 c62:	31 93       	st	Z+, r19
 c64:	de f6       	brtc	.-74     	; 0xc1c <__ultoa_invert+0xe>
 c66:	cf 01       	movw	r24, r30
 c68:	08 95       	ret
 c6a:	46 2f       	mov	r20, r22
 c6c:	47 70       	andi	r20, 0x07	; 7
 c6e:	40 5d       	subi	r20, 0xD0	; 208
 c70:	41 93       	st	Z+, r20
 c72:	b3 e0       	ldi	r27, 0x03	; 3
 c74:	0f d0       	rcall	.+30     	; 0xc94 <__ultoa_invert+0x86>
 c76:	c9 f7       	brne	.-14     	; 0xc6a <__ultoa_invert+0x5c>
 c78:	f6 cf       	rjmp	.-20     	; 0xc66 <__ultoa_invert+0x58>
 c7a:	46 2f       	mov	r20, r22
 c7c:	4f 70       	andi	r20, 0x0F	; 15
 c7e:	40 5d       	subi	r20, 0xD0	; 208
 c80:	4a 33       	cpi	r20, 0x3A	; 58
 c82:	18 f0       	brcs	.+6      	; 0xc8a <__ultoa_invert+0x7c>
 c84:	49 5d       	subi	r20, 0xD9	; 217
 c86:	31 fd       	sbrc	r19, 1
 c88:	40 52       	subi	r20, 0x20	; 32
 c8a:	41 93       	st	Z+, r20
 c8c:	02 d0       	rcall	.+4      	; 0xc92 <__ultoa_invert+0x84>
 c8e:	a9 f7       	brne	.-22     	; 0xc7a <__ultoa_invert+0x6c>
 c90:	ea cf       	rjmp	.-44     	; 0xc66 <__ultoa_invert+0x58>
 c92:	b4 e0       	ldi	r27, 0x04	; 4
 c94:	a6 95       	lsr	r26
 c96:	97 95       	ror	r25
 c98:	87 95       	ror	r24
 c9a:	77 95       	ror	r23
 c9c:	67 95       	ror	r22
 c9e:	ba 95       	dec	r27
 ca0:	c9 f7       	brne	.-14     	; 0xc94 <__ultoa_invert+0x86>
 ca2:	00 97       	sbiw	r24, 0x00	; 0
 ca4:	61 05       	cpc	r22, r1
 ca6:	71 05       	cpc	r23, r1
 ca8:	08 95       	ret
 caa:	9b 01       	movw	r18, r22
 cac:	ac 01       	movw	r20, r24
 cae:	0a 2e       	mov	r0, r26
 cb0:	06 94       	lsr	r0
 cb2:	57 95       	ror	r21
 cb4:	47 95       	ror	r20
 cb6:	37 95       	ror	r19
 cb8:	27 95       	ror	r18
 cba:	ba 95       	dec	r27
 cbc:	c9 f7       	brne	.-14     	; 0xcb0 <__ultoa_invert+0xa2>
 cbe:	62 0f       	add	r22, r18
 cc0:	73 1f       	adc	r23, r19
 cc2:	84 1f       	adc	r24, r20
 cc4:	95 1f       	adc	r25, r21
 cc6:	a0 1d       	adc	r26, r0
 cc8:	08 95       	ret

00000cca <__prologue_saves__>:
 cca:	2f 92       	push	r2
 ccc:	3f 92       	push	r3
 cce:	4f 92       	push	r4
 cd0:	5f 92       	push	r5
 cd2:	6f 92       	push	r6
 cd4:	7f 92       	push	r7
 cd6:	8f 92       	push	r8
 cd8:	9f 92       	push	r9
 cda:	af 92       	push	r10
 cdc:	bf 92       	push	r11
 cde:	cf 92       	push	r12
 ce0:	df 92       	push	r13
 ce2:	ef 92       	push	r14
 ce4:	ff 92       	push	r15
 ce6:	0f 93       	push	r16
 ce8:	1f 93       	push	r17
 cea:	cf 93       	push	r28
 cec:	df 93       	push	r29
 cee:	cd b7       	in	r28, 0x3d	; 61
 cf0:	de b7       	in	r29, 0x3e	; 62
 cf2:	ca 1b       	sub	r28, r26
 cf4:	db 0b       	sbc	r29, r27
 cf6:	0f b6       	in	r0, 0x3f	; 63
 cf8:	f8 94       	cli
 cfa:	de bf       	out	0x3e, r29	; 62
 cfc:	0f be       	out	0x3f, r0	; 63
 cfe:	cd bf       	out	0x3d, r28	; 61
 d00:	09 94       	ijmp

00000d02 <__epilogue_restores__>:
 d02:	2a 88       	ldd	r2, Y+18	; 0x12
 d04:	39 88       	ldd	r3, Y+17	; 0x11
 d06:	48 88       	ldd	r4, Y+16	; 0x10
 d08:	5f 84       	ldd	r5, Y+15	; 0x0f
 d0a:	6e 84       	ldd	r6, Y+14	; 0x0e
 d0c:	7d 84       	ldd	r7, Y+13	; 0x0d
 d0e:	8c 84       	ldd	r8, Y+12	; 0x0c
 d10:	9b 84       	ldd	r9, Y+11	; 0x0b
 d12:	aa 84       	ldd	r10, Y+10	; 0x0a
 d14:	b9 84       	ldd	r11, Y+9	; 0x09
 d16:	c8 84       	ldd	r12, Y+8	; 0x08
 d18:	df 80       	ldd	r13, Y+7	; 0x07
 d1a:	ee 80       	ldd	r14, Y+6	; 0x06
 d1c:	fd 80       	ldd	r15, Y+5	; 0x05
 d1e:	0c 81       	ldd	r16, Y+4	; 0x04
 d20:	1b 81       	ldd	r17, Y+3	; 0x03
 d22:	aa 81       	ldd	r26, Y+2	; 0x02
 d24:	b9 81       	ldd	r27, Y+1	; 0x01
 d26:	ce 0f       	add	r28, r30
 d28:	d1 1d       	adc	r29, r1
 d2a:	0f b6       	in	r0, 0x3f	; 63
 d2c:	f8 94       	cli
 d2e:	de bf       	out	0x3e, r29	; 62
 d30:	0f be       	out	0x3f, r0	; 63
 d32:	cd bf       	out	0x3d, r28	; 61
 d34:	ed 01       	movw	r28, r26
 d36:	08 95       	ret

00000d38 <_exit>:
 d38:	f8 94       	cli

00000d3a <__stop_program>:
 d3a:	ff cf       	rjmp	.-2      	; 0xd3a <__stop_program>
